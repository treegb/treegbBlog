<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>190803 ( Log table ) 2019-08</title>
      <link href="/treegbBlog/19/08/03/190803m101619/"/>
      <url>/treegbBlog/19/08/03/190803m101619/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-08:</strong> <a href="#id190803m102009">Section</a>.</li>    <li><strong>2019-08-03:</strong> <a href="#id190803m102106">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-08<a id="id190803m102009"></a></h2>  <div class="kwCloud">    <div class="itm s2">圍棋人科技股份有限公司</div>    <div class="itm s2">Job</div>    <div class="itm s1">{ Sass }</div>    <div class="itm s1">{ Vue }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>190803:</strong>          <ol>            <li><strong>??:</strong> ??</li>          </ol>        </li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-08-03<a id="id190803m102106"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ git }</div>  </div>  <ol>    <li><strong>Git push (in https) results in "Authentication Failed:</strong> Conclusion: If you enabled two-factor authentication in your Github account you won't be able to push via HTTPS using your accounts password. Instead you need to generate and use a personal access token. // And the first time (?) you have to clone with <code>git clone 'https://treegb:myVeryLongPersonalAccessToken@github.com/tsengwoody/LoveAndHappiness-frontend.git'</code>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>09:00 Wake up.</strong></li>        <li><strong>09:?? Dealing with { git }:</strong> Can't clone a private repo from Woody.</li>        <li><strong>10:15 Uploading blog.</strong></li>      </ol>    </li>  </ol></div><hr><div class="h2">  <h2>2019-08-xx<a id="xx"></a></h2>  <div class="kwCloud">    <div class="itm s1">??</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ lahSale }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>?? Wake up.</strong></li>        <li><strong>?? Go exercising.</strong></li>        <li><strong>?? Uploading blog.</strong></li>        <li><strong>?? Cooking.</strong></li>        <li><strong>?? Eating.</strong></li>      </ol>    </li>    <li><strong>:</strong> <a href>Link</a>.</li>  </ol></div><hr><div class="facetList"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190803 ( Log table ) 2019-08</title>
      <link href="/treegbBlog/19/08/01/190803m101619/"/>
      <url>/treegbBlog/19/08/01/190803m101619/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-08:</strong> <a href="#id190803m102009">Section</a>.</li>    <li><strong>2019-08-03:</strong> <a href="#id190803m102106">Section</a>.</li>    <li><strong>2019-08-04:</strong> <a href="#id190804m075202">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-08<a id="id190803m102009"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ 圍棋人科技股份有限公司 }-{ Goer }</div>    <div class="itm s2">Job</div>    <div class="itm s1">{ Sass }</div>    <div class="itm s1">{ Vue }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>190803:</strong>          <ol>            <li><strong>Talking with woody about { lahSale } new requirement:</strong> And solve my installation problem, since it have been long time I havn't touch the code base.</li>          </ol>        </li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-08-03<a id="id190803m102106"></a></h2>  <div class="kwCloud">    <div class="itm s3">{ 圍棋人科技股份有限公司 }-{ Goer }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ git }</div>  </div>  <ol>    <li><strong>台客劇場 - 雜貨店一日老闆體驗！不賺錢還存在的原因？</strong></li>    <li><strong>( CSS ) Kevin Powell - 5 CSS mistakes that I see way too often:</strong> <a href="https://www.youtube.com/watch?v=iHEkRIF7zxI" target="_blank" rel="noopener">Link</a>. Organizing your css to make it more readable.</li>    <li><strong>How to avoid typing username & password when using HTTPS Authentication:</strong> <a href="https://medium.com/@isaacjumba/git-how-to-avoid-typing-username-password-when-using-https-authentication-f22bb259dfc7" target="_blank" rel="noopener">Link</a>. Related to <code>credential.helper</code>.</li>    <li><strong>Git push (in https) results in "Authentication Failed:</strong> <a href="https://stackoverflow.com/questions/17659206/git-push-results-in-authentication-failed" target="_blank" rel="noopener">Link</a>. Conclusion: If you enabled two-factor authentication in your Github account you won't be able to push via HTTPS using your accounts password. Instead you need to generate and use a personal access token. // And the first time (?) you have to clone with <code>git clone 'https://treegb:myVeryLongPersonalAccessToken@github.com/tsengwoody/LoveAndHappiness-frontend.git'</code>, and I think this stores into <strong><code>credential.helper</code></strong>, youh can use <strong><code>git config --global --unset credential.helper</code></strong> as article to remove it, I think.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>09:00 Wake up.</strong></li>        <li><strong>09:?? Dealing with { git }:</strong> Can't clone a private repo from Woody.</li>        <li><strong>10:15 Uploading blog.</strong></li>        <li><strong>10:35 git clone Woody's repo:</strong> Success finally.</li>        <li><strong>11:00 Talk with Woody about { lahSale }:</strong> Understanding where I can help to update the interface, according to some changes in the last month.</li>        <li><strong>12:00 Misc for Goer project.</strong></li>        <li><strong>12:20 Watching video.</strong></li>        <li><strong>12:36 Take a nap.</strong></li>        <li><strong>13:10 Watching video about CSS tips.</strong></li>        <li><strong>13:30 Watching video.</strong></li>        <li><strong>13:40 Working on Goer project.</strong></li>        <li><strong>18:30 Finished a component.</strong></li>        <li><strong>18:31 Grocery, misc, cooking.</strong></li>        <li><strong>19:45 Eating, muse, watching video.</strong></li>        <li><strong>21:35 Working on Goer project.</strong></li>        <li><strong>23:20 Complete the task.</strong></li>        <li><strong>23:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-08-04<a id="id190804m075202"></a></h2>  <div class="kwCloud">  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>07:45 Wake up.</strong></li>        <li><strong>07:50 Uploading blog.</strong></li>        <li><strong>07:55 Bathroom.</strong></li>        <li><strong>08:10 Solving hexo ,, can't deploy promblem:</strong> I think it is due to git ,, credential problem as same as yesterday.</li>      </ol>    </li>  </ol></div><hr><div class="h2">  <h2>2019-08-xx<a id="xx"></a></h2>  <div class="kwCloud">    <div class="itm s1">??</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ lahSale }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>?? Wake up.</strong></li>        <li><strong>?? Go exercising.</strong></li>        <li><strong>?? Uploading blog.</strong></li>        <li><strong>?? Cooking.</strong></li>        <li><strong>?? Eating.</strong></li>      </ol>    </li>    <li><strong>:</strong> <a href>Link</a>.</li>  </ol></div><hr><div class="facetList"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190701 ( Log table ) 2019-07</title>
      <link href="/treegbBlog/19/07/01/190701m074556/"/>
      <url>/treegbBlog/19/07/01/190701m074556/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-07:</strong> <a href="#id190701m074557">Section</a>.</li>    <li><strong>2019-07-01:</strong> <a href="#id190701m074558">Section</a>.</li>    <li><strong>2019-07-02:</strong> <a href="#id190702m064647">Section</a>.</li>    <li><strong>2019-07-03:</strong> <a href="#id190703m063139">Section</a>.</li>    <li><strong>2019-07-04:</strong> <a href="#id190704m064854">Section</a>.</li>    <li><strong>2019-07-05:</strong> <a href="#id190705m063721">Section</a>.</li>    <li><strong>2019-07-06:</strong> <a href="#id190706m065522">Section</a>.</li>    <li><strong>2019-07-07:</strong> <a href="#id190707m062154">Section</a>.</li>    <li><strong>2019-07-08:</strong> <a href="#id190708m062218">Section</a>.</li>    <li><strong>2019-07-09:</strong> <a href="#id190709m081302">Section</a>.</li>    <li><strong>2019-07-10:</strong> <a href="#id190710m072309">Section</a>.</li>    <li><strong>2019-07-11:</strong> <a href="#id190711m074152">Section</a>.</li>    <li><strong>2019-07-12:</strong> <a href="#id190712m070258">Section</a>.</li>    <li><strong>2019-07-13:</strong> <a href="#id190713m074059">Section</a>.</li>    <li><strong>2019-07-14:</strong> <a href="#id190714m090541">Section</a>.</li>    <li><strong>2019-07-15:</strong> <a href="#id190715m082229">Section</a>.</li>    <li><strong>2019-07-16:</strong> <a href="#id190716m075456">Section</a>.</li>    <li><strong>2019-07-17:</strong> <a href="#id190717m054504">Section</a>.</li>    <li><strong>2019-07-18:</strong> <a href="#id190718m074951">Section</a>.</li>    <li><strong>2019-07-19:</strong> <a href="#id190719m061822">Section</a>.</li>    <li><strong>2019-07-20:</strong> <a href="#id190720m072458">Section</a>.</li>    <li><strong>2019-07-21:</strong> <a href="#id190721m075359">Section</a>.</li>    <li><strong>2019-07-22:</strong> <a href="#id190722m072608">Section</a>.</li>    <li><strong>2019-07-xx:</strong> <a href="#xx">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-07<a id="id190701m074557"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Stoicism }</div>    <div class="itm s1">{ Virtue }</div>    <div class="itm s1">[ Higly focused ]-[ nothing matters ]-[ now ] [ mindset ]-[ zone ]</div>    <div class="itm s3">Humble</div>    <div class="itm s2">Vegan ,, diet</div>    <div class="itm s1">[ Vegan diet ]-[ 多樣，少量，頻繁 ]</div>    <div class="itm s1">Nutritional Supplement</div>    <div class="itm s1">Exercising</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">[ Art ]-[ graphic design ]</div>    <div class="itm s2">Portfolio and Resume</div>    <div class="itm s3">[ Job application ]-[ finding job ]</div>    <div class="itm s3">{ 圍棋人科技股份有限公司 }-{ Goer }</div>    <div class="itm s1">Job interview</div>    <div class="itm s1">台灣主要求職 [ 網站 ]-[ 資源 ]-[ 平台 ]</div>    <div class="itm s1">E-commerce</div>    <div class="itm s1">Project { Doggo }</div>    <div class="itm s1">Html</div>    <div class="itm s1">SVG</div>    <div class="itm s1">{ Sass }</div>    <div class="itm s1">{ CSS Variable }</div>    <div class="itm s1">{ HSL } color</div>    <div class="itm s1">{ RWD }</div>    <div class="itm s1">{ Vue }</div>    <div class="itm s1">{ Vue Loader }</div>    <div class="itm s1">{ Vue } ,, assets path</div>    <div class="itm s1">{ Vue } ,, { CSS Modules }</div>    <div class="itm s1">{ Webpack } ,, { resolve alias }</div>    <div class="itm s1">{ GSAP }-[ animation ]</div>    <div class="itm s1">{ 104 }</div>    <div class="itm s1">{ 1111 }</div>    <div class="itm s1">{ github }-{ f2etw/jobs }</div>    <div class="itm s1">{ Linkin }</div>    <div class="itm s1">{ www.cakeresume.com }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>190701:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. Header finished.</li>          </ol>        </li>        <li><strong>190702:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Title, horizontal line, finished. // Sticky footer finished. // Making <code>Vue</code> component that served for different type of <code>SVG</code>.</li>          </ol>        </li>        <li><strong>190703:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Section heading SVG component. Using HSL color. // Restructure my color system, to support each value of HSL too along with HEX value, so I can tune the "S" part and "L" part for individual use case. // Spend a lot of time on thinking and testing since I many new things I never did it myself before, though I know it.</li>            <li><strong>Learning { CSS Variable } and { Sass } and testing them:</strong> Spend a lot of time on testing, since I never do these thing myself before, though I know it.</li>          </ol>        </li>        <li><strong>190704:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Resume page Mainly completed, the RWD structure is working good, and the info is mainly completed.</li>            <li><strong>Thinking about the RWD thing:</strong> After the experience of the first page (Resume page), now I know when page shrink to the mobile screen, it can be tricky since the structure can changes dramastically sometimes. So I better rethink carefully before dive into the second page (Portfolio page).</li>          </ol>        </li>        <li><strong>190705:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Portfolio page. First section's structure, structure is half finish, but still have long way to go. Writing data logic so the data is seperate from template.</li>            <li><strong>{ Vue Loader }, assets path , { CSS Modules } in vue.</strong></li>          </ol>        </li>        <li><strong>190706:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Portfolio page. First section's (info of my projects) finished, now RWD working from desktop to mobile. The mobile version is hard to deal with since I brute forced using <code>position: absolute</code> to to make deeply nested elements break to outside root element. // Image auto slideshow is working, data logic is on process.</li>          </ol>        </li>        <li><strong>190707:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Portfolio page. First section's Modal and data logic.</li>            <li><strong>Found my phone battery inflate because of constantly charging.</strong></li>          </ol>        </li>        <li><strong>190708:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Finished Portfolio page. Doing some small tweaks everywhere.</li>            <li><strong>Sass:</strong> Starts to understand the real use case of <code>Sass</code>, not just saving variables and making some template, but making the complex code more manageable.</li>          </ol>        </li>        <li><strong>190709:</strong>          <ol>            <li><strong>( Stoicism ) { TedTalks } - "Everything happens for a reason"? It's a lie - Cancer Phase IV - Kate Bowler.</strong></li>            <li><strong>Portfolio and Resume:</strong> Designing Resume site. // Finished About me page. Doing some small tweaks everywhere. // Start to filling real [ data ]-[ information ]. Spent some time thinking about the content. Taking screenshots of 3 projects.</li>            <li><strong>Dealing with assets path problem - { resolve alias }.</strong></li>          </ol>        </li>        <li><strong>190710:</strong>          <ol>            <li><strong>( Webdev ) ( Graphic design ) ( RWD ) www.siteinspire.com - web design inspiration.</strong></li>            <li><strong>Portfolio and Resume:</strong> Git push and deploy. // Dealing with Route problem. Github ,, gh-pages, don't work with <code>vue-router</code>. I have to make some [ bad-smells ]-[ ugly ] workaround. // Doing Resume PDF version.</li>          </ol>        </li>        <li><strong>190711:</strong>          <ol>            <li><strong>( Vegan ) 台灣素食營養學會 ,, I got a lot information about Vegan diet and Nutritional Supplement from here. Reliable source.</strong></li>            <li><strong>( Vegan ) Ultimate strategy for Vegan diet is still - "多樣，少量，頻繁":</strong> This single [ rule ]-[ good practice ] emerges more and more stronger, after I gathered so much information from different time, different types, different sources, that is - <strong>多樣，少量，頻繁</strong>。</li>            <li><strong>Outdoor:</strong> Buying Nutritional Supplement including Vitamin B complex (維生素 B 群), Iron, DHA, 葉黃素 (totally around NT$850). Buying phone battery (old one is inflated due to constantly in charging) (NT$700). Having haircut (NT$100).</li>            <li><strong>Grocery:</strong> 綜合堅果，五穀麥片，小麥胚芽。原來全聯也有賣 B 群 (含 B12, B6) 跟 DHA。</li>          </ol>        </li>        <li><strong>190712:</strong>          <ol>            <li><strong>Searching and applying jobs [ from ],[ on ] { 104 },{ 1111 },{ github }-{ f2etw/jobs }:</strong> Totally applied 17 jobs today, decent.</li>            <li><strong>Found [ my resume site ] ,, big display problme on real phone and Chrome:</strong> I found my resume site can't work on my smart phone and Chrome responsive view, when I was doing some radome checking. Still don't know why, but it's lucky to find this in the first place.</li>          </ol>        </li>        <li><strong>190713:</strong>          <ol>            <li><strong>Troubleshooting and fixed [ my resume site ] ,, display on mobile phone ,, problem.</strong></li>            <li><strong>Project { Doggo }:</strong> Working on header ,, nav ,, mobile menu. // Graphic Design new <code>Doggo</code> logo. // Dealing with font works. // Thinking about making an intro-animation.</li>          </ol>        </li>        <li><strong>190714:</strong>          <ol>            <li><strong>Learninng { GSAP }-[ animation ].</strong></li>            <li><strong>Project { Doggo }:</strong> <code>About</code> page ,, animation ,, building basic structure and working on positioning.</li>          </ol>        </li>        <li><strong>190715:</strong>          <ol>            <li><strong>Watching video about jobs and portfolio.</strong></li>            <li><strong>My resume site:</strong> Updating footer icon, finding and fixing misc problems. Fixing jquery scrolling position ,, incorrect, problem. </li>          </ol>        </li>        <li><strong>190716:</strong>          <ol>            <li><strong>My first job interview - 千蓬股份有限公司 (豪亮燈飾):</strong> <a href="http://www.howlite101.com/" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.1111.com.tw/corp/9527612/#c4" target="_blank" rel="noopener">1111</a>，related to graphic design, product photography, related.</li>            <li><strong>Filling basic info in { www.cakeresume.com }:</strong> And searching job on this platform.</li>            <li><strong>Project { Doggo }:</strong> Dog breeds silhouette. Convert jpg to svg.</li>          </ol>        </li>        <li><strong>190717:</strong>          <ol>            <li><strong>2nd job interview - 富欣實業股份有限公司:</strong> <a href="http://www.fullcorp.com/full-iot/eng/home.html" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.104.com.tw/company/fy6c9ko?jobsource=pda" target="_blank" rel="noopener">104</a>. 網頁前端. From <code>104</code>. IOT related. So now I starts to have image, overview, on what is <code>IOT</code>.</li>            <li><strong>Finding job:</strong> Yourator, CakeResume.</li>            <li><strong>( Job ) 加入新創公司前，新鮮人應該問的七個問題:</strong> <a href="https://meethub.bnext.com.tw/%E5%8A%A0%E5%85%A5%E6%96%B0%E5%89%B5%E5%85%AC%E5%8F%B8%E5%89%8D%EF%BC%8C%E6%96%B0%E9%AE%AE%E4%BA%BA%E6%87%89%E8%A9%B2%E5%95%8F%E7%9A%84%E4%B8%83%E5%80%8B%E5%95%8F%E9%A1%8C/" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>190718:</strong>          <ol>            <li><strong>Today's job application sent amount:</strong> 104: 14. CakeResume: 9.</li>          </ol>        </li>        <li><strong>190719:</strong>          <ol>            <li><strong>台灣主要求職 [ 網站 ]-[ 資源 ]-[ 平台 ].</strong></li>            <li><strong>E-commerce.</strong></li>            <li><strong>Today's job application sent amount:</strong> 104: 55.</li>          </ol>        </li>        <li><strong>190720:</strong>          <ol>            <li><strong>Working on [ portfolio ]-{ interview version ]:</strong> The printed version, so I can bring the [ photos ]-[ papers ] on interview.</li>            <li><strong>Reading articles:</strong> About the interview ,, timing, real [ process ]-[ workflow ] of HR in background, how long you get an offer, how to reply when you get an offer, PPT and portfolio to bring to interview, misc ... .</li>          </ol>        </li>        <li><strong>190721:</strong>          <ol>            <li><strong>Outdoor and go print out [ portfolio ]-{ interview version ] images:</strong> 19 images, A4 paper size, NT$285.</li>            <li><strong>Understanding transportation system in Taipei:</strong> { 大台北公車 },{ 5284 } website.</li>          </ol>        </li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-01<a id="id190701m074558"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Exercising</div>    <div class="itm s1">{ Vue }</div>  </div>  <ol>    <li><strong>( K-pop ) Confessions Of A Former K-pop Idol (ft. Crayon Pop) | ASIAN BOSS:</strong> <a href="https://youtu.be/KdOA5BCwBi0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Kevin Powell } -  Create a responsive navigation with no JS!:</strong> <a href="https://youtu.be/8QKOaTYvYUA" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) { @click.native } - solve { router-link } interception issue:</strong> <a href="https://stackoverflow.com/questions/48644676/clicking-on-active-router-link" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) { @click } - passing argument and event at the same time to callback:</strong> <a href="https://v1.vuejs.org/guide/events.html" target="_blank" rel="noopener">Link</a> (search for <code>$event</code>). --{ Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special $event variable ... }--.</li>    <li><strong>( Javascript ) event.preventDefault() 與 event.stopPropagation() 的差異:</strong> <a href="https://dotblogs.com.tw/harry/2016/09/10/131956" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) Event Modifiers (事件修飾符):</strong> <a href="https://cythilya.github.io/2017/04/17/vue-methods-and-event-handling/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) How to set a unique html ID for each component?:</strong> <a href="https://stackoverflow.com/questions/34950867/vue-js-how-to-set-a-unique-id-for-each-component-instance" target="_blank" rel="noopener">Link</a>. // Use <code>v-bind:for="myId"</code> and <code>v-bind:id="myId"</code>.</li>    <li><strong>Google font free service:</strong> Google font free service, solves a lot of headache, since chinese font font file size is big (15 MB), google doing these things automatically in the background, and will only make download when necessary so the bandwidth it used is very small, and you just simply need to use this { @import url(...) } code to make it works. // Useage: Use it like { font-family: 'Noto Sans TC', sans-serif; }.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:25 Wake up.</strong></li>        <li><strong>06:30 Uploading blog.</strong></li>        <li><strong>06:43 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a><del>, and <code>plank</code></del>.</li>        <li><strong>07:02: Break.</strong></li>        <li><strong>07:05: Taking shower.</strong></li>        <li><strong>07:35 Designing Resume site:</strong> Wireframe. Finished.</li>        <li><strong>10:30 Cooking, start working on coding.</strong></li>        <li><strong>11:10 Eating, watching video.</strong></li>        <li><strong>11:50 Designing Resume site:</strong> Wireframe finished, start working on coding. Setting up <code>Vue</code> environment.</li>        <li><strong>13:13 Watching video.</strong></li>        <li><strong>13:33 Designing Resume site:</strong> Header finished.</li>        <li><strong>18:20 Cooking.</strong></li>        <li><strong>18:57 Eating.</strong></li>        <li><strong>20:05 Bathroom.</strong></li>        <li><strong>20:15 Testing font:</strong> Using google font free service.</li>        <li><strong>20:55 Designing Resume site.</strong></li>        <li><strong>21:37 Eating fruit, watching video, brushing teeth.</strong></li>        <li><strong>22:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-02<a id="id190702m064647"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">SVG</div>    <div class="itm s1">Html</div>  </div>  <ol>    <li><strong>( SVG ) CSS effect vs SVG effect, which is more flexible?:</strong> <a href="http://slides.com/sarasoueidan/building-better-interfaces-with-svg#/58" target="_blank" rel="noopener">Link</a>. // --{ Q: One question, do you do all those animations by coding or using any apps? I don't even know an app that generating SVG animations. }--, --{ A: (Sara Soueidan) I usually hand-code the animations. Libraries like GSAP and Snap.svg make animating SVGs much simpler and are easy to understand and learn. }--.</li>    <li><strong>Using css to make shapes:</strong> <a href="https://css-tricks.com/the-shapes-of-css/" target="_blank" rel="noopener">Link</a>. --{ “People end up making graphics with CSS [instead of SVG], because for many use cases, it offers them more flexibility. Which is absurd.”— fantasai (@fantasai) January 31, 2015 }--.</li>    <li><strong>{ SvgOmg }-{ SVGO }-[ SVG optimizer ]:</strong> Clean up, and optimize SVG with optimizer like <code>SvgOmg</code> (<a href="https://github.com/svg/svgo" target="_blank" rel="noopener">[ SVGO ]-[ github ]-[ nodejs ]</a>) or <a href="https://jakearchibald.github.io/svgomg/" target="_blank" rel="noopener">svgomg online</a>.</li>    <li><strong>( SASS ) Differences between { Mixin } and { extend }:</strong> <a href="https://dotblogs.com.tw/leo_codespace/2018/06/25/174235" target="_blank" rel="noopener">Link</a>. Not quite understand, because not sure the real use cases.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:40 Wake up.</strong></li>        <li><strong>06:47 Uploading blog.</strong></li>        <li><strong>06:53 Reading articles about SVG.</strong></li>        <li><strong>07:35 Designing Resume site:</strong> Svg component, to wrap SVG image inside.</li>        <li><strong>10:20 Cooking, keep working.</strong></li>        <li><strong>10:55 Eating.</strong></li>        <li><strong>11:40 Testing SVG optimizer.</strong></li>        <li><strong>12:40 Designing Resume site:</strong> Svg component, to wrap SVG image inside.</li>        <li><strong>14:10 Bathroom, eating apple, brushing teeth.</strong></li>        <li><strong>14:35 Learning { SASS }.</strong></li>        <li><strong>15:02 Designing Resume site:</strong> Svg component, to wrap SVG image inside.</li>        <li><strong>15:13 Take a nap.</strong></li>        <li><strong>15:40 Designing Resume site:</strong> Sticky Footer.</li>        <li><strong>17:30 Designing Resume site:</strong> Resume page ,, title, the svg image.</li>        <li><strong>19:15 Cooking.</strong></li>        <li><strong>19:47 Eating, watching video, brushing teeth.</strong></li>        <li><strong>20:50 Designing Resume site:</strong> Resume page ,, title, horizontal line, finished.</li>        <li><strong>22:20 Watching video.</strong></li>        <li><strong>22:35 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-03<a id="id190703m063139"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">{ CSS Variable }</div>    <div class="itm s1">Website "theme" by { CSS Variable }</div>    <div class="itm s1">{ HSL } color</div>    <div class="itm s1">{ Sass } ,, numbers and units</div>    <div class="itm s1">{ Sass } ,, { Interpolation }</div>  </div>  <ol>    <li><strong>( CSS ) CSS Variable - Everything you need to know about CSS Variables - { freecodecamp }:</strong> <a href="https://www.freecodecamp.org/news/everything-you-need-to-know-about-css-variables-c74d922ea855/" target="_blank" rel="noopener">Link</a>. See the section <u>Be Careful While Building Single Tokens</u>, I have this question comes out before, so <strong>you can't use</strong> <code>--myVar: 100;</code>, then <code>margin: var(--myVar)px;</code>, you have to always use <code>--myVar: 100;</code> then <code>margin: calc(var(--myVar) * 1px);</code>. // Also see the section <u>JavaScript</u>, Simply put, <strong>you can access CSS variables — both get and set — from JavaScript</strong>.</li>    <li><strong>( CSS ) How CSS Variable could play important rule in website Themes:</strong> <a href="https://medium.com/dev-channel/css-variables-no-really-76f8c91bd34e" target="_blank" rel="noopener">Link</a>. See the section <u>Themes</u>, he collect all variable part intended together into the <code>:root{ ... }</code>, so if he want a new "theme", he can change the site looking in no time.</li>    <li><strong>( CSS ) CSS Variable and HSL color:</strong> <a href="How do I apply opacity to a CSS color variable?">Link</a>. The more interesting thing is not HSL part, but CSS Variable part. See those answers below, they are helpful. // --{ If a property contains one or more var() functions, and those functions are syntactically valid, the entire property’s grammar must be assumed to be valid at parse time. It is only syntax-checked at computed-value time, after var() functions have been substituted. }--.</li>    <li><strong>{ Sass } ,, numbers and units</strong> <a href="https://sass-lang.com/documentation/values/numbers#units" target="_blank" rel="noopener">Link</a>. // --{ It’s almost always a bad idea to use interpolation with numbers. Interpolation returns unquoted strings that can’t be used for any further math, and it avoids Sass’s built-in safeguards to ensure that units are used correctly. }--, --{ Sass has powerful <strong>unit arithmetic</strong> that you can use instead. For example, instead of writing #{$width}px, write $width * 1px — or better yet, declare the $width variable in terms of px to begin with. }--. // --{ You can <strong>convert between decimals and percentages</strong> using unit arithmetic. $percentage / 100% will return the corresponding decimal, and $decimal * 100% will return the corresponding percentage. }--.</li>    <li><strong>{ Sass } ,, { Interpolation }:</strong> <a href="https://sass-lang.com/documentation/interpolation" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Color theory ) 色彩空間中的 HSL、HSV、HSB 有什麼區別？:</strong> <a href="https://www.zhihu.com/question/22077462" target="_blank" rel="noopener">Link</a>. Conclusion: Currently don't think about <code>HSV</code>(= <code>HSB</code>), since HTML and CSS use <code>HSL</code> exclusive (it seems). The concept of <code>HSV</code>(= <code>HSB</code>) is that, it is abstraction and simplified version of <code>HSL</code>, thus some people might think it is "more intuitive", but at the same time, it don't reflect the real world of color, HSL does reflect the real world of color, if you turn a color really bright, it shoud have little <strong>satuation</strong>, this is reasonable and understandable.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:25 Wake up.</strong></li>        <li><strong>06:32 Uploading blog.</strong></li>        <li><strong>06:42 Misc.</strong></li>        <li><strong>06:45 Designing Resume site:</strong> Resume page ,, fixing issus, refactoring.</li>        <li><strong>07:08 Designing Resume site:</strong> Resume page ,, section heading visual design redesign.</li>        <li><strong>08:10 Designing Resume site:</strong> Resume page ,, section heading SVG component.</li>        <li><strong>11:10 Grocery.</strong></li>        <li><strong>11:37 Cooking, understand HSV vs HSL:</strong> I'm planning to restructure my color system, to support each value of HSL too along with HEX value, so I can tune the "S" part and "L" part for individual use case.</li>        <li><strong>12:25 Eating, watching video.</strong></li>        <li><strong>13:00 Take a nap.</strong></li>        <li><strong>13:25 Testing HSL color with Css Variables.</strong></li>        <li><strong>15:00 Eating fruit.</strong></li>        <li><strong>15:10 Keep learning Css Variables:</strong> Theming with Css Varialbe.</li>        <li><strong>15:30 Testing { Sass } { Interpolation }.</strong></li>        <li><strong>16:00 Designing Resume site:</strong> Resume page ,, section heading SVG component. Using HSL color.</li>        <li><strong>19:20 Cooking.</strong></li>        <li><strong>19:40 Eating, watching video.</strong></li>        <li><strong>20:40 Testing { vue } ,, { slot }.</strong></li>        <li><strong>21:50 Eating apple, brushing teeth, watching video.</strong></li>        <li><strong>22:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-04<a id="id190704m064854"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">{ RWD }</div>    <div class="itm s1">Exercising</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>06:45 Wake up.</strong></li>        <li><strong>06:50 Uploading blog.</strong></li>        <li><strong>07:00 Bathroom.</strong></li>        <li><strong>07:11 Testing 2 layer of slot instead just one:</strong> Testing if I can nested slots. So the test works, I can have 3 component - parent, a componentWithSlot1, a componentWithSlot2, then in the parent component I can put (inserting into slot) my final data inside componentWithSlot2 inside componentWithSlot1 inside parent. So the data will be rendered first (I guess), then componentWithSlot1, then componentWithSlot2, then parent.</li>        <li><strong>07:50 Designing Resume site:</strong> Resume page ,, section content, using nested (2 layer) { Vue }-{ slot} to try best to reduce the duplication of code.</li>        <li><strong>09:00 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a>.</li>        <li><strong>09:20 Taking a break.</strong></li>        <li><strong>09:23 Taking a shower.</strong></li>        <li><strong>09:55 Cooking, keep working on Resume site.</strong></li>        <li><strong>10:40 Eating, watching video.</strong></li>        <li><strong>11:15 Designing Resume site:</strong> Resume page ,, section content.</li>        <li><strong>12:15 Brushing teeth.</strong></li>        <li><strong>12:22 Designing Resume site.</strong></li>        <li><strong>12:42 Take a nap.</strong></li>        <li><strong>13:05 Designing Resume site:</strong> Finished layout.</li>        <li><strong>15:17 Eating apple, brushing teeth.</strong></li>        <li><strong>15:30 Designing Resume site:</strong> Now I start to filling the information and the svg thumbnail image. Mainly completed, the RWD structure is working good, and the info is mainly completed.</li>        <li><strong>19:40 Cooking.</strong></li>        <li><strong>20:12 Eating, watching video.</strong></li>        <li><strong>21:10 Thinking about the RWD thing:</strong> After the experience of the first page (Resume page), now I know when page shrink to the mobile screen, it can be tricky since the structure can changes dramastically sometimes. So I better rethink carefully before dive into the second page (Portfolio page).</li>        <li><strong>21:45 Watching video.</strong></li>        <li><strong>21:20 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-05<a id="id190705m063721"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s2">{ Vue Loader }</div>    <div class="itm s1">{ Vue } ,, assets path</div>    <div class="itm s2">{ Vue } ,, { CSS Modules }</div>  </div>  <ol>    <li><strong>( Vue ) { Vue Loader }:</strong> <a href="https://vue-loader.vuejs.org/#what-is-vue-loader" target="_blank" rel="noopener">Link</a>. Also see <a href="https://vue-loader.vuejs.org/spec.html#intro" target="_blank" rel="noopener">Single-File Component (SFC)</a>.</li>    <li><strong>( Vue ) Asset URL Handling:</strong> <a href="https://vue-loader.vuejs.org/guide/asset-url.html#transform-rules" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) vue background-image use assets path?:</strong> <a href="https://github.com/vuejs/vue-loader/issues/481" target="_blank" rel="noopener">Link</a>, <a href="https://wongyuye.github.io/2017/06/07/vue-%E6%89%93%E5%8C%85%E8%83%8C%E6%99%AF%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">link2</a>, <a href="https://www.jianshu.com/p/5e81814f8d8c" target="_blank" rel="noopener">在Vue中使用sass及sass圖片路徑問題</a> . <strong>Finally found the solution by using that <code>require()</code> thing!!</strong> Since using <code>require(...)</code> might related to Webpack stuff, you load the path as "module way", and the system (webpack?) behind get the real path automatically for you. So now you can set style ,, <code>background-image: url(...)</code> like this - <code>'background-image': "url('" + require("@/assets/logo.png") + "')"</code> or <code>'background-image': "url('" + require("../assets/logo.png") + "')"</code>.</li>    <li><strong>( Vue ) Binding Inline Styles - Object Syntax:</strong> <a href="https://vuejs.org/v2/guide/class-and-style.html#Binding-Inline-Styles" target="_blank" rel="noopener">Link</a>. I forget this again, reviewing. So what you could put inside v-bind:style="..." is <strong>an object!</strong>.</li>    <li><strong>{ Vue } ,, { CSS Modules }:</strong> <a href="https://www.netguru.com/codestories/vue.js-scoped-styles-vs-css-modules" target="_blank" rel="noopener">Link</a> <a href="https://vue-loader.vuejs.org/guide/css-modules.html#usage" target="_blank" rel="noopener">Doc</a>. --{ Every new Vue.js application created by vue-cli comes with two great built-in solutions: Scoped CSS and CSS Modules. Both of them have some pros and cons. }--. // --{ ... Moreover, because all classes are available through the <code>$style</code> object we can now pass them however deep we want using props, making it super easy to use a class in any place of the child component ... }--.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:32 Wake up.</strong></li>        <li><strong>06:38 Uploading blog.</strong></li>        <li><strong>06:50 Designing Resume site:</strong> Portfolio page. Planning th e structure.</li>        <li><strong>10:30 Cooking.</strong></li>        <li><strong>11:05 Eating, watching video.</strong></li>        <li><strong>12:30 Take a nap.</strong></li>        <li><strong>13:00 Designing Resume site:</strong> Portfolio page. Working on first section's structure, structure is half finish, but still have long way to go.</li>        <li><strong>16:15 Grocery, eating fruit, Misc.</strong></li>        <li><strong>16:55 Learning { Vue Loader }.</strong></li>        <li><strong>17:43 Searching { vue } ,, css background-image ,, how to set it to correct assets path, problem:</strong> Problem solved, keep working.</li>        <li><strong>19:35 Cooking, keep working:</strong> Writing data logic so the data is seperate from template.</li>        <li><strong>20:10 Eating, watching video.</strong></li>        <li><strong>21:25 Misc.</strong></li>        <li><strong>22:40 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-06<a id="id190706m065522"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>06:50 Wake up.</strong></li>        <li><strong>06:55 Uploading blog.</strong></li>        <li><strong>07:05 Bathroom.</strong></li>        <li><strong>07:15 Designing Resume site:</strong> Portfolio page. Dealing with background-image, background-position and background-size.</li>        <li><strong>08:57 Cooking, keep working.</strong></li>        <li><strong>09:45 Eating, watching video.</strong></li>        <li><strong>10:20 Designing Resume site:</strong> Working on RWD for mobile screen issue.</li>        <li><strong>13:30 Eating apple, watching video.</strong></li>        <li><strong>14:00 Designing Resume site:</strong> Working on RWD for mobile screen issue</li>        <li><strong>16:10 Take a nap.</strong></li>        <li><strong>16:35 Designing Resume site:</strong> Portfolio page. First section's data logic so the data is seperate from template.</li>        <li><strong>19:50 Cooking, keep working.</strong></li>        <li><strong>20:25 Eating, watching video.</strong></li>        <li><strong>22:10 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-07<a id="id190707m062154"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Battery</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>06:15 Wake up.</strong></li>        <li><strong>06:22 Uploading blog.</strong></li>        <li><strong>06:30 Bathroom.</strong></li>        <li><strong>06:43 Sending message to mom, misc.</strong></li>        <li><strong>07:30 Designing Resume site:</strong> Modal and data logic.</li>        <li><strong>08:35 Cooking.</strong></li>        <li><strong>09:15 Eating, watching video.</strong></li>        <li><strong>09:40 Found my phone battery inflate because of constantly charging:</strong> I always keep it plug in to usb to charge it, and I just curious why my phone is not flat at back side. When I open the back cover, it suprised me that the battery is inflate like crazy. And I found that it says "keeping it long time charging will risk to have explosion hazard" OMG, I don't know this.</li>        <li><strong>09:50 Designing Resume site:</strong> Modal ,, styling.</li>        <li><strong>12:37 Eating apple, watching video, brushing teeth.</strong></li>        <li><strong>12:57 Designing Resume site:</strong> Modal ,, styling.</li>        <li><strong>14:33 Take a nap.</strong></li>        <li><strong>15:00 Designing Resume site:</strong> Modal ,, data logic.</li>        <li><strong>19:25 Cooking, keep working.</strong></li>        <li><strong>20:05 Eating, watching viceo.</strong></li>        <li><strong>21:30 Taking shower.</strong></li>        <li><strong>22:05 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-08<a id="id190708m062218"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s2">{ Sass }</div>  </div>  <ol>    <li><strong>( Color theory ) Adobe color wheel:</strong> <a href="https://color.adobe.com/create" target="_blank" rel="noopener">Link</a>. Analogous, Monochromatic, complementary, Compound ... .</li>    <li><strong>{ Sass } ,, HSL function:</strong> <a href="https://wcc723.github.io/sass/2013/08/26/sass-hsl-funtion/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Sass } ,, { @mixin } ,, { @content }:</strong> <a href="https://ithelp.ithome.com.tw/articles/10156850" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Sass ) This is the real value of using Sass - reduce the [ repetitive ]-[ duplicate ] [ code ]-[ workflow ]:</strong> <a href="https://ithelp.ithome.com.tw/articles/10136641" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Sass } ,, Using multiple conditions (AND, OR, NOT) in { if } statement:</strong> <a href="https://stackoverflow.com/questions/17225229/using-multiple-conditions-and-in-sass-if-statement" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Sass } ,, powerful of { @function } - keep concatenating onto same variable:</strong> <a href="https://stackoverflow.com/questions/31239831/function-v-s-mixin-in-sass-lang-which-one-to-use" target="_blank" rel="noopener">Link</a>, see first answer, so you can concatenate like <code>$val: #{$val}, #{$i}px #{$i}px #{$color};</code>.</li>    <li><strong>{ Sass } ,, when is the use case of { @extend }? And why using { placeholder selectors } (%):</strong> <a href="https://www.sitepoint.com/sass-features-may-never-tried/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:10 Wake up, misc.</strong></li>        <li><strong>06:23 Uploading blog.</strong></li>        <li><strong>06:30 Misc.</strong></li>        <li><strong>06:36 Designing Resume site:</strong> Modal ,, style.</li>        <li><strong>08:10 Understanding and testing { line-height } and { vertical-align }.</strong></li>        <li><strong>09:22 Designing Resume site:</strong> Modal ,, style.</li>        <li><strong>09:50 Designing Resume site:</strong> Modal ,, data logic. Finished.</li>        <li><strong>11:00 Testing Jquery and { vue }-{ refs }:</strong> And apply scroll effect onto Resume site.</li>        <li><strong>12:20 Grocery, cooking.</strong></li>        <li><strong>13:20 Eating, watching video.</strong></li>        <li><strong>14:40 Take a nap.</strong></li>        <li><strong>15:05 Designing Resume site:</strong> Portfolio page, second section ,, designing svg shape.</li>        <li><strong>17:30 Designing Resume site:</strong> Portfolio page, second section ,, making button onclick then jump to external link.</li>        <li><strong>18:30 Misc.</strong></li>        <li><strong>18:40 Designing Resume site:</strong> Portfolio page, misc visual tweaks, testing <code>Sass</code>.</li>        <li><strong>20:35 Cooking.</strong></li>        <li><strong>21:10 Eating, learning { Sass }.</strong></li>        <li><strong>21:37 Brushing teeth.</strong></li>        <li><strong>21:46 Learning { Sass }.</strong></li>        <li><strong>22:57 Misc.</strong></li>        <li><strong>23:55 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-09<a id="id190709m081302"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Stoicism }</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s2">{ Webpack } ,, { resolve alias }</div>    <div class="itm s1">{ Webpack }</div>    <div class="itm s1">{ Vue }</div>  </div>  <ol>    <li><strong>( Stoicism ) { TedTalks } - "Everything happens for a reason"? It's a lie - Cancer Phase IV - Kate Bowler:</strong> <a href="https://youtu.be/DTcJmIbn5nw" target="_blank" rel="noopener">Link</a>. You dont't control, most things is out of your control. Only thing you can control is virture. Always try to hold the optimism in the pessimism.</li>    <li><strong>( Vue ) ( Webpack ) How to config Webpack in a Vue project?:</strong> <a href="https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">Link</a>. <a href="https://cli.vuejs.org/zh/config/#configurewebpack" target="_blank" rel="noopener">configureWebpack</a> is one of the options of <code>vue.config.js</code> config file, so we use <code>configureWebpack</code> to do all the config of Webpack, instead of configuring "lower level" Webpack config file directly.</li>    <li><strong>( Webpack ) { resolve.alias } - how does "@/..." works and be config?:</strong> <a href="https://stackoverflow.com/questions/42749973/es6-import-using-at-sign-in-path-in-a-vue-js-project-using-webpack" target="_blank" rel="noopener">Link1</a>, <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">link2</a>. // <a href="https://blog.csdn.net/panchang199266/article/details/90145638" target="_blank" rel="noopener">vue-cli3 設定 webpack resolve alias</a> (簡單易懂，<strong>試過了的確可以正常運作</strong>)，照做，把 <code>vue.config.js</code> 裡面增加一個 webpack 專用的 option (object): <code>chainWebpack: (config) =&gt; { config.resolve.alias .set('@', resolve('src')) .set('@myThinggg',resolve('src/assets/any/custom/path/you/want')); }</code>，然後你就可以在 Vue component 裡面使用 <code>&lt;img src="@myThinggg/thatTargetImageFile.jpg"&gt;</code> (<strong>注意是 "@"</strong>)， 以及 <code>background-image: url("~@myThinggg/thatTargetImageFile.jpg");</code> (<strong>注意是 "~@"</strong>)。關於那個 "~" symbol，好像是在 sass 裡面都要這樣寫，包括引用其它 sass file。但奇怪，我之前都沒有加這個還是可以用，不知道為什麼。</li>    <li><strong>( Vue ) ( Vue-cli ) { vue inspect &gt; config.js }:</strong> <a href="https://forum.vuejs.org/t/how-to-configure-vue-cli-3-to-leverage-webpack-root-folder-aliases/40943/10" target="_blank" rel="noopener">Found from here</a>, you can found a bunch of webpack config (including resolve alias settings) used by current vue project.</li>    <li><strong>{ Vue } ,, when to put image in { assets } or { static} directory? - What does it related to webpack?:</strong> <a href="https://vuejs-templates.github.io/webpack/static.html" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) Dealing with assets path problem again - sass - { resolve alias }:</strong>      <ol>        <li><strong>The "~@" alias:</strong> Related to <code>&lt;style lang="sass"&gt;</code> block, not <code>template</code> or <code>script</code> block. // For the backgroud-image url path, I found I can't use <code>url('@/assets/myImg.png')</code> or <code>url('~/assets/myImg.png')</code>, but using <code>url('~@/assets/myImg.png')</code> works, I don't know why, found at <a href="https://stackoverflow.com/questions/51621458/for-handling-assets-in-vue-js-not-working/52321720" target="_blank" rel="noopener">here</a> and <a href="https://stackoverflow.com/questions/42749973/es6-import-using-at-sign-in-path-in-a-vue-js-project-using-webpack" target="_blank" rel="noopener">here</a> ,, answer of Estus Flask ,, comment of Consta Gorgan (--{ When using vue-cli v3+ you should use ~@ to reference src folder. E.g.: $font-path: '~@/assets/fonts/'; }--). // And <a href="https://blog.csdn.net/weixin_43343144/article/details/88668787" target="_blank" rel="noopener">here</a> says --{ 特別注意：如果在scss中使用@別名則需要加 "~" 號，比如在src目錄下有一個var.scss文件，其他文件引用時則需寫成 <code>@import "~@/var.scss";</code>，（scss中加了 "~@" 就不會報錯了）}--, and <a href="https://blog.csdn.net/weixin_28717693/article/details/83240164" target="_blank" rel="noopener">here</a> also says --{ 在css中使用要加上一個 **~** }--.</li>        <li><strong>About { webpack },{ file-loader },{ url-loader }:</strong> I search a lot regarding this "path can't resolved issue", and though I still don't know the correct practice (though using <code>~@/...</code> works), I think the direction is toward { webpack },{ file-loader },{ url-loader }, especially <code>webpack</code>, people mentioned it a lot regarding to solve this problem. This might be nothing to do with <code>Vue</code>, or <code>Sass</code> it self, since I fonud <a href="https://ithelp.ithome.com.tw/articles/10207330" target="_blank" rel="noopener">this Nuxt article</a> ,, section <u>Nuxt 如何編譯靜態資源？</u>, it mentioned: --{ 放在 assets 資料夾下的檔案，引用前先經過 Webpack 編譯 更精確點講「透過 vue-loader 以及副檔名對應的 loader」編譯 ; Vue File 經 vue-loader 拆出 &lt;template&gt;、&lt;script&gt;、&lt;style&gt;，交由對應 loader 進一步處理 ; 樣式經過 css-loader ; 照片、其他檔案經過 file-loader、url-loader 處理。 }-- </li>      </ol>     </li>    <li><strong>By time:</strong>      <ol>        <li><strong>08:05 Wake up.</strong></li>        <li><strong>08:14 Bathroom.</strong></li>        <li><strong>08:30 Uploading blog.</strong></li>        <li><strong>08:40 Designing Resume site:</strong> A bit refactoring css, using <code>Sass</code> <code>@mixin</code> to condense <code>linear-gradient</code> code.</li>        <li><strong>09:10 Designing Resume site:</strong> About me page.</li>        <li><strong>09:23 Dealing with assets path problem - { resolve alias }:</strong> Though spending much time on learning webpack stuff, but this is still a "must do" investment, if I don't lean it, this problem will just come back again and again in the future.</li>        <li><strong>12:12 Cooking, keep working.</strong></li>        <li><strong>13:00 Eating.</strong></li>        <li><strong>14:16 Taking a nap.</strong></li>        <li><strong>14:41 Reading article (story) about jobs.</strong></li>        <li><strong>15:15 Designing Resume site:</strong> About me page.</li>        <li><strong>15:48 Designing Resume site:</strong> Start to filling real [ data ]-[ information ]. Spent some time thinking about the content. Taking screenshots of 3 projects.</li>        <li><strong>20:30 Cooking, working.</strong></li>        <li><strong>21:40 Eating, watching video.</strong></li>        <li><strong>23:05 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-10<a id="id190710m072309"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Deploy</div>    <div class="itm s1">Graphic design</div>    <div class="itm s1">RWD</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">{ LibreOffice Writer }</div>  </div>  <ol>    <li><strong>( Webdev ) ( Graphic design ) ( RWD ) www.siteinspire.com - web design inspiration:</strong> <a href="https://www.siteinspire.com/" target="_blank" rel="noopener">Link</a> (found from <a href="https://www.webascender.com/blog/10-places-to-look-for-website-design-inspiration/" target="_blank" rel="noopener">10 Places to Look for Website Design Inspiration</a>). This site gave me so much good inspiration, and <strong>[ complex ],[ mature ]</strong> responsive web design stuff. Is really a quality <strong>mine</strong>. // Some site using [ good ]-[ unique ] graphic design, while still keeping the complex RWD working great.</li>    <li><strong>( Graphic design ) ( Twice ) Unboxing Twice { TWICEcoaster: Lane 2 } album:</strong> <a href="https://youtu.be/-iDjTO2cvCk" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Twice } - { FANCY } - black man cover:</strong> <a href="https://youtu.be/8UKW2sgW658" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>LibreOffice Writer - (52) - Introduction to Tables:</strong> <a href="https://youtu.be/D8AIbcn92gk?list=PL94682FC0D2ADF410" target="_blank" rel="noopener">Link</a>. Informative series. // Use <code>frame</code> to make nested table, and set <strong>both</strong> frame and table using relative units, so frame can fits 100% width/height of it's perent, and table can fit 100% width of frame.</li>    <li><strong>( Git ) Redirects on GitHub Pages:</strong> <a href="https://help.github.com/en/articles/redirects-on-github-pages" target="_blank" rel="noopener">Link</a>. --{ For the security of our users, GitHub Pages does not support customer server configuration files such as .htaccess or .conf }--. Yeah, so <code>vue-router</code> will fail if user enter the deep url themselves, but if user don't enter the deep url themselves, <code>vue-router</code> will works properly.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:20 Wake up.</strong></li>        <li><strong>07:25 Uploading blog.</strong></li>        <li><strong>07:35 Studying from some real RWD site as inspiration:</strong> [ Learning ],[ seeing ] [ real ],[ complex ],[ mature ] RWD site from www.siteinspire.com.</li>        <li><strong>08:50 Bathroom.</strong></li>        <li><strong>09:02 Dealing with favicon:</strong> Cache problem. <code>.ico</code> vs <code>.png</code>.</li>        <li><strong>09:35 Portfolio and Resume:</strong> Git push and deploy. // Dealing with Route problem. Github ,, gh-pages, don't work with <code>vue-router</code>. I have to make some [ bad-smells ]-[ ugly ] workaround.</li>        <li><strong>12:35 Grocery.</strong></li>        <li><strong>12:55 Cooking, learning Libre office.</strong></li>        <li><strong>13:43 Eating, watching video.</strong></li>        <li><strong>14:50 Taking nap.</strong></li>        <li><strong>15:15 Watching video.</strong></li>        <li><strong>15:45 Learning and testing Libre office.</strong></li>        <li><strong>17:20 Portfolio and Resume:</strong> Doing Resume PDF version. Finished.</li>        <li><strong>20:30 Cooking, reading article about vue:</strong>  How to make Vue let user download a pdf file by a link (static assets)?</li>        <li><strong>21:12 Eating, watching video:</strong> Mostly about Twice.</li>        <li><strong>23:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-11<a id="id190711m074152"></a></h2>  <div class="kwCloud">    <div class="itm s2">Vegan ,, diet</div>    <div class="itm s1">[ Vegan diet ]-[ 多樣，少量，頻繁 ]</div>    <div class="itm s2">Nutritional Supplement</div>    <div class="itm s1">{ Npm } update</div>  </div>  <ol>    <li><strong>( Vegan ) 台灣素食營養學會:</strong> <a href="https://www.twvns.org/" target="_blank" rel="noopener">Link</a>. --{ 國內少數由醫學角度探討素食的非營利團體。集結各大醫院、大學...等多位有志推廣素食的醫療人員、專家學者，透過講座、食譜、文章，教育民眾正確的素食營養知識。 }--. // <a href="https://www.twvns.org/info/faq" target="_blank" rel="noopener">常見問題 (的所有文章)</a>。</li>    <li><strong>( Vegan ) Ultimate strategy for Vegan diet is still:</strong> This single [ rule ]-[ good practice ] emerges more and more stronger, after I gathered so much information from different time, different types, different sources, that is - <strong>多樣，少量，頻繁</strong>。</li>    <li><strong>( Vegan ) 為何不能只依賴 "營養補充品"?:</strong> <code>台灣素食營養協會</code>: --{ 或許有人會疑惑，那麼好的維生素,從食物取得太麻煩,為何不吃大量的 營養補充品攝取?  這是因為光是維他命 E 就有 alpha、beta、gamma、delta 各種形態,市售 補充劑、營養品卻只提供 alpha 維他命E,大量地補充市售維他命 E,反而 會有致癌的風險。這也是為什麼食物才是取得維他命的最佳方法!  .避免服用銅，鐵 營養補品: 雖然我們需要微量的鐵來運輸氧氣到腦部,銅在許多酵素反應中也占了重 要的地位,但是過多的鐵與銅,就像長期暴露在空氣中的金屬一樣會生鏽, 這就是氧化反應。研究員發現失智老鼠的腦裡含有較高的銅與鐵。預防攝取 過多銅與鐵的方式,就是注意看補充劑的標示,避免購買與食用含有銅與鐵 的營養補充劑。 }--.</li>    <li><strong>( Vegan ) 藻類為不可靠的 B12 來源，目前唯一只能靠 "營養補充品":</strong> <a href="https://www.twvns.org/info/faq/129-b127" target="_blank" rel="noopener">Link</a>. <code>台灣素食營養協會</code>: --{ 可是在衛生署公布的《素食飲食指標手冊》第六頁，針對素食者補充維生素B12建議：「依據國人膳食營養素參考攝取量建議，維生素B12每日攝取量為2.4微克。建議可藉由藻類（如：海帶、紫菜）增加維生素B12的來源 }--, --{ <strong>至今除了台灣，沒有任何一個國家</strong>的學界或官方版敢如此建議素食者依靠藻類來攝取維生素B12！ }--. 不錯，敢質疑，只追求真相。// --{ 真正可靠的維生素B12 – 純素者請攝取B12補充劑或添加劑! 現在許多早餐穀類和飲品都有添加維生素B12 ...}-- // --{  補充劑的需求量其實很少，但重點是要<strong>少量多次</strong>，因為如果一次整顆吃下去，吸收率不高。 }-- (<strong>少量，多樣，頻繁</strong>).</li>    <li><strong>( Vegan ) 營養與失智症預防:</strong> <a href="https://www.twvns.org/info/faq/230-2015-04-17-09-37-57" target="_blank" rel="noopener">Link</a> (Below link for PDF file). // --{ 堅果類才是王道 }--, --{ 魚油或是 DHA 補充劑所帶來的效果是有限的 ... 建議每天從 堅果類攝取 omega-3,來提升好的膽固醇 (HDL) 預防高血脂與肥胖,也能供 給身體維他命 E,預防失智症。 每天吃一把堅果或是喝一杯堅果漿,就能滿足一天的需求。}--. // --{ 雖然我們需要微量的鐵來運輸氧氣到腦部,銅在許多酵素反應中也占了重 要的地位,但是過多的鐵與銅,就像長期暴露在空氣中的金屬一樣會生鏽, 這就是氧化反應。 }--. // --{ 抗失智黃金組合 - "葉酸、維他命 B6 與 B12" ... 含有豐富葉酸的植物包括米豆、扁豆、綠豆、雪蓮子豆與花豆。含有豐富維他命 B6 的食物是葵瓜子、芝麻、開心果、酪梨與香蕉。}--.</li>    <li><strong>( Vegan ) Omega-6 與 Omega-3 的比例要平衡，並不是完全不吃Omega-6喔！:</strong> <a href="https://www.twvns.org/info/faq/302-omega-3-omega-6" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vegan ) 如何避免缺鐵?:</strong> <a href="https://www.twvns.org/info/faq/17-2008-07-31-10-09-38" target="_blank" rel="noopener">Link</a>. --{ 為什麼有些女性，臉色蒼白，時常頭暈，精神不佳，容易疲倦? 答案可能是缺乏鐵質! 人體紅血球中的血紅素，負責攜帶氧氣到全身各個細胞 ... }--. // --{ 飲食中包含高鐵食物來源如: 紅莧菜、紫菜、莧菜、紅鳳菜、川七，花生、皇帝豆、花生、芝麻、南瓜子、紅豆等。 }--.</li>    <li><strong>( Diet ) 葉黃素可以從哪些天然食物取得？:</strong> <a href="https://youtu.be/HgKz-0ocpoM?t=680" target="_blank" rel="noopener">Link</a>. <a href="https://www.msn.com/zh-tw/health/topic/%E6%89%93%E7%A0%B4%E8%91%89%E9%BB%83%E7%B4%A0%E4%B9%8B%E4%BA%82%EF%BC%81%E7%87%9F%E9%A4%8A%E5%B8%AB%E4%B8%80%E5%A4%A9%E5%90%83%E4%B8%80%E7%A2%9F%E8%8F%A0%E8%8F%9C%E3%80%81%E4%B8%80%E9%A1%86%E8%9B%8B%E9%BB%83%E5%B0%B1%E5%A4%A0%E4%BA%86/ar-BBVYmCT" target="_blank" rel="noopener">一天吃一碟菠菜，可以補充 葉黃素</a> (菠菜的根部是紅色的)。// <a href="https://www.gnc.com.tw/30-60.html" target="_blank" rel="noopener">"全球最大保健騙子" (<a href="https://youtu.be/HgKz-0ocpoM?t=891" target="_blank" rel="noopener">葉黃素</a>)</a>。 底下留言大概是自己洗的: --{  商品感受 2019-04-18 15:02:11 會員 陳** (2019/6/28) 舆过去其他家同樣《葉黄素》使用後相較，確實令人眼神散發有神、光亮、工作行動更加有活力。 }--，世界上就是有這種騙子，成功都是靠廣告和行銷出來的，而不是建立在有價值的東西上。</li>    <li><strong>( Diet ) 奇異果的營養價值:</strong> <a href="http://www.epochtimes.com/b5/18/4/30/n10350738.htm" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Npm } ,, update - All about update - update the major version problem:</strong> <a href="https://stackoverflow.com/questions/16073603/how-do-i-update-each-dependency-in-package-json-to-the-latest-version" target="_blank" rel="noopener">Link1</a>, <a href="https://flaviocopes.com/update-npm-dependencies/" target="_blank" rel="noopener">link2</a>, <a href="https://www.hostingadvice.com/how-to/update-npm-packages/" target="_blank" rel="noopener">link3</a> (is detailed). // Conclusion - npm in default will respect package.json's <code>semver</code> (semantic versioning, i.e. <code>major</code>, <code>minor</code>, <code>patch</code>). If dependencies inside package.json written like this - <code>"fooPkg": "^3.1.2"</code>, then it will never be update by <strong><code>npm</code></strong> to <code>4.x.x</code>. // If you want to force it to update the major version, you can <strong>npm install -g npm-check-updates</strong> first, then use <code>ncu -u</code> command to <strong>update the package.json list first so those dependencies will have major version leap</strong> (but <code>ncu</code> don't care about the real package inside <code>node_modules</code>), then use <code>npm install</code> to update the real package inside <code>node_modules</code>. // Notice, <code>npm</code> and <code>ncu</code> works separately, so <code>npm</code> will [ still ]-[ always ] follow the package.json rules and won't update the major version (if dependencies prefix with <code>^</code>) in any time.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:35 Wake up.</strong></li>        <li><strong>07:42 Uploading blog.</strong></li>        <li><strong>07:55 Update npm project, leaning { ncu } (npm-check-updates).</strong></li>        <li><strong>09:05 Watching video.</strong></li>        <li><strong>09:11 Searching about battery vendor.</strong></li>        <li><strong>09:55 Misc, searching information about Vegan diet and Nutritional Supplement:</strong> The time spending totolly worth it! Take care of health is more important and have higher priority than finishing resume first.</li>        <li><strong>12:45 Grocery:</strong> 綜合堅果，五穀麥片，小麥胚芽。原來全聯也有賣 B 群 (含 B12, B6) 跟 DHA。</li>        <li><strong>13:20 Cooking, searching.</strong></li>        <li><strong>13:54 Eating, watching video.</strong></li>        <li><strong>15:05 Taking shower, misc.</strong></li>        <li><strong>15:55 Outdoor:</strong> Buying Nutritional Supplement including Vitamin B complex (維生素 B 群), Iron, DHA, 葉黃素 (totally around NT$850). Buying phone battery (old one is inflated due to constantly in charging) (NT$700). Having haircut (NT$100).</li>        <li><strong>20:17 Back, cooking.</strong></li>        <li><strong>20:55 Eating, reading news.</strong></li>        <li><strong>22:52 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-12<a id="id190712m070258"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s2">Job application</div>    <div class="itm s1">{ 104 }</div>    <div class="itm s1">{ 1111 }</div>    <div class="itm s1">{ github }-{ f2etw/jobs }</div>    <div class="itm s1">{ Linkin }</div>    <div class="itm s1">{ cakeresume }</div>    <div class="itm s2">[ Honest ]-[ truth ]-[ fact ]</div>    <div class="itm s1">{ Twice }</div>  </div>  <ol>    <li><strong>( Music ) Twice - You in my heart / Having you:</strong> <a href="https://youtu.be/3QsJvGB3_UU" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Twice - Look at me:</strong> <a href="https://youtu.be/Yjyn6Ily6hM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Twice - Girls like us:</strong> <a href="https://youtu.be/6Sucn2GNppw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Twice - Wake me up:</strong> <a href="https://youtu.be/DdLYSziSXII" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Untrusty - 碧波庭國際有限公司 - [ 按摩器 ]-[ 玻璃杯 ]-[ 真空 ]:</strong>      <ol>        <li><strong>About:</strong> Found from <a href="https://www.104.com.tw/company/18o7ugz4?jobsource=jolist_c_relevance" target="_blank" rel="noopener">104 人力銀行</a>. After [ carefully ]-[ seriously ] doing some research, I agree the "預防乳癌" part, but I don't agree with others (many points). So I think they are not trusty, though my skill sets fits most of their required - <a href="https://www.104.com.tw/job/6nlzl?jobsource=jolist_c_relevance" target="_blank" rel="noopener">前端工程師 / 全端工程師 javascript</a> - --{ 1. 熟悉 vue.js 2. bootstrap / jquery 3. git version control 4. 會用 nodejs webpack npm 5. 應徵全端 須有 nodjs 後端 framekwork 經驗 如 express 6. 初級/中階 工程師 需求 7. 有 github 的作品 優先考慮 }--, and also I have Industrial Design background. // Though I don't have strong evidence to prove them wrong, thus I will not say they are exaggerate the benifits products offers, but we have to be extra careful when it comes to something like <a href="https://en.wikipedia.org/wiki/Theranos#Technology_and_products" target="_blank" rel="noopener">{ Theranos }-{ Elizabeth Holmes }</a> ,, the <a href="https://www.google.com/search?tbs=imgo%3A1&tbm=isch&sa=1&ei=p0AoXcubAaSwmAXv54OYCg&q=Theranos+Edison&oq=Theranos+Edison&gs_l=img.3..0j0i30l9.7057.7211..7356...0.0..0.38.74.2......0....2j1..gws-wiz-img.......0i7i30.pc2ZbplBosg" target="_blank" rel="noopener">Edison</a> machine.</li>        <li><strong>Website:</strong> <a href="https://biboting.com.tw/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>碧波庭顧客問答影片 Q&A - 市場部經理:</strong> <a href="https://youtu.be/qq13bxTHqWY" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ pansci } - { 泛科學 } - 破解豐胸迷思：豐胸霜按摩加青木瓜可以從 A 到 D 嗎?:</strong> <a href="https://pansci.asia/archives/106676" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>負離子真的有什麼好處嗎？:</strong> <a href="https://youtu.be/STnUwtpshYw" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:00 Wake up.</strong></li>        <li><strong>07:03 Uploading blog.</strong></li>        <li><strong>07:25 Bathroom.</strong></li>        <li><strong>07:35 Watching video:</strong> <a href="https://youtu.be/zCxWNcMZ02E" target="_blank" rel="noopener">患上腦腫瘤的女孩 因為TWICE而獲得勇氣</a>。</li>        <li><strong>07:50 Eating Nutritional Supplement, and do some calculation:</strong> So in average, if I take 4 types of them, I have to spend NT$700 per month.</li>        <li><strong>08:00 Portfolio and Resume:</strong> 上 1111 人力銀行註冊資料.</li>        <li><strong>08:50 Preparing ingredients.</strong></li>        <li><strong>09:08 Portfolio and Resume:</strong> 1111 人力銀行註冊資料. Finished.</li>        <li><strong>09:15 Found [ my resume site ] ,, big display problme on real phone and Chrome:</strong> I found my resume site can't work on my smart phone and Chrome responsive view, when I was doing some radome checking. Still don't know why, but it's lucky to find this in the first place.</li>        <li><strong>09:23 Portfolio and Resume:</strong> 1111 人力銀行註冊資料. Finished.</li>        <li><strong>09:55 Cooking, start searching jobs.</strong></li>        <li><strong>10:35 Eating, start searching jobs.</strong></li>        <li><strong>10:50 Start searching jobs:</strong> On 1111 and 104.</li>        <li><strong>11:40 Misc.</strong></li>        <li><strong>12:15 Searching jobs:</strong> On 1111 and 104.</li>        <li><strong>13:57 Eating fruit, watching video.</strong></li>        <li><strong>14:25 Searching jobs:</strong> On 104. 1111 don't have much opportunity while 104 have bunchs of them.</li>        <li><strong>15:55 Eating the rest food in my pot, watching video, buying drinks:</strong> Sleepy.</li>        <li><strong>16:35 Searching jobs:</strong> On 104.</li>        <li><strong>19:50 Searching jobs:</strong> On <a href="https://github.com/f2etw/jobs/issues" target="_blank" rel="noopener">{ github }-{ f2etw/jobs }</a>, using searching term <code>is:issue is:open updated:&gt;2019-06-10 label:"[F] Vue.js"</code>. // 104 opportunity is exhausted, now I start to find other resources (job listing site).</li>        <li><strong>21:10 Total amont of today's job applications:</strong> Totally applied 17 jobs today, decent.</li>        <li><strong>21:11 Grocery.</strong></li>        <li><strong>21:40 reflecting.</strong></li>        <li><strong>21:55 Watching video.</strong></li>        <li><strong>23:59 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-13<a id="id190713m074059"></a></h2>  <div class="kwCloud">    <div class="itm s2">[ Higly focused ]-[ nothing matters ]-[ now ] [ mindset ]-[ zone ]</div>    <div class="itm s1">Exercising</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Project { Doggo }</div>  </div>  <ol>    <li><strong>( Twice ) { Losttime } - [ Higly focused ]-[ nothing matters ]-[ now ] [ mindset ]-[ zone ]:</strong> <a href="https://youtu.be/GnpQ0K6U9vY" target="_blank" rel="noopener">EP4</a>, <a href="https://youtu.be/sUWVKbAumAs" target="_blank" rel="noopener">EP5</a>, <a href="https://youtu.be/8hvvBk4z3_g" target="_blank" rel="noopener">EP8</a>, <a href="https://youtu.be/PsPMeWy0FpI" target="_blank" rel="noopener">EP9</a>.</li>    <li><strong>( Music ) ( Electronic ) Unknown title - { Twice } passing airport:</strong> <a href="https://youtu.be/UbYkBRupnIc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( cover ) { Yiruma } - { River Flows In You }</strong>      <ol>        <li><strong>About:</strong> I'm pretty bored about some non-creative [ pieces ]-[ cover ] showing again and again on the [ internet ]-[ searching results ]. I always found some new and creative piece while I tried to searched with "re-arranged" or "instrumental" or "orchestral" version. Even if these derived version are not composed properly, they are still much more better then a boring identical cover that don't produce any creativity..</li>        <li><strong>WTF is River Flows In You?:</strong> <a href="https://www.reddit.com/r/piano/comments/7cd5bv/wtf_is_river_flows_in_you/" target="_blank" rel="noopener">Link</a>. --{ ... but it's a horrible starting point for pianists, yet it seemed to sweep up a whole generation of people. It sounds deceptively simple so it ended up being something people jumped on as an entry point. I've heard it overplayed so much ... }--.</li>        <li><strong>Orchestral Winter Version:</strong> <a href="https://youtu.be/pin5Z6hUJOo" target="_blank" rel="noopener">Link</a>. Samples by EWQL Symphonic Orchestra, Native Instruments Kontakt and Tonehammer.</li>        <li><strong>Arranged by Larry Moore:</strong> <a href="https://youtu.be/asao1632haE" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Life ) { The Dodo } - Wild Dolphin Knew Exactly How To Ask People For Help:</strong> <a href="https://youtu.be/Yt5Or1_JLO8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Life ) { The Dodo } - Boating Dog Sees Dolphin:</strong> <a href="https://youtu.be/4hy-4aiGx0U" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Sass ) { scale-color } is more natural than basic color function like { desaturate },{ darken }:</strong> <a href="https://sass-lang.com/documentation/functions/color#scale-color" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:30 Wake up.</strong></li>        <li><strong>07:40 Bathroom.</strong></li>        <li><strong>07:50 Uploading blog.</strong></li>        <li><strong>08:15 Troubleshooting why [ my resume site ] ,, big display problme on real phone and Chrome:</strong> I found my resume site can't work on my smart phone and Chrome responsive view, when I was doing some radome checking. Still don't know why, but it's lucky to find this in the first place.</li>        <li><strong>09:10 Troubleshooting [ my resume site ] ,, "PDF download link not working on Chrome responsive view" problem:</strong> See Solution of problem "Resource interpreted as Document but transferred with MIME type application": <a href="http://slashlook.com/archive2018/20181025.html" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>09:50 Planning, misc.</strong></li>        <li><strong>10:10 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a>, and <code>plank</code>.</li>        <li><strong>10:45 Taking break.</strong></li>        <li><strong>10:50 Taking shower, preparing ingredients, cooking, misc.</strong></li>        <li><strong>11:45 Thinking about updating { Doggo } code ,, how to start.</strong></li>        <li><strong>11:55 Eating, watching video.</strong></li>        <li><strong>13:20 Taking a nap.</strong></li>        <li><strong>13:43 Buying drinks.</strong></li>        <li><strong>13:57 Watching video.</strong></li>        <li><strong>15:25 Updating { Doggo } code:</strong> Designing <code>doggo</code> new logo with <code>inkscape</code>.</li>        <li><strong>16:27 Updating { Doggo } code:</strong> Dealing with font works. Installing google font.</li>        <li><strong>17:40 Cooking green bean, dancing with music, misc.</strong></li>        <li><strong>17:55 Project { Doggo }:</strong> Tweaking css ,, font, others.</li>        <li><strong>19:45 Eating green bean, watching video.</strong></li>        <li><strong>21:05 Project { Doggo }:</strong> Keep working on header ,, nav ,, mobile menu. Finished. Start working on implementing <code>Doggo</code> logo.</li>        <li><strong>23:47 Cooking, eating.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-14<a id="id190714m090541"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Project { Doggo }</div>    <div class="itm s1">{ GSAP }-[ animation ]</div>    <div class="itm s1">{ Vue }-[ Component Names ]-[ Style Guide ]</div>  </div>  <ol>    <li><strong>( Music ) Twice - MOVE (TAEMIN) Cover:</strong> <a href="https://youtu.be/dtQNrJh9-ig" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Twice - Like a fool:</strong> <a href="https://youtu.be/E3eQRTMIL7g?t=1868" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ The Dodo } - Otter Wants To Play With Dogs:</strong> <a href="https://youtu.be/ozwFxEnW2Sc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ GSAP } installation - { npm } - { Vue }:</strong> <a href="https://greensock.com/docs/NPMUsage" target="_blank" rel="noopener">{ npm } usage and { import }</a>, <a href="https://blog.usejournal.com/vue-js-gsap-animations-26fc6b1c3c5a" target="_blank" rel="noopener">Vue.js and GSAP equal hot animations</a> (including using <code>$refs</code>).</li>    <li><strong>( GSAP ) Getting Started with GSAP:</strong> <a href="https://greensock.com/get-started-js" target="_blank" rel="noopener">Link</a>. Including the basics of <code>TweenMax</code>, <a href="https://greensock.com/get-started-js#CSSPlugin" target="_blank" rel="noopener">{ CSSPlugin }</a>, <a href="https://greensock.com/docs/Plugins/AttrPlugin" target="_blank" rel="noopener">{ AttrPlugin }</a> (and <a href="https://youtu.be/az4k4E4diTo?t=647" target="_blank" rel="noopener">using { AttrPlugin } for doing simple svg "morph" effect</a>), <a href="https://greensock.com/docs/Plugins/BezierPlugin" target="_blank" rel="noopener">BezierPlugin</a>, <code>TweenMax.to()</code>, <code>TweenMax.from()</code>, easing (ease, transition timing function), delay, <code>TweenMax.staggerFrom()</code> (staggered introduce multiple targets), <code>TweenMax.to()</code> on multiple targets, <code>onComplete</code> callback function (after a <code>TweenMax.to()</code> animation finished).</li>    <li><strong>( GSAP ) "Jump Start" slides:</strong> <a href="https://greensock.com/jump-start-js" target="_blank" rel="noopener">Link</a>. // Including <code>tweenFromTo()</code>, <a href="https://youtu.be/MjN22sQp5pU?t=269" target="_blank" rel="noopener">relative values</a> (like <code>{ left: "+=100px" }</code>), <code>TimelineLight</code>, control playback ,, methods group (restart, reverse, timeScale ...), Labels (Add labels to a timeline for easy and intuitive navigating positions (currentLabel(), getLabelAfter(), getLabelsArray() ...) (<a href="https://youtu.be/sXJKg8SUSLI?t=406" target="_blank" rel="noopener">label can also mixing with relative values</a>), so you don't have to play the whole animation from start everytime you save the code file, when developing, you can start from a lable (customed?), this save a lot of time).</li>    <li><strong>( GSAP ) { TimelineLite }:</strong> <a href="https://greensock.com/timelinelite" target="_blank" rel="noopener">Link</a>. When to Use a Timeline: --{ To control a group of animations as a whole ... progressively build so that timing adjustments to earlier animations automatically affect later ones, greatly simplifying experimentation and maintenance ...To do any kind of complex choreographing ... }--. // Also see <a href="https://greensock.com/timelinemax" target="_blank" rel="noopener">TimelineMax</a>.</li>    <li><strong>( GSAP ) Making { reply() } (control playback) work with windows scrolling position:</strong> <a href="https://youtu.be/Rgy85e4zr4A?t=1197" target="_blank" rel="noopener">Example</a>.</li>    <li><strong>( Vue ) Component Names - Style Guide:</strong> <a href="https://vuejs.org/v2/guide/components-registration.html#Component-Names" target="_blank" rel="noopener">Component Names</a>, <a href="https://vuejs.org/v2/style-guide/#Base-component-names-strongly-recommended" target="_blank" rel="noopener">Style Guide</a>. // Conclusion: The working solution is use like this: <code>iLike_thisClassName</code>, <code>iLike_thisComponentFileName.vue</code>, <code>ILikeThisComponentName</code>, <code>import ILikeThisComponentName from iLike_thisComponentFileName.vue</code>, <code>components: { ILikeThisComponentName, }</code>, <code>&lt;i-like-this-component-name&gt;&lt;/i-like-this-component-name&gt;</code>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:43 Sleep:</strong> Stay up late again. Bad old habit.</li>        <li><strong>09:05 Wake up.</strong></li>        <li><strong>09:06 Uploading blog.</strong></li>        <li><strong>09:20 Bathroom.</strong></li>        <li><strong>09:30 Watching video.</strong></li>        <li><strong>10:00 Learning { GSAP }-{ GreenSock Animation Platform }:</strong> Browsing their homepage, understanding the overview.</li>        <li><strong>11:10 Learning { GSAP }-{ GreenSock Animation Platform }:</strong> Install <code>gsap</code> package with <code>npm</code>, do testing, keep learning.</li>        <li><strong>13:37 Take a nap.</strong></li>        <li><strong>14:05 Grocery, preparing ingredients, cooking, keep working.</strong></li>        <li><strong>15:30 Eating, watching video, listening to music.</strong></li>        <li><strong>17:06 Project { Doggo }:</strong> <code>About</code> page ,, animation ,, building basic structure and working on positioning.</li>        <li><strong>21:05 Watching video, eating, brushing teeth.</strong></li>        <li><strong>22:25 Project { Doggo }:</strong> Commit. Keep planning on animation stuff. // Leaning { Vue }-[ Component Names ]-[ Style Guide ].</li>        <li><strong>23:55 Watching video.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-15<a id="id190715m082229"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Stoicism }</div>    <div class="itm s1">{ Virtue }</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Project { Doggo }</div>    <div class="itm s1">Capitalism</div>  </div>  <ol>    <li><strong>( Twice ) Dahyun, Chaeyoung and Tzuyu’s healing tour to Ganghwado Island Part.1 - 2019.05.26:</strong> <a href="https://youtu.be/PZvfcuK_Ozs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Job ) Why I won't work a developer job anymore - { Joshua Fluke }:</strong> <a href="https://youtu.be/MbUvTbD9q4A" target="_blank" rel="noopener">Link</a>. --{ You are a [ expendable ]-[ disposable ] [ resource ]-[ product ], you are a profit margin decrease, for most company. }--.</li>    <li><strong>{ Joshua Fluke } - Some Junior developer portfolios:</strong> <a href="https://youtu.be/06uXvfmyVI8" target="_blank" rel="noopener">Link</a>. // <a href="https://juan-garcia1.github.io/portfolio/" target="_blank" rel="noopener">This one ,, first project, looking nice</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:10 Sleep.</strong></li>        <li><strong>08:20 Wake up.</strong></li>        <li><strong>08:23 Uploading blog.</strong></li>        <li><strong>08:30 Misc.</strong></li>        <li><strong>08:35 Watching video about jobs and portfolio.</strong></li>        <li><strong>12:05 Reading mails related to job.</strong></li>        <li><strong>12:55 Updating Portfolio site footer icon, finding and fixing misc problems.</strong></li>        <li><strong>16:50 Preparing ingredients, misc.</strong></li>        <li><strong>17:05 Portfolio site ,, fixing jquery scrolling position ,, incorrect, problem.</strong></li>        <li><strong>17:43 Cooking.</strong></li>        <li><strong>18:16 Eating, watching video, taking shower, misc.</strong></li>        <li><strong>20:20 Portfolio site ,, fixing jquery scrolling position ,, incorrect, problem.</strong></li>        <li><strong>21:05 Keep working, doing laundry:</strong> Fixed jquery scrolling position ,, incorrect, problem. The cause is, I set <code>html, body { height: 100% }</code> previously, for sticky footer (and set <code>#app { min-height: 100% }</code>). But it causes the <code>jquery("footer").offset().top;</code> malfunction. Now I unset it, and use <code>#app { min-height: 100vh }</code>, an everything works normally again.</li>        <li><strong>21:40 Finding dog breeds silhouette, doing laundry, brushing teeth.</strong></li>        <li><strong>22:16 Picking dog breeds silhouette:</strong> Testing <code>Inkscape</code> and <code>Krita</code>.</li>        <li><strong>22:40 Watching video.</strong></li>        <li><strong>23:45 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-16<a id="id190716m075456"></a></h2>  <div class="kwCloud">    <div class="itm s1">First job interview</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Project { Doggo }</div>    <div class="itm s1">{ www.cakeresume.com }</div>  </div>  <ol>    <li><strong>My first job interview - 千蓬股份有限公司 (豪亮燈飾):</strong> <a href="http://www.howlite101.com/" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.1111.com.tw/corp/9527612/#c4" target="_blank" rel="noopener">1111</a>，related to graphic design, product photography, related.</li>    <li><strong>( Bus ) 5043 - 動態公車資訊:</strong> 去程和返程不知道是要按哪個按鈕。反正左邊的 <code>往中壢車站</code> 是整個路徑順時針繞，對應到 <code>時刻表</code> 的左邊。右邊的 <code>往中壢車站</code> 是整個路徑逆時針繞，對應到 <code>時刻表</code> 的右邊。</li>    <li><strong>( Image manipulation ) { ImageMagick } ,, { mogrify } and { convert }:</strong> <a href="https://stackoverflow.com/questions/12433300/imagemagick-how-to-resize-proportionally-with-mogrify-without-a-background" target="_blank" rel="noopener">Link</a>. // Example command to enlarge an image is like: <code>convert ./9.jpg -resize 400%  ./9_out.png</code>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:54 Wake up.</strong></li>        <li><strong>07:56 Uploading blog.</strong></li>        <li><strong>08:15 Bathroom.</strong></li>        <li><strong>08:24 Messaging with mom and Woody.</strong></li>        <li><strong>08:44 Preparing for job interview ,, Misc.</strong> Misc like the bus route, map, timming, information, testing viewing same webpage on smartphone, clothes, leather shoes, beard ... .</li>        <li><strong>10:30 Project { Doggo }:</strong> Dog breeds silhouette. Convert jpg to svg.</li>        <li><strong>11:50 Reading email.</strong></li>        <li><strong>12:05 Grocery, cooking, keep working.</strong></li>        <li><strong>13:07 Eating. Take a look of { www.cakeresume.com }.</strong></li>        <li><strong>13:32 Try to use { www.cakeresume.com }.</strong></li>        <li><strong>14:05 Leaving home.</strong></li>        <li><strong>16:00 My first job interview:</strong> <code>千蓬股份有限公司 (豪亮燈飾)</code>，</li>        <li><strong>17:55 Back home, misc.</strong></li>        <li><strong>18:05 Reading mail, misc, eating fruit.</strong></li>        <li><strong>18:30 Filling basic info in { www.cakeresume.com }:</strong> And searching job on this platform.</li>        <li><strong>20:00 Cooking.</strong></li>        <li><strong>20:20 Eating, watching video.</strong></li>        <li><strong>21:05 Grocery.</strong></li>        <li><strong>21:40 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-17<a id="id190717m054504"></a></h2>  <div class="kwCloud">    <div class="itm s1">Finding job</div>    <div class="itm s1">2nd job interview</div>    <div class="itm s1">[ Job ]-{ cakeresume }</div>    <div class="itm s1">[ Job ]-{ yourator }</div>    <div class="itm s1">{ 新創 }-[ job ]</div>  </div>  <ol>    <li><strong>{ 誰來晚餐 } - 七年的賭注 - Give543 贈物網:</strong> <a href="https://youtu.be/WxqY7tMcY2w" target="_blank" rel="noopener">{ 誰來晚餐 }</a>, <a href="https://www.yourator.co/companies/Give543" target="_blank" rel="noopener">{ Give543 贈物網 }-{ yourator }</a>, <a href="https://www.give543.com/" target="_blank" rel="noopener">Give543 贈物網 官網</a>.</li>    <li><strong>{ 誰來晚餐 } - 唐鳳 - 燒賣 後媽 我的女兒 和我們的心事:</strong> <a href="https://youtu.be/V5Mc_C7ZG20" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>2nd job interview - 富欣實業股份有限公司:</strong> <a href="http://www.fullcorp.com/full-iot/eng/home.html" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.104.com.tw/company/fy6c9ko?jobsource=pda" target="_blank" rel="noopener">104</a>. 網頁前端. From <code>104</code>. IOT related. So now I starts to have image, overview, on what is <code>IOT</code>.</li>    <li><strong>Today job application sent amount:</strong> Yourator: 11. CakeResume: 3. // Bad idea, I shouldn't apply those startups jobs, they are not fit for my current position.</li>    <li><strong>( Job ) 加入新創公司前，新鮮人應該問的七個問題:</strong> <a href="https://meethub.bnext.com.tw/%E5%8A%A0%E5%85%A5%E6%96%B0%E5%89%B5%E5%85%AC%E5%8F%B8%E5%89%8D%EF%BC%8C%E6%96%B0%E9%AE%AE%E4%BA%BA%E6%87%89%E8%A9%B2%E5%95%8F%E7%9A%84%E4%B8%83%E5%80%8B%E5%95%8F%E9%A1%8C/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Yourator } - 應徵新創前必看 - 新創求職 FAQ:</strong> <a href="https://www.yourator.co/articles/40?utm_source=onboarding_email" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) { Sitepoint } - Event Bubbling, Event Capture, Event Propagation:</strong> <a href="https://medium.com/@shihKai/javascript-event-bubbling-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-capture-%E4%BA%8B%E4%BB%B6%E6%8D%95%E7%8D%B2-%E7%9A%84%E8%99%95%E7%90%86-34abdbd69397" target="_blank" rel="noopener">Link</a>, <a href="https://www.sitepoint.com/event-bubbling-javascript/" target="_blank" rel="noopener">link2</a> (this article is hard to read and understand, so you only need to see that figure in the middle).</li>    <li><strong>( Javascript ) What is Event Delegation?:</strong> <a href="http://shubo.io/event-bubbling-event-capturing-event-delegation/" target="_blank" rel="noopener">Link</a>. It is just a practical use of Event Bubbling.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>05:40 Wake up.</strong></li>        <li><strong>05:45 Uploading blog.</strong></li>        <li><strong>05:55 Reading mail.</strong></li>        <li><strong>05:58 Buying food, printing resume.</strong></li>        <li><strong>06:17 Searching interview common questions.</strong></li>        <li><strong>07:50 Leaving home for job interview.</strong></li>        <li><strong>13:25 Back to home from job interview.</strong></li>        <li><strong>13:26 Preparing ingredients, misc.</strong></li>        <li><strong>13:44 [ Learning ],[ reviewing ] Javascript prototype.</strong></li>        <li><strong>13:57 Cooking, finding job on { cakeresume }.</strong></li>        <li><strong>14:23 Eating ,finding job on { cakeresume }.</strong></li>        <li><strong>14:46 Finding job on { cakeresume } and { yourator }.</strong></li>        <li><strong>17:30 Misc.</strong></li>        <li><strong>17:50 Eating fruit, taking break.</strong></li>        <li><strong>18:00 Finding job on { cakeresume } and { yourator }.</strong></li>        <li><strong>21:05 Cooking.</strong></li>        <li><strong>21:32 Eating.</strong></li>        <li><strong>23:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-18<a id="id190718m074951"></a></h2>  <div class="kwCloud">    <div class="itm s1">Finding job</div>  </div>  <ol>    <li><strong>{ 誰來晚餐 } - 唐鳳 - 燒賣 後媽 我的女兒 和我們的心事:</strong> <a href="https://youtu.be/V5Mc_C7ZG20" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Today's job application sent amount:</strong> 104: 14. CakeResume: 9.</li>    <li><strong>8個理由！不要加入新創公司 - 商業週刊:</strong> <a href="https://www.businessweekly.com.tw/article.aspx?id=17383&type=Blog&p=1" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Scam ) 命理師預言成真？唐綺陽、江伯樂：郭台銘選總統 - 民眾的科學素養扯到不行:</strong> <a href="https://youtu.be/Nli7aeoGr5Y" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( ?? ) 雨揚科技股份有限公司 - 雨揚珍品:</strong> <a href="https://www.yohofate.com/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:43 Wake up.</strong></li>        <li><strong>07:50 Uploading blog, bathroom, misc.</strong></li>        <li><strong>08:15 Finding job on { 104 }.</strong></li>        <li><strong>09:30 Eating apple.</strong></li>        <li><strong>09:40 Finding job on { 104 }.</strong></li>        <li><strong>09:50 Reading articles about Startups.</strong></li>        <li><strong>10:10 Finding job on { CakeResume }.</strong></li>        <li><strong>10:47 Preparing ingredients, taking a break.</strong></li>        <li><strong>10:55 Finding job on { 1111 }.</strong></li>        <li><strong>11:55 Cooking, keep working.</strong></li>        <li><strong>12:17 Eating, watching video.</strong></li>        <li><strong>13:30 Taking nap.</strong></li>        <li><strong>13:48 Watching video.</strong></li>        <li><strong>14:06 Misc, replying mail, get 2 job interview at Taipei.</strong></li>        <li><strong>15:30 Misc, eating apple.</strong></li>        <li><strong>15:45 Filling Word file that is required before an interview.</strong></li>        <li><strong>16:28 Reading article.</strong></li>        <li><strong>16:36 Finding job on { 1111 }.</strong></li>        <li><strong>16:48 Finding job on { 104 }.</strong></li>        <li><strong>18:25 Misc, grocery.</strong></li>        <li><strong>19:15 Preparing ingredients.</strong></li>        <li><strong>19:25 Cooking, keep working.</strong></li>        <li><strong>20:07 Eating, watching video.</strong></li>        <li><strong>21:35 Taking shower.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-19<a id="id190719m061822"></a></h2>  <div class="kwCloud">    <div class="itm s1">Finding job</div>    <div class="itm s2">台灣主要求職 [ 網站 ]-[ 資源 ]-[ 平台 ]</div>    <div class="itm s1">E-commerce</div>    <div class="itm s1">Exercising</div>  </div>  <ol>    <li><strong>( Job ) 台灣主要求職 [ 網站 ]-[ 資源 ]-[ 平台 ]，詳細介紹:</strong> <a href="https://unknown5050.blogspot.com/2019/04/job-search.html" target="_blank" rel="noopener">Link</a>. // 104, 1111, 518, yes123, Linkedin, Yourator, Wanted, Meet.jobs, CakeResume, Facebook 徵才工具, Indeed (全球最大的職缺搜尋引擎), Google 職缺搜尋功能 (2019年3月剛開放)。 // 104 最大最完善，工作機會最多，1111 次之，518 工作相對少的多，不過可以找到很多特殊的工作內容。</li>    <li><strong>( Job ) 投出履歷數量:面試機會數量:找到一份工作:</strong> <a href="https://tw.news.yahoo.com/%E6%96%B0%E9%AE%AE%E4%BA%BA%E6%89%BE%E5%B7%A5%E4%BD%9C-%E5%B9%B3%E5%9D%87%E6%8A%95108%E5%B0%81%E5%B1%A5%E6%AD%B7-002013075.html" target="_blank" rel="noopener">Link</a>. --{ 至於已經或曾經找到「頭路」的新鮮人，大概需要花多少心力，才有可能爭取到一份正職工作呢？調查則發現；平均要投過19.6封履歷，才會獲得一家企業的面試機會，與去年的20封差不多；同時得再面試5.5家公司，才能真正找到一份工作，也相當於去年的5.2家。依此換算下來，新鮮人如果想得到一次錄取機會，大約要投遞108封履歷表。 }--.</li>    <li><strong>E-commerce:</strong> <a href="https://shopline.tw/blog/what-is-ecommerce-and-how-to-succeed/" target="_blank" rel="noopener">電子商務是什麼？創業開店前一定要知道的成功關鍵</a>, <a href="https://transbiz.com.tw/%E9%9B%BB%E5%AD%90%E5%95%86%E5%8B%99%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9Fecommerce-sucess/#i-7" target="_blank" rel="noopener">電商平台的種類</a>.</li>    <li><strong>Today's job application sent amount:</strong> 104: 55.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:15 Wake up.</strong></li>        <li><strong>06:20 Uploading blog.</strong></li>        <li><strong>06:30 Bathroom.</strong></li>        <li><strong>06:40 Misc, reading articles.</strong></li>        <li><strong>08:00 Finding job on { 104 }.</strong></li>        <li><strong>10:35 Eating fruit, misc, thinking about the interview.</strong></li>        <li><strong>11:30 Finding job on { 104 }.</strong></li>        <li><strong>12:18 Take a nap.</strong></li>        <li><strong>12:48 Finding job on { 104 }.</strong></li>        <li><strong>14:23 Cooking.</strong></li>        <li><strong>14:50 Eating, reading articles:</strong> About E-commerce.</li>        <li><strong>17:40 Take a nap:</strong> Feeling sleepy.</li>        <li><strong>18:00 Reading articles:</strong> About E-commerce.</li>        <li><strong>18:20 Finding job on { 104 }.</strong></li>        <li><strong>21:20 Reading articles.</strong></li>        <li><strong>22:06 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a><del>, and <code>plank</code></del>.</li>        <li><strong>22:27 Taking a break.</strong></li>        <li><strong>22:31 Taking shower.</strong></li>        <li><strong>22:55 Brushing teeth, listening to music.</strong></li>        <li><strong>23:15 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-20<a id="id190720m072458"></a></h2>  <div class="kwCloud">    <div class="itm s1">Job</div>    <div class="itm s1">Portfolio and Resume</div>  </div>  <ol>    <li><strong>( Front-end ) ( Job ) 如何成為前端工程師，當你不是相關科系、不會任何程式語言:</strong> <a href="https://medium.com/@linengine/%E5%A6%82%E4%BD%95%E6%88%90%E7%82%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E7%95%B6%E4%BD%A0%E4%B8%8D%E6%98%AF%E7%9B%B8%E9%97%9C%E7%A7%91%E7%B3%BB-%E4%B8%8D%E6%9C%83%E4%BB%BB%E4%BD%95%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-2256270ace5c" target="_blank" rel="noopener">Link</a>. Including 達到進入業界的最低門檻, efficiency.</li>    <li><strong>( Story ) ( Front-end ) ( Job ) 經濟系畢業，無經驗轉職前端工程師:</strong> <a href="https://www.ptt.cc/bbs/Soft_Job/M.1485583086.A.631.html" target="_blank" rel="noopener">Link1</a>, <a href="https://www.ptt.cc/bbs/Web_Design/M.1488298327.A.94C.html" target="_blank" rel="noopener">link2</a>.</li>    <li><strong>寫給社會新鮮人 - 面試結果多久才會通知？:</strong> <a href="https://lingyi9999.pixnet.net/blog/post/93847752" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>面試 - 作品集 - 筆電 - 書面印刷:</strong>      <ol>        <li><strong>後端工程師面試必看，我該準備什麼作品集？:</strong> <a href="https://tw.alphacamp.co/blog/backend-engineer-job-winning-portfolio" target="_blank" rel="noopener">Link</a>.  雖然在講後端，但是前端也可以參考。這其實跟 "我的 side project 到底要做什麼" 是一樣的內容。</li>        <li><strong>紙本呈現:</strong> <a href="https://www.cakeresume.com/resources/how-to-prepare-job-interview-portfolio?locale=zh-TW" target="_blank" rel="noopener">Link</a>. --{ 如果是工程師，帶筆電demo當然是最好的方式，但其他專業的面試用的作品集則可以考慮紙本呈現，印一至兩份，在面試時交遞給面試官。這份面試時用的履歷與作品集，會是最精簡的版本，畢竟面試官不會花時間在你面前詳細閱讀 ... }--.</li>        <li><strong>作品集可以印成紙本，作品挑一個最好的就可以了:</strong> <a href="https://medium.com/xchange/%E9%9D%A2%E8%A9%A6%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90%E5%B8%AB%E6%80%8E%E9%BA%BC%E6%BA%96%E5%82%99%E4%BD%9C%E5%93%81%E9%9B%86-4dbf064a8701" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:20 Wake up.</strong></li>        <li><strong>07:25 Uploading blog.</strong></li>        <li><strong>07:33 Bathroom.</strong></li>        <li><strong>07:40 Reading articles:</strong> About the interview ,, timing, real [ process ]-[ workflow ] of HR in background, how long you get an offer, how to reply when you get an offer, misc ... .</li>        <li><strong>10:00 Reading articles:</strong> PPT and portfolio to bring to interview, misc.</li>        <li><strong>11:15 Preparing ingredients, cooking, reading articles about interview.</strong></li>        <li><strong>11:45 Eating, reading articles about interview.</strong></li>        <li><strong>12:15 Reading articles about interview.</strong></li>        <li><strong>13:43 Misc.</strong></li>        <li><strong>14:22 Taking nap.</strong></li>        <li><strong>14:45 Waking up, misc.</strong></li>        <li><strong>15:23 Working on [ portfolio ]-{ interview version ].</strong></li>        <li><strong>21:00 Eating.</strong></li>        <li><strong>21:20 Keep working.</strong></li>        <li><strong>22:10 Cooking, keep working.</strong></li>        <li><strong>22:40 Eating, watching video.</strong></li>        <li><strong>23:40 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-21<a id="id190721m075359"></a></h2>  <div class="kwCloud">    <div class="itm s1">Job</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Transportation</div>  </div>  <ol>    <li><strong>公共電視 有話好說 - 英國金融時報：國台辦直接指示旺中！:</strong> <a href="https://youtu.be/ZkCptjk8ijQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Application ) { sitepoint.com } - 5 of the Best Free HTML5 Presentation Systems:</strong> <a href="https://www.sitepoint.com/5-free-html5-presentation-systems/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Application ) { reveal.js } - The HTML [ presentation ]-[ slide shows ] Framework:</strong> <a href="https://github.com/hakimel/reveal.js" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Reveal.js } + { slides.com }:</strong> <a href="http://blog.infographics.tw/2016/11/reveal-js-and-slides-com/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Transportation ) { 大台北公車 },{ 5284 } website:</strong> <a href="https://ebus.gov.taipei/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:46 Wake up.</strong></li>        <li><strong>07:54 Bathroom.</strong></li>        <li><strong>08:04 Uploading blog.</strong></li>        <li><strong>08:10 Misc.</strong></li>        <li><strong>08:15 Watching video.</strong></li>        <li><strong>08:35 Working on [ portfolio ]-{ interview version ].</strong></li>        <li><strong>09:55 Outdoor and go print out [ portfolio ]-{ interview version ] images:</strong> 19 images, A4 paper size, NT$285.</li>        <li><strong>11:10 Back home, preparing ingredients.</strong></li>        <li><strong>11:25 Messaging with Mom and Woody.</strong></li>        <li><strong>12:40 Cooking.</strong></li>        <li><strong>13:00 Eating, watching video.</strong></li>        <li><strong>14:06 Take a nap.</strong></li>        <li><strong>14:30 Watching video.</strong></li>        <li><strong>15:00 Check printed [ portfolio ]-{ interview version ] images.</strong></li>        <li><strong>15:12 Thinking about using [ presentation ]-[ slide shows ]:</strong> As the interview tomorrow they kindly offer me to use their computer, so I can bring my usb there. Then I'm thinking about how to present my jpg image. Later I think I will use "html slide shows" such as <code>reveal.js</code>.</li>        <li><strong>15:45 Learning { reveal.js }-[ presentation ]-[ slide shows ].</strong></li>        <li><strong>16:10 Doing { reveal.js }-[ presentation ]-[ slide shows ]:</strong> And copy it into USB stick and upload to Google Drive, for tomorrow interview.</li>        <li><strong>17:50 Finding the company location of interview.</strong></li>        <li><strong>18:10 Eating green beans, misc.</strong></li>        <li><strong>18:27 Finding the company location of interview:</strong> Understanding <code>大台北公車</code> website, <code>5284</code> website.</li>        <li><strong>20:00 Having conversation with Woody about my interview:</strong> To speed up learning process and have more systematic learning and learning routine, I can go purchase some online course like <code>Udemy.com</code>, <code>Lynda.com</code>. Woody told me that the basic threshold for get a front-end job is not as high as I think, there might be some javascript test (interviewer just want to know the current level of interviewee), but unlike back-end jobs, there is no question like algorithm stuff.</li>        <li><strong>21:00 Writing blog.</strong></li>        <li><strong>21:13 Misc.</strong></li>        <li><strong>21:18 Taking shower.</strong></li>        <li><strong>21:50 Cooking, planning [ interview ]-[ transportation ].</strong></li>        <li><strong>22:18 Eating, understanding { 圍棋練功房 }.</strong></li>        <li><strong>23:00 Brushing teeth, watching video.</strong></li>        <li><strong>23:20 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-22<a id="id190722m072608"></a></h2>  <div class="kwCloud">    <div class="itm s1">Interview</div>    <div class="itm s1">Job</div>    <div class="itm s2">Humble</div>    <div class="itm s2">{ 圍棋人科技股份有限公司 }-{ Goer }</div>    <div class="itm s1">Got offer</div>  </div>  <ol>    <li><strong>{ 圍棋人科技股份有限公司 }-{ Goer }</strong>      <ol>        <li><strong>My thought:</strong> Be humble, be [ contentment ]-[ fulfillment ].</li>        <li><strong>Job interview - 圍棋人科技股份有限公司:</strong> <a href="http://go.weiqi.study/" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.yourator.co/companies/Goer" target="_blank" rel="noopener">yourator</a>. 主力產品「圍棋練功房」是一個基於AI開發的圍棋補習班的全方位輔助方案 內容包含：e化教學、AI對戰陪練、遊戲化機制、智慧題庫、電子作業、真人即時對弈、棋力成長軌跡、棋院管理後台等等。產品2018年5月上線至今，在兩岸三地已經有超過300間棋院採用，月付費會員數萬人（模式為B2B2C）。總部設立在台北，主要負責產品開發與新技術研發、全球市場戰略佈局； 廣州也有設立辦公室，負責中國運營與業務推廣。</li>        <li><strong>Address:</strong> 台北市中山區長春路152號3樓 (松江南京站8號出口).</li>        <li><strong>上班車資 (單程):</strong> 公車 5042: 28 ; 火車中壢到台北 51 ; 捷運 (含轉路線): 16 + 16 ; 共約 111 ; 來回一趟: 222.</li>        <li><strong>上班時間 (單程):</strong> 公車 5042: 估 40 分 ; 火車中壢到台北: 估 55 分 ; 捷運 (含轉路線): 估 35 分 ;  步行到公司樓下: 估 5 分 ; 共約 135 分 (2h15m) ; 來回一趟共約: 270 分 (4h30m).</li>        <li><strong>{ Jack Yeh }:</strong> <a href="https://www.linkedin.com/in/jack-yeh-%E8%91%89%E5%BD%A7%E7%86%8F-699a1276/?originalSubdomain=tw" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>Job interview - 科萊博瑞科技有限公司:</strong> <a href="http://www.collaborate.tw/" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.cakeresume.com/companies/collaborate/about" target="_blank" rel="noopener">cakeresume</a>. This interview was canceled as soon as I'm sure I got the job in { 圍棋人科技股份有限公司 }-{ Goer }.</li>    <li><strong>Job interview - 快樂電視_快樂科技股份有限公司 (interview of tomorrow):</strong> <a href="https://www.happytv.com.tw/" target="_blank" rel="noopener">Homepage</a>, <a href="https://www.104.com.tw/company/1a2x6bjv1j?jobsource=vip" target="_blank" rel="noopener">104</a>. This interview was canceled as soon as I'm sure I got the job in { 圍棋人科技股份有限公司 }-{ Goer }.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:25 Wake up.</strong></li>        <li><strong>07:26 Uploading blog.</strong></li>        <li><strong>07:32 Bathroom.</strong></li>        <li><strong>07:50 Leaving home for interview.</strong></li>        <li><strong>11:00 Interview of { 圍棋人科技股份有限公司 }-{ Goer }.</strong></li>        <li><strong>13:50 Finished the interview of { 圍棋人科技股份有限公司 }-{ Goer }.</strong></li>        <li><strong>15:00 Leaving { 圍棋人科技股份有限公司 }-{ Goer } and back toward home.</strong></li>        <li><strong>15:25 Train departing.</strong></li>        <li><strong>16:30 Train arriving:</strong> Delayed, due to a person had health issue on train.</li>        <li><strong>16:?? Canceling the 5th interview too:</strong> I'd canceled the 4th already when I was informed I get the offer in { 圍棋人科技股份有限公司 }-{ Goer }, but no time to cancel the 5th too. Now I finished the rest, canceling the 5th too.</li>        <li><strong>17:40 Back home, wasting time on [ muse ]-[ reflecting ].</strong></li>        <li><strong>18:30 Misc, messaging with mom, uploading blog:</strong> I'm wasting time on so much unimportant tiny things, can't focusing.</li>        <li><strong>20:27 Cooking, messaging with mom, wasting time on [ muse ]-[ reflecting ].</strong></li>        <li><strong>20:50 Eating, wasting time on [ muse ]-[ reflecting ].</strong></li>        <li><strong>21:05 Taking shower, brushing teeth.</strong></li>        <li><strong>21:42 Thinking of javascript:</strong> Including <code>let</code> inside <code>for</code> block and <code>setTimeout()</code> ; 3 arguments of <code>array.filter()</code>, <code>array.map()</code>, <code>array.find()</code> ,, callback ; 4 arguments of <code>array.reduce()</code> ,, callback.</li>        <li><strong>22:05 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-07-23<a id="id190723m060900"></a></h2>  <div class="kwCloud">    <div class="itm s2">First day of working at { 圍棋人科技股份有限公司 }-{ Goer }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>06:05 Wake up.</strong></li>        <li><strong>06:15 Get on the bus.</strong></li>      </ol>    </li>  </ol></div><hr><div class="h2">  <h2>2019-07-xx<a id="xx"></a></h2>  <div class="kwCloud">    <div class="itm s1">??</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Finding job</div>    <div class="itm s1">{ GSAP }</div>    <div class="itm s1">Exercising</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Front-end</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ lahSale }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>?? Wake up.</strong></li>        <li><strong>?? Go exercising.</strong></li>        <li><strong>?? Uploading blog.</strong></li>        <li><strong>?? Cooking.</strong></li>        <li><strong>?? Eating.</strong></li>      </ol>    </li>    <li><strong>:</strong> <a href>Link</a>.</li>  </ol></div><hr><div class="facetList">Cmm: u190701m074556 x88lost x88fs c88log log88table c88currentCurrent: ti88crr88y19 ti88crr88y19dw1 ti88crr88y19m07 ti88crr88y19m07d01 ti88crr88y19m07dw1 ti88crr88y19q3 ti88crr88y19q3dw1 ti88crr88y19w27 ti88crr88y19w27dw1Time (d): ti88y19 ti88y19dw1 ti88y19m07 ti88y19m07d01 ti88y19m07dw1 ti88y19q3 ti88y19q3dw1 ti88y19w27 ti88y19w27dw1</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190601 ( Log table ) 2019-06</title>
      <link href="/treegbBlog/19/06/01/190601m112844/"/>
      <url>/treegbBlog/19/06/01/190601m112844/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-06:</strong> <a href="#id190601m113246">Section</a>.</li>    <li><strong>2019-06-01:</strong> <a href="#id190601m113214">Section</a>.</li>    <li><strong>2019-06-02:</strong> <a href="#id190602m020956">Section</a>.</li>    <li><strong>2019-06-03:</strong> <a href="#id190603m013911">Section</a>.</li>    <li><strong>2019-06-04:</strong> <a href="#id190604m022305">Section</a>.</li>    <li><strong>2019-06-05:</strong> <a href="#id190605m004800">Section</a>.</li>    <li><strong>2019-06-06:</strong> <a href="#id190606m031912">Section</a>.</li>    <li><strong>2019-06-07:</strong> <a href="#id190607m014418">Section</a>.</li>    <li><strong>2019-06-08:</strong> <a href="#id190608m014429">Section</a>.</li>    <li><strong>2019-06-09:</strong> <a href="#id190609m004119">Section</a>.</li>    <li><strong>2019-06-10:</strong> <a href="#id190609m233229">Section</a>.</li>    <li><strong>2019-06-11:</strong> <a href="#id190611m000521">Section</a>.</li>    <li><strong>2019-06-12:</strong> <a href="#id190612m004637">Section</a>.</li>    <li><strong>2019-06-13:</strong> <a href="#id190613m012627">Section</a>.</li>    <li><strong>2019-06-14:</strong> <a href="#id190614m055757">Section</a>.</li>    <li><strong>2019-06-15:</strong> <a href="#id190615m004054">Section</a>.</li>    <li><strong>2019-06-16:</strong> <a href="#id190616m003513">Section</a>.</li>    <li><strong>2019-06-17:</strong> <a href="#id190616m235556">Section</a>.</li>    <li><strong>2019-06-18:</strong> <a href="#id190618m002017">Section</a>.</li>    <li><strong>2019-06-19:</strong> <a href="#id190619m001040">Section</a>.</li>    <li><strong>2019-06-20:</strong> <a href="#id190620m000034">Section</a>.</li>    <li><strong>2019-06-21:</strong> <a href="#id190621m001018">Section</a>.</li>    <li><strong>2019-06-22:</strong> <a href="#id190621m235821">Section</a>.</li>    <li><strong>2019-06-23:</strong> <a href="#id190623m080746">Section</a>.</li>    <li><strong>2019-06-24:</strong> <a href="#id190624m000326">Section</a>.</li>    <li><strong>2019-06-25:</strong> <a href="#id190625m081800">Section</a>.</li>    <li><strong>2019-06-26:</strong> <a href="#id190626m000021">Section</a>.</li>    <li><strong>2019-06-27:</strong> <a href="#id190627m000749">Section</a>.</li>    <li><strong>2019-06-28:</strong> <a href="#id190628m003145">Section</a>.</li>    <li><strong>2019-06-29:</strong> <a href="#id190629m075304">Section</a>.</li>    <li><strong>2019-06-30:</strong> <a href="#id190630m073230">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-06<a id="id190601m113246"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Stoicism }</div>    <div class="itm s1">Virtue</div>    <div class="itm s4">{ Hallucination }-[ Point of view ]</div>    <div class="itm s2">External and internal motivation</div>    <div class="itm s3">Seeing bigger picture and the "form"</div>    <div class="itm s1">Learning systematically (book)</div>    <div class="itm s1">Finding { Methodology }</div>    <div class="itm s1">Finding { Design Pattern }</div>    <div class="itm s3">Methodology ,, { SOLID } principle</div>    <div class="itm s3">{ Functional Programming }-{ Paradigm }</div>    <div class="itm s2">Simplicity - dealing with complexity elephant</div>    <div class="itm s1">{ Object Composition } over { Inheritance }</div>    <div class="itm s1">{ Function Composition }</div>    <div class="itm s1">"State" always causing "side effect"</div>    <div class="itm s1">{ Dependency Injection } ,, custom "dependency manager"</div>    <div class="itm s2">{ Corenet }</div>    <div class="itm s1">Front-end</div>    <div class="itm s1">Front-end ecosystem</div>    <div class="itm s1">{ Webpack }</div>    <div class="itm s1">{ LoveAndHappiness}-{ lahSale }</div>    <div class="itm s2">Javascript</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ MongoDB }</div>    <div class="itm s1">Database schema</div>    <div class="itm s1">{ PATCH } vs { PUT } method</div>    <div class="itm s2">{ Atomic Design }-{ modularization }</div>    <div class="itm s1">Drawing ,, seeing "essential" under surface</div>    <div class="itm s1">Music composition</div>    <div class="itm s2">Music Theory</div>    <div class="itm s1">{ JYP }-{ Park Jin young }</div>    <div class="itm s3">{ Twice }</div>    <div class="itm s1">Intimate relationship</div>    <div class="itm s2">[ Personality ]-[ real ]-[ true ]-[ honest ]-[ consistent ]-[ open ]-[ frank ]-[ plain ]</div>    <div class="itm s1">[ Art ]-[ graphic design ]</div>    <div class="itm s1">{ Vue Router }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">{ Accessibility }</div>    <div class="itm s1">Unit Test vs Integration Test</div>    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">Wasting time</div>    <div class="itm s1">Boring</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>190601:</strong>          <ol>            <li><strong>( Music ) { Produce 48 } - Rumor - karaoke:</strong> <a href="https://youtu.be/szSIpCLwxNE" target="_blank" rel="noopener">Link</a>. Better for focusing and studying.</li>            <li><strong>Playing { game }-{ Zero-k }:</strong> Playing game all day long, non-stoped, even passed midnight.</li>            <li><strong>Re-making new "tree classification system" to replace previous { facet system}.</strong></li>          </ol>        </li>        <li><strong>190602:</strong>          <ol>            <li><strong>( Music ) { Tobu } - Sound of Goodbye:</strong> <a href="https://youtu.be/goRGKll_zE0" target="_blank" rel="noopener">Link</a>. <strong>Peace feeling</strong>, ideal for focusing and studying.</li>            <li><strong>Working on { corenet },, back-end ,, thinking about "tree classification system" and doing database schema.</strong></li>            <li><strong>Playing { game }-{ Zero-k }.</strong></li>          </ol>        </li>        <li><strong>190603:</strong>          <ol>            <li><strong>( Music ) { Tobu } - Sound of Goodbye:</strong> <a href="https://youtu.be/goRGKll_zE0" target="_blank" rel="noopener">Link</a>. <strong>Peace feeling</strong>, ideal for focusing and studying.</li>            <li><strong>( MongoDB ) Things I wish I knew before I started working with Mongodb:</strong> ... .</li>          </ol>        </li>        <li><strong>190604:</strong>          <ol>            <li><strong>關於自學的陷阱 - 如何有效率的的自學任何專業領域?.</strong></li>            <li><strong>Drawing ,, seeing "essential" under surface.</strong></li>            <li><strong>Talking with Woody.</strong></li>            <li><strong>Music composition.</strong></li>          </ol>        </li>        <li><strong>190605:</strong>          <ol>            <li><strong>( Philosophy ) ( Stoicism ) Hold the optimism in the pessimism - { Pursuit of Wonder }:</strong> <a href="https://youtu.be/4OhwxgR3g5g" target="_blank" rel="noopener">Link</a>. --{ ... we find the optimism in the pessimism. }-- ... holding 2 conflicting model ... .</li>            <li><strong>( Music ) { ITZY } - DALLA DALLA:</strong> <a href="https://youtu.be/pNfTK39k55U" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>MongoDB, CSS, Bootstrap.</strong></li>          </ol>        </li>        <li><strong>190606:</strong>          <ol>            <li><strong>{ Methodology }-{ Atomic Design }-{ modularization }:</strong> ... .</li>            <li><strong>{ Bootstrap },{ lahSale }.</strong></li>          </ol>        </li>        <li><strong>190607:</strong>          <ol>            <li><strong>( Music ) Blackpink - Forever Young:</strong> ... .</li>            <li><strong>( Vue ) { Vue Router }.</strong></li>            <li><strong>{ Bootstrap } [ installation ]-[ trouble shooting ].</strong></li>          </ol>        </li>        <li><strong>190608:</strong>          <ol>            <li><strong>Design pattern and Design pattern for Javascript:</strong> ... .</li>            <li><strong>( MongoDB ) About different searching approach:</strong> ... .</li>          </ol>        </li>        <li><strong>190609:</strong>          <ol>            <li><strong>Music, { Corenet }, Back-end, { Vue.js }, { Bootstrap }, { Woody }.</strong></li>          </ol>        </li>        <li><strong>190610:</strong>          <ol>            <li><strong>( Music ) Goblin - Original Soundtrack - Round And Round (Never Far Away Full Ver.):</strong> ... .</li>            <li><strong>( Inspiration ) 創意的三大要素 - { 抖抖村 }:</strong> <a href="https://youtu.be/C6UNHHRzlc0" target="_blank" rel="noopener">Link</a>. 1. 大量吸收知識識 (基於現實) 2. 發散思考 (新東西) 3. 收斂思考 (有價值的東西). // 繪畫學習的三個階段 - 1. 兒童般的亂畫 (全發散思考) 2. 系統規範的繪畫 (全收斂思考) 3. 突破規範的 "童貞" (發散 + 收斂)。</li>          </ol>        </li>        <li><strong>190611:</strong>          <ol>            <li><strong>( Music ) Sad feeling collection:</strong> ... .</li>            <li><strong>( Music composition ) { NiceChord 好和弦 } - 一次搞懂，在家做音樂需要的基本配備:</strong> <a href="https://youtu.be/o2Q0l5xbZfw" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>{ Corenet } ,, making { postManager }:</strong> "edit mode".</li>          </ol>        </li>        <li><strong>190612:</strong>          <ol>            <li><strong>( Programming ) ( Methodology ) "SOLID" principle:</strong> ... .</li>            <li><strong>( Accessibility ) Web Accessibility evaluation tool and { NCC }:</strong> ...</li>            <li><strong>HTML { input types }, { Date picker }, { Time picker }:</strong> ...</li>            <li><strong>{ Corenet } ,, back-end ,, write PUT logic:</strong> This is the first PUT logic I wrote in { corenet }. I'm doing very slow.</li>          </ol>        </li>        <li><strong>190613:</strong>          <ol>            <li><strong>( Programming ) ( Methodology ) "SOLID" principle:</strong> ... .</li>            <li><strong>Javascript.</strong></li>          </ol>        </li>        <li><strong>190614:</strong>          <ol>            <li><strong>( Javascript ) Object { Composition } over Class { Inheritance }.</strong></li>            <li><strong>( Javascript ) Factory Functions vs Constructor Functions vs Classes.</strong></li>            <li><strong>( Javascript ) { Prototype }.</strong></li>          </ol>        </li>        <li><strong>190615:</strong>          <ol>            <li><strong>Javascript</strong></li>            <li><strong>( Javascript ) Object { Composition } over Class { Inheritance }.</strong></li>            <li><strong>( Javascript ) Factory Functions vs Constructor Functions vs Classes.</strong></li>            <li><strong>{ Functional Programming }.</strong></li>          </ol>        </li>        <li><strong>190616:</strong>          <ol>            <li><strong>Javascript</strong></li>            <li><strong>Testing { Object Composition }:</strong> With <code>Object.assign</code> and <code>closure</code>.</li>            <li><strong>Learning { Function Composition }:</strong> Learning writting [ clean ],[ dense ] code with { Function Composition }.</li>            <li><strong>{ Functional Programming }.</strong></li>          </ol>        </li>        <li><strong>190617:</strong>          <ol>            <li><strong>{ Functional Programming }.</strong></li>            <li><strong>{ Function Composition }:</strong> { Function Composition } is not as same as { Object Composition }.</li>            <li><strong>{ Design pattern }-{ Javascript }.</strong></li>            <li><strong>{ Javascript }-{ data type }.</strong></li>          </ol>        </li>        <li><strong>190618:</strong>          <ol>            <li><strong>{ Functional Programming }.</strong></li>            <li><strong>{ Corenet }.</strong></li>          </ol>        </li>        <li><strong>190619:</strong>          <ol>            <li><strong>{ Functional Programming }:</strong> "Side effects", "Immutability".</li>            <li><strong>{ Corenet }.</strong></li>            <li><strong>Javascript.</strong></li>            <li><strong>Music theory, Music composition.</strong></li>          </ol>        </li>        <li><strong>190620:</strong>          <ol>            <li><strong>( Javascript ) ( Front-end ) Javascript ecosystem fundamental knowledge - Alex Tzeng, 曾苔眠:</strong> <a href="https://ithelp.ithome.com.tw/users/20107440/ironman/1355?page=1" target="_blank" rel="noopener">JavaScript - JS 生態系及週邊工具整理 系列</a>. 系列文。<strong>讓我大幅的了解整個生態系統，和 bigger picture。</strong> 我一開始只是想知道 common.js 是什麼東西，結果發現愈挖愈多東西，於是想要趁機 [ 補充一下自己常識的不足 ],[ 增加自己的視野 ] ,, 關於 Front-end 的整個生態系統。 // Including Npm, ES6 module, Common.js, require.js, Webpack, Babel, Vue.js ... . // This article series were published around <strong>2017-12, are current enough</strong> ... .</li>          </ol>        </li>        <li><strong>190621:</strong>          <ol>            <li><strong>Tired, low energy, wasting time, boring.</strong> Wasting a lot of time because of tired and low energy (due to unormal sleeping time). // Also feeling boring about programming, I currently can't actually do any application for some real useful stuff, also I found side project of people are also really boring too, always doning the same thing again and again, Twitter bots, Weather App, todo list, solving math problem ... these are sounds like disconnected with real word.</li>            <li><strong>{ ISO 8601 } - { Moment.js } - date and time.</strong> <a href>Link</a>.</li>            <li><strong>( Vue.js ) Debugging in { Vue.js }.</strong></li>          </ol>        </li>        <li><strong>190622:</strong>          <ol>            <li><strong>{ Stoicism } - 柯文哲.</strong> </li>            <li><strong>Simplicity - dealing with complexity elephant.</strong> </li>            <li><strong>Newbie can join many open source project.</strong></li>            <li><strong>{ Front-end } and { back-end }.</strong></li>            <li><strong>"State" always causing "side effect":</strong> { PATCH } vs { PUT } method.</li>          </ol>        </li>        <li><strong>190623:</strong>          <ol>            <li><strong>( Thought ) ( Hallucination ) ( Stoicism ) [ Point of view ]-[ perspective ] - optimistic or pessimistic? - good or bad? - meaningful or meaningless?</strong></li>            <li><strong>{ Corenet }.</strong></li>          </ol>        </li>        <li><strong>190624:</strong>          <ol>            <li><strong>Intimate relationship - { Twice }.</strong></li>            <li><strong>[ Personality ]-[ real ]-[ true ]-[ honest ]-[ consistent ]-[ open ]-[ frank ]-[ plain ].</strong></li>            <li><strong>{ Corenet }:</strong> PUT logic, accross back-end including <code>controller</code> and <code>model</code>, and front-end.</li>          </ol>        </li>        <li><strong>190625:</strong>          <ol>            <li><strong>{ Corenet }:</strong> <code>PUT</code> logic of <u>post</u> done. Starting to think about <strong><code>POST</code></strong> logic of <u>post</u> now.</li>            <li><strong>Unit Test vs Integration Test, [ HTTP ]-{ CORS }:</strong> <a href>Link</a>.</li>          </ol>        </li>        <li><strong>190626:</strong>          <ol>            <li><strong>{ Corenet }:</strong> Front-end ,, "new post" related work.</li>            <li><strong>{ Dependency Injection } ,, custom "dependency manager".</strong>.</li>          </ol>        </li>        <li><strong>190627:</strong>          <ol>            <li><strong>{ Corenet }:</strong> Front-end ,, "new post" related work.</li>            <li><strong>( Psychology ) { Cognitive Evaluation Theory } - External and internal [ motivation ]-[ incentive ] system.</strong>.</li>          </ol>        </li>        <li><strong>190628:</strong>          <ol>            <li><strong>{ Corenet }:</strong> Front-end ,, "delete post" related work, and makes "messenger" have "dialog" functionality.</li>            <li><strong>( Music ) TWICE - Nayeon - Only Longing Grows - cover:</strong> A nostalgic song that makes you want to cry without any reason. ... .</li>            <li><strong>[ Thinking ]-[ planning ] about Portfolio:</strong> 歸納出，構成好看的網頁的幾個關鍵要素 (按照重要性) - 豐富的資訊 (資料)，好看的圖片及視覺設計，正確的排版 (以及創意的排版方式)，動畫。</li>          </ol>        </li>        <li><strong>190629:</strong>          <ol>            <li><strong>( Music ) TWICE - Nayeon - Only Longing Grows - cover:</strong> A nostalgic song that makes you want to cry without any reason. ... .</li>            <li><strong>( Art ) [ 藝術 ]-[ 設計 ] 的本質還是一樣:</strong> 想辦法玩出 [ 非預期 ]-[ 動 ] 的效果。效果是什麼不重要，有沒有意義不重要，只要是 [ 非預期 ]-[ 動 ] 就會看起來很特別。 ... .</li>            <li><strong>[ Thinking ]-[ planning ] about Portfolio:</strong> 歸納出，構成好看的網頁的幾個關鍵要素 (按照重要性) - 豐富的資訊 (資料)，好看的圖片及視覺設計，正確的排版 (以及創意的排版方式)，動畫。 // 開始大量參考各式各樣的網頁設計 (資訊，圖片及視覺設計，排版)，準備之後開始模仿。// 搜尋其他人準備作品集和面試的經驗。</li>          </ol>        </li>        <li><strong>190630:</strong>          <ol>            <li><strong>Portfolio and Resume:</strong> research what to put inside Portfolio, to have correct direction, and to save time later. // Designing Portfolio site. // I'm working damn slow on graphic design. I should see and reference more works from others, before I have the sense to do my own creation.</li>          </ol>        </li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-01<a id="id190601m113214"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Corenet } ,, new tree classification system</div>  </div>  <ol>    <li><strong>( Music ) { Produce 48 } - Rumor - karaoke:</strong> <a href="https://youtu.be/szSIpCLwxNE" target="_blank" rel="noopener">Link</a>. Better for focusing and studying.</li>    <li><strong>( Music ) { Produce 48 } - Rumor - bass boosted:</strong> <a href="https://youtu.be/jmkeeKdJToQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>柯文哲 - 不怕被公開自己所有事情 - 坦蕩蕩:</strong> <a href="https://youtu.be/0gtwCyH4bi0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Re-making new "tree classification system" to replace previous { facet system}:</strong> Abandon old <strong>"facet"</strong> concept that always use a (or multiple) <strong>"key::value"</strong> pair, to [ interpret ],[ describe ] a [ concept ]-[ context ], now the new "classification" system will use <strong>strict tree structure</strong> system to [ interpret ],[ describe ] a [ concept ]-[ context ]. There are going to have multiple { Path } for a { Post }, each path is unique [ in ]-[ for ] both this { Post } and the source "classification tree". // For example, in the past I will [ interpret ],[ describe ] a post with following facets - <code>c::software</code>, <code>software::database</code>, <code>database::application</code>, <code>application::mongoDB</code>, <code>c::programming</code>, <code>programming::language</code>, <code>language::javascript</code> (7 facets). But now it will be [ interpret ],[ describe ] like this - <code>software/database/application/mongoDB</code>, <code>programming/language/javascript</code> (2 path) (it is possible 2 path be on 1 tree, but for this case, it's 2 path on 2 tree). In this way, I get many advantage. <strong>First</strong>, <strong>ambiguous</strong> problem (should <code>firework::price</code> implies <code>adobe/firework/price</code> or <code>explosive/firework/price</code>?) is no longer the case (since a { path } defines a [ individual ]-[ complete ] context). <strong>Second</strong>, easy to manage and <strong>remember</strong>, user don't need to [ add ]-[ save ] multiple facets combination manually (like <code>database::mongoDB</code> or <code>programming::javascript</code> or even more middle combination) and don't need to remember the <strong>exact hierarchy</strong> of those nodes, since [ with ]-[ after ] new [ concept ]-[ system design ], even user input <code>software/mongoDB</code>, or even simply <code>mongoDB</code> will get the results. <strong>Third</strong>, the serching becomes very <strong>flexible</strong>, user can use <code>software</code> to get very [ board ]-[ rough ]-[ many ] resuts (of related posts), or either of one of <code>software/database/application/mongoDB</code>, <code>database/mongoDB</code>, <code>software/mongoDB</code>, <code>mongoDB</code> to get very [ narrowed down ]-[ few ] results, very flexible while still user friendly. // This new [ system ]-[ concept ] hugely improve the user experience (and reduce cognitive load) when serching, and managing those meta data.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:00 Playing { game }-{ Zero-k }:</strong> Playing game all day long, non-stoped, even passed midnight.</li>        <li><strong>03:45 Sleep:</strong> Stay up late again, second day. It have been quite some time I did this last time.</li>        <li><strong>11:10 Wake up.</strong></li>        <li><strong>11:11 Upload blog.</strong></li>        <li><strong>12:00 Watching video, cooking:</strong> <a href="https://youtu.be/ItykyRdBTHE" target="_blank" rel="noopener">Islamist Militants on Israel's Doorstep: The War Next Door</a>.</li>        <li><strong>14:40 Start to working on { corenet }:</strong> My CMS. Set up server side and client side.</li>        <li><strong>14:56 Take a nap.</strong></li>        <li><strong>15:40 Wake up, thinking about the structure of { corenet }.</strong></li>        <li><strong>15:53 Buying drinks:</strong> Good, knowing where to start. Start to emerge the figure of what the first prototype of { corenet } looks like.</li>        <li><strong>16:05 Watching video:</strong></li>        <li><strong>16:20 Downloading music:</strong> Listening when coding.</li>        <li><strong>16:30 Start to working on { corenet }:</strong> My CMS. Set up server side and client side.</li>        <li><strong>16:35 Bathroom.</strong></li>        <li><strong>16:40 Working on { corenet }:</strong> Installing { boostrap }. Creating basic directories and files.</li>        <li><strong>17:20 Working on { corenet },, back-end ,, setting up { MVC } structure.</strong></li>        <li><strong>17:50 Brushing teeth, dancing with music.</strong></li>        <li><strong>18:10 Working on { corenet },, back-end ,, working on database schema ,, { post },{ facet } { collection }:</strong> Encounter problem of designing [ different ]-[ new ] facet system, a basic "key:value" pair for a single facet, will be functional, but not [ prefect ]-[ idea ]. This is related more of a symantic problem, less of a database schema problem. Still not figure out it yet.</li>        <li><strong>19:50 Cooking.</strong></li>        <li><strong>20:30 Eating, [ deeply ]-[ very focused on ] re-making new "tree classification system" to replace { facet system}.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-02<a id="id190602m020956"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Database schema</div>  </div>  <ol>    <li><strong>( Music ) { Tobu } - Sound of Goodbye:</strong> <a href="https://youtu.be/goRGKll_zE0" target="_blank" rel="noopener">Link</a>. <strong>Peace feeling</strong>, ideal for focusing and studying.</li>    <li><strong>( Music ) { Miss A } - Hush - instrumental:</strong> <a href="#">Link</a>.</li>    <li><strong>( Music ) { Produce 48 } - Rumor - karaoke:</strong> <a href="https://youtu.be/szSIpCLwxNE" target="_blank" rel="noopener">Link</a>. Better for focusing and studying.</li>    <li><strong>( Music ) { Produce 48 } - Rumor - bass boosted:</strong> <a href="https://youtu.be/jmkeeKdJToQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) { Const } != immutable:</strong> <a href="https://medium.com/dailyjs/use-const-and-make-your-javascript-code-better-aac4f3786ca1" target="_blank" rel="noopener">Link</a>. A variable is like a pointer to a value (it’s a pointer for objects, it’s an assigned value for primitives). const prevents the variable to be assigned to another value. We could say it makes the pointer immutable, but it doesn’t make the value immutable too! // However, I don't see I get too much benefits of using <code>cost</code> so I rather not to use them, we just can't get rid of the problem that we have to use <code>var</code> in some (many) cases.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>02:10 End of thinking new "tree classification system", watching video.</strong></li>        <li><strong>02:11 Playing { game }-{ Zero-k }:</strong> Spectating a team match.</li>        <li><strong>02:55 Sleep.</strong></li>        <li><strong>07:50 Wake up:</strong> Still lack of 3 hours of sleep.</li>        <li><strong>08:00 Upload blog.</strong></li>        <li><strong>08:10 Working on { corenet },, back-end ,, thinking about "tree classification system":</strong> Question: Why do I need more than one tree? Why I don't just put everyting under one tree? Can a tree have a very deep level (like 20 level), will this hurt the performance? Answer: You can make a tree as deep as you want, it will have very little performance impact on <strong>read</strong> (thought it hurt <strong>write</strong> a lot but it is not the problem here) as long as you don't repeatedly use too much same tree node name in deeper level, but if you use too much <strong>same tree node name</strong> in <strong>deeper level</strong>, it starts to hurt performance, you should avoid this, you should migrate it to upper level (<strong>can be in same tree, or another tree</strong>, it's up to you and where fits the tree shape best), this also makes it easier for you to manage.</li>        <li><strong>09:50 Watching video.</strong></li>        <li><strong>10:20 Misc.</strong></li>        <li><strong>11:20 Sleep.</strong></li>        <li><strong>14:30 Wake up.</strong></li>        <li><strong>14:40 Cleaning room.</strong></li>        <li><strong>14:50 Grocery.</strong></li>        <li><strong>15:05 Cooking.</strong></li>        <li><strong>15:15 { Pulling } from { lahSale }.</strong></li>        <li><strong>15:35 Eating, watching video:</strong> <a href="https://youtu.be/__UlbZcS2nU" target="_blank" rel="noopener">{ Twice } - SIXTEEN Ep 3 - Dahyun 1v1 Dance Cut</a>, <a href="https://youtu.be/SfvRhqsmU4o" target="_blank" rel="noopener">(AI) NVIDIA’s AI Transformed My Chihuahua Into a Lion</a>, <a href="https://youtu.be/xdSkoq99QNo" target="_blank" rel="noopener">{ The News Lens } - 余杰：多數台灣人在和平與自由的環境生活太久｜國際大風吹｜EP56</a>.</li>        <li><strong>16:30: Take a quick glance about { lahSale }-{ purchase_customer } part:</strong> Finding <code>info graphics</code> for inspiration.</li>        <li><strong>17:27: Talking with Woody:</strong> No need to do further special [ visual ]-[ graphic ] design at the moment, use bootstrap style.</li>        <li><strong>17:43: Listening to music:</strong> <a href="#"> { Miss A } - Hush - instrumental</a>.</li>        <li><strong>17:50 Working on { corenet },, back-end ,, creating database schema:</strong> Make a testing script that use <code>node</code> and <code>mongoose</code> to help me do simple CRUD testing, because doing CRUD testing with <code>MongoDB shell</code> is not very convenient and I can't use callback function with that and it can't test <code>Mongoose</code> thing.</li>        <li><strong>21:55 Cooking:</strong> Database <code>collection</code> <code>classTree</code> ,, schema, is set, but this all just at beginning, I set it one by one manually, very slow process and error prone.</li>        <li><strong>22:20 Eating, watching video, eating fruit:</strong> Mostly about <code>Twice</code>. <a href="https://youtu.be/LVF9L7dc-RE" target="_blank" rel="noopener">Mina TWICE Childhood | From 1 To 20 Years Old</a>.</li>        <li><strong>23:55 Working on { corenet },, back-end ,, creating database schema:</strong> Dealing with <code>Mongoose</code> schema validation and validator. Not yet finished.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-03<a id="id190603m013911"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Database schema</div>    <div class="itm s1">{ MongoDB }</div>    <div class="itm s1">{ lahSale }</div>  </div>  <ol>    <li><strong>( Music ) { Coldplay } - A Sky Full of Stars - covered by { The Piano Guys }:</strong> <a href="https://youtu.be/qrHFg47Mopk" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Tobu } - Sound of Goodbye:</strong> <a href="https://youtu.be/goRGKll_zE0" target="_blank" rel="noopener">Link</a>. <strong>Peace feeling</strong>, ideal for focusing and studying.</li>    <li><strong>( MongoDB ) Things I wish I knew before I started working with Mongodb:</strong> <a href="https://codeburst.io/things-i-wish-i-new-before-i-started-working-with-mongodb-c089d4b593db" target="_blank" rel="noopener">Link</a>. Including using { cursor }-{ stream } to prevent memory huge consumption, using { populate() } to linking documents from different collections, <a href="https://scalegrid.io/blog/fast-paging-with-mongodb/" target="_blank" rel="noopener">prevent low efficiency { Pagination }</a> ... .</li>    <li><strong>( Drawing ) 簡介不同等級的繪畫技能 [ 實力 ]-[ 段位水平 ] - 瓶頸:</strong> <a href="https://youtu.be/61Fv1MA7agw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Drawing ) { 臨摹 } 和 { 透視 } 基礎對於繪畫的重要性:</strong> <a href="https://youtu.be/b1bFcIM8LoY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( JQuery ) How to get nth item of id/class - { .eq() }:</strong> <a href="https://stackoverflow.com/questions/15481510/jquery-nth-item-of-id-class" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( JQuery ) How to animate scroll in jQuery - { .animate() }:</strong> <a href="https://howchoo.com/g/yjfjmty1zjb/how-to-animate-scroll-in-jquery" target="_blank" rel="noopener">Link</a>. Notice, you have to use both <code>$("html, body")</code> for browser compatibility problem. I found using <code>$("body")</code> or <code>$(window)</code>not working ((at least)) on firefox.</li>    <li><strong>( JQuery ) { .animate() } not working on background-color property:</strong> <a href="https://stackoverflow.com/questions/34838286/jquery-animate-not-working-on-background-color-property?lq=1" target="_blank" rel="noopener">Link</a>. --{ Background Color is not a numeric property and so it cannot be animated using .animate(). }--.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:45 Sleep.</strong></li>        <li><strong>09:50 Wake up.</strong></li>        <li><strong>09:55 Upload blog.</strong></li>        <li><strong>10:05 Watching video:</strong> <a href="https://youtu.be/GDt1EULp27U?t=215" target="_blank" rel="noopener">{ Twice }-[ time stopped ]-{ Signal }</a>.</li>        <li><strong>10:55 Doing research about { ObjectId} in { Mongoose }.</strong></li>        <li><strong>11:05 Cooking, eating, keep working on { ObjectId}.</strong></li>        <li><strong>12:00 Testing { ObjectId} in { Mongoose } instead of { MongoDB shell }.</strong></li>        <li><strong>13:10 Reading article about { MongoDB }:</strong> { Atomicity } and { Transactions }.</li>        <li><strong>13:30 Eating fruit, brushing teeth, bathroom.</strong></li>        <li><strong>14:00 Reading article about { MongoDB }:</strong> { Aggregation }, { Cursor }-{ Stream } to solve large memory consumption problem. </li>        <li><strong>16:35 Cooking.</strong></li>        <li><strong>17:10 Eating, Reading article about { MongoDB }, brushing teeth.</strong></li>        <li><strong>17:35 Keep Reading article about { MongoDB }:</strong> <a href="https://www.mongodb.com/blog/post/the-mean-stack-mistakes-youre-probably-making" target="_blank" rel="noopener">The MEAN Stack: Mistakes You're Probably Making With MongooseJS, And How To Fix Them</a>. Not too helpful.</li>        <li><strong>17:53 Watching video, misc.</strong></li>        <li><strong>19:15 Working on { lahSale }.</strong></li>        <li><strong>22:55 { lahSale } ,, Found bug:</strong> I forget to <code>removeEventListener</code> on <code>resize</code> event too. Last time is <code>scroll</code> event. This bug cost me 2 hours to found it.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-04<a id="id190604m022305"></a></h2>  <div class="kwCloud">    <div class="itm s1">如何自學任何專業領域？</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ MVC }</div>    <div class="itm s1">Drawing ,, seeing "essential" under surface</div>    <div class="itm s1">Music composition</div>  </div>  <ol>    <li><strong>{ 空屋筆記-免費的自由 } - 為什麼我這麼討厭花錢?:</strong> <a href="https://www.facebook.com/noteinruin/photos/a.327977900714909/1207105662802124/?type=3&theater" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Drawing ) { 抖抖村 } - 關於自學的陷阱 - 如何有效率的的自學任何專業領域?:</strong> <a href="https://youtu.be/jTXjHCl8tlQ" target="_blank" rel="noopener">Link</a>. 2 個互相違背的思維模式要同時存在，過度依賴任何一個都不行 (雖然 2 者是互相衝突的思維模式) - 1. 長時間自己摸索，自我反饋，自創，突破，而不要抄襲，參考和信任大部分的資訊。2. 找到對的，系統性的資源，模仿抄襲，而不要自己摸索。所以不僅要有主觀判斷的思維，還要有客觀判斷的思維。</li>    <li><strong>( Drawing ) { 抖抖村 } - 為什麼素描要學骨骼和肌肉結構?:</strong> <a href="https://youtu.be/ojFiUkhx3pw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music composition ) { iPianoDude } - Twice - Fancy:</strong> <a href="https://youtu.be/2tyK7dEVwxI" target="_blank" rel="noopener">Link</a>. Very complex, natural, abundant, and amazing.</li>    <li><strong>( Music composition ) { iPianoDude } - Twice - TT:</strong> <a href="https://youtu.be/w5dwkStCWto" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music composition ) { iPianoDude } - Twice - YES or YES:</strong> <a href="https://youtu.be/eTN2PZOs2v4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music composition ) { iPianoDude } - ITZY - DALLA DALLA:</strong> <a href="https://youtu.be/auQKWbH-irs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { TWICE } - Fancy - pixel game style art:</strong> <a href="https://youtu.be/diSAhGEvah8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Way Back Home - Violin & Flute - Cover by 2COLOR:</strong> <a href="https://youtu.be/5tmFAw9F2uQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Blackpink - Forever Young - dance:</strong> <a href="https://youtu.be/89kTb73csYg" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Trim specific character from a string, instead of just whitespace:</strong> <a href="https://stackoverflow.com/questions/26156292/trim-specific-character-from-a-string" target="_blank" rel="noopener">Link</a>. I'm surprised about javascript <code>trim()</code> can't do this (it don't accept any arguments). Also <code>lodash</code> don't have this kind of function too.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:35 Taking shower:</strong> Finished progress of { lahSale } - 1. Apply scrollSpy onto purchase_customer.vue 2. Visual update with woody.</li>        <li><strong>02:20 Watching video.</strong></li>        <li><strong>02:35 Sleep.</strong></li>        <li><strong>10:45 Wake up.</strong></li>        <li><strong>10:53 { lahSale } ,, pull request, fixing a visual bug.</strong></li>        <li><strong>11:20 Preparing ingredient.</strong></li>        <li><strong>11:28 Uploading blog.</strong></li>        <li><strong>11:35 Wasting time on reflecting.</strong></li>        <li><strong>11:53 Cooking.</strong></li>        <li><strong>12:05 Working on { Corenet }.</strong></li>        <li><strong>12:25 Eating, searching about { Express.js }-{ route }.</strong></li>        <li><strong>12:40 Misc, messaging with { Pollash }.</strong></li>        <li><strong>13:00 Searching how to use { Express.js }-{ route }-{ regular expression }:</strong> There is a wierd "bug" that the dot character (<code>.</code>) of <code>regular expression</code> don't works in express router, but <code>[a-zA-Z0-9]</code> works.</li>        <li><strong>15:35 Eating fruit, watching video, brushing teeth.</strong></li>        <li><strong>16:00 Grocery, buying drinks, renting bills.</strong></li>        <li><strong>16:30 Watching video.</strong></li>        <li><strong>19:50 Working on { Corenet } ,, { route }:</strong> Progressing very slow, just for checking if route match is some type of pattern it cost so much time than I thought.</li>        <li><strong>22:10 Cooking.</strong></li>        <li><strong>22:25 Watching video, eating:</strong> Mostly is about <u>music composition</u>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-05<a id="id190605m004800"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Stoicism }</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ MongoDB }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s2">{ Woody }</div>    <div class="itm s1">{ Css }</div>    <div class="itm s1">{ Bootstrap }</div>  </div>  <ol>    <li><strong>( Philosophy ) ( Stoicism ) Hold the optimism in the pessimism - { Pursuit of Wonder }:</strong> <a href="https://youtu.be/4OhwxgR3g5g" target="_blank" rel="noopener">Link</a>. --{ ... we find the optimism in the pessimism. }--. // Stoicism is about pessimistic about [ reality ]-[ facts ]-[ real world ], [ and ]-[ but ] optimistic with optimistic inner attitude facing these unfortunate at the same time. Stoicism require you to <strong>hold these 2 conflicting model</strong> in the same time, it is hard, but it is also so real and indeed a good model.</li>    <li><strong>( Music ) { ITZY } - DALLA DALLA:</strong> <a href="https://youtu.be/pNfTK39k55U" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { ITZY } - DALLA DALLA - Piano cover by { DooPiano } - acoustic:</strong> <a href="https://youtu.be/AVv7XNQyzIU" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( MongoDB ) What is { Sharding }? - Vertical and horizontal database scaling:</strong> <a href="https://geekflare.com/mongodb-sharding-best-practices/" target="_blank" rel="noopener">Link</a>. <a href="https://docs.mongodb.com/v4.0/sharding/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( MongoDB ) { "_id" Field } - What is MongoDB's _id Field and How to Use It:</strong> <a href="https://www.vividcortex.com/blog/what-is-mongodbs-id-field-and-how-to-use-it" target="_blank" rel="noopener">Link</a>. --{ There are several actions available to users that simplify your organization and handling of documents. For instance, users who stick to the default ObjectID can access the creation of their timestamps with the getTimestamp() command, providing an easy and reliable method for seeing precisely when a document was created. Additionally, with a little client-side computation, you can leverage the built-in timestamp to find documents based on insertion time. }--.</li>    <li><strong>( MongoDB ) { "_id" Field }-{ ObejctId } - Why you should avoid adding another date field,  but use (and search within) ObjectId instead?:</strong> <a href="http://thediscoblog.com/blog/2013/06/22/mongodb-primary-keys-are-your-friend/" target="_blank" rel="noopener">Link</a>. Also see <a href="https://www.vividcortex.com/blog/what-is-mongodbs-id-field-and-how-to-use-it" target="_blank" rel="noopener">What is MongoDB's _id Field and How to Use It</a>. You can add another <strong>date field</strong>. But without <strong>indexing</strong>, it is very slow (just relative) on searching for a specific or range of date. So you want the search to be much faster (just relative) and you will try to add index on that date field, but now you end up adding <strong>one more extra indexed field</strong>. So why you do this? Just simply searching the date by ObjectId (timestamp, smallest units to one seconds), since every ObjectId consist with 4 part, the first part is the representation of the seconds since the Unix epoch.</li>    <li><strong>( MongoDB ) { "_id" Field } - You can explicit create "_id" field value:</strong> <a href="https://www.guru99.com/mongodb-objectid.html" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( MongoDB ) { "_id" Field } - Is it bad to change _id type in MongoDB to integer?:</strong> <a href="https://stackoverflow.com/questions/14054384/is-it-bad-to-change-id-type-in-mongodb-to-integer" target="_blank" rel="noopener">Link</a>. No, it's not a problem. But I don't need to change it, <code>ObjectId</code> is good enough in most case.</li>    <li><strong>( CSS ) Found solution of [ CSS dilemma ]-[ parent size and child size depends on each other:</strong> The dilemma is like this - you have a parent container A, inside this parent there is 2 sibling child B and C, B is image at left side, and C is some text at right side. Now your goal is 1. Make height of A to shrink as much  as possible until it reach the same size of C, 2. Make height of B to grow as much as possible, until reach the same size of A. // This brings the <strong>chicken-egg dilemma</strong>, how can you have differnt <strong>size depending direction</strong>? The solution is like this - make an extra container D between A and B, then set this container D to <code>position: absolute ; top: 0 ; bottom: 0 ; left: 0 ; right: 0 ;</code>, then also set B to <code>height: 100%;</code> finally set A to <code>position: relative;</code>, since A will consider D as <strong>zero size</strong> so it will shrink as much as possible until reach same height of C. And also D will try to stick with same height of A, B will do the same thing too. Now everything works!</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:55 Working on { Corenet } ,, { controller },{ model }.</strong></li>        <li><strong>02:41 Misc.</strong></li>        <li><strong>02:50 Sleep.</strong></li>        <li><strong>10:53 Wake up.</strong></li>        <li><strong>11:00 Upload blog.</strong></li>        <li><strong>11:05 Watching video.</strong></li>        <li><strong>12:05 Working on { Corenet } ,, { model }:</strong> Understand "_id" field.</li>        <li><strong>12:30 Cooking, reading article about "_id" and { ObjectId }.</strong></li>        <li><strong>13:15 Eating, reading article about "_id" and { ObjectId }.</strong></li>        <li><strong>13:35 Bathroom.</strong></li>        <li><strong>13:50 Fixing problem of network is down.</strong></li>        <li><strong>14:00 Network is off, still reading articles about { Sharding }.</strong></li>        <li><strong>14:20 Grocery, buying drinks.</strong></li>        <li><strong>14:30 Wasting time.</strong></li>        <li><strong>14:35 Take a look of { lahSale }.</strong></li>        <li><strong>14:43 Misc:</strong> <strong>Not very productive</strong>, my mind is not very focused, too bad. Reading article about { Dates } and { moment.js }, misc, messaging with woody about { lahSale }, Working on { Corenet } ,, { model }.</li>        <li><strong>17:15 Misc, wasting time.</strong>.</li>        <li><strong>17:53 Watching video.</strong>.</li>        <li><strong>18:25 Working on { Corenet } ,, { controller },{ model }:</strong> Change structure, because { Mongoose } { Model } could only be init (instantiate) once, never twice. I thought we should (good practice) instantiate the from controller to model for each single request.</li>        <li><strong>19:30 Bathroom:</strong> <a href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/" target="_blank" rel="noopener">Link</a>. I think we inevitably still have to use one or multiple <code>try ... catch</code> block when using <code>async function</code>.</li>        <li><strong>19:47 Working on { Corenet } ,, { controller },{ model }.</strong></li>        <li><strong>20:00 Talking with Woody:</strong> Topics include { lahSale }, my previous job working in factory assembly line, industrial design college days, I should increase my javascript skills by learning more advanced topic (by books or other systematic resources), { Corenet} and database design, and write much more code. The volunteering opportunity. My job and interview.</li>        <li><strong>21:50 Eating fruit, cooking.</strong></li>        <li><strong>22:20 Working on { lahSale } ,, build testing html for testing css.</strong></li>        <li><strong>22:45 Eating, thinking css problem.</strong></li>        <li><strong>23:45 Found solution of [ CSS dilemma ]-[ parent size and child size depends on each other.</strong></li>        <li><strong>23:59 Working on { lahSale } ,, fixing thumbnail size inside table cell.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-06<a id="id190606m031912"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Methodology }</div>    <div class="itm s2">{ Atomic Design }-{ modularization }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">{ Vue }</div>    <div class="itm s1">Music composition</div>  </div>  <ol>    <li><strong>( Methodology ) Atomic Design Methodology (modularization):</strong> <a href="http://atomicdesign.bradfrost.com/chapter-2/" target="_blank" rel="noopener">Link</a>. Also see <a href="http://atomicdesign.bradfrost.com/table-of-contents/" target="_blank" rel="noopener">Atomic Design - Table of Contents</a> for 4 other part. // I think these series is not only about Atomic Design, but also include many experience sharing from web-development <strong>industry</strong>. Might worth [ reading ]-[ dig more] if I have time.</li>    <li><strong>( Music composition ) { iPianoDude } - Twice - TT:</strong> <a href="https://youtu.be/w5dwkStCWto" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Bootstrap ) Correctly using Bootstrap4 Grid for responsive layouts - { .container },{ .row},{ .col }:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://uxplanet.org/how-the-bootstrap-4-grid-works-a1b04703a3b7" target="_blank" rel="noopener">Link</a>. High quality article for newbies, introducing most fundamental but important concept of how to <strong>correctly</strong> using these 3 class { .container },{ .row},{ .col }.</li>        <li><strong>Conclusion:</strong> Now I [ understand why ]-[ know ] we should not mixed { .container },{ .row},{ .col } with other purpose! Those <code>div</code> should be <strong>only doing that purpose</strong> (served for boostrap positioning, not styling). In other words, don't make those element (<code>div</code>) that have applied { .container },{ .row},{ .col } class to do other thing, like applying border, you might start to get into trouble later when you do so.</li>        <li><strong>3 important basic rules:</strong> --{ 1. Columns must be the immediate child of a Row. 2. Rows are only used to contain Columns, nothing else. 3. Rows should be placed inside a Container. }--.</li>        <li><strong>{ .row } is just a css { flexbox }:</strong> So you can apply same flexbox property to inside { .col }. So can even use something like <code>class="row align-items-end"</code>, <code>class="row justify-content-around"</code>.</li>        <li><strong>Advanced usage:</strong> See <a href="https://getbootstrap.com/docs/4.1/layout/grid/#horizontal-alignment" target="_blank" rel="noopener">Bootstrap ,, Docs ,, Grid system</a>, you can even use something like <code>class="row align-items-end"</code>, <code>class="row justify-content-around"</code> // <code>class="row no-gutters"</code> // <code>class="col order-md-12"</code>, <a href="https://getbootstrap.com/docs/4.1/layout/grid/#auto-layout-columns" target="_blank" rel="noopener">Auto-layout columns</a> (without specifying explicit numbered class like .col-sm-6) // <code>col-&lt;breakpoint&gt;-auto</code> to make column's width fits it's content (see <a href="https://getbootstrap.com/docs/4.1/layout/grid/#variable-width-content" target="_blank" rel="noopener">Variable width content</a>) (so it seems you can use use <code>class="col-auto"</code> on column B to shrink as much as possible, then use <code>class="col"</code> on column B to grow as much as possible, to fit remaining space). // <code>.col-md-3 .ml-md-auto</code> to make left marign (length is automatically set) on { md } screen size (see <a href="https://getbootstrap.com/docs/4.1/utilities/spacing/" target="_blank" rel="noopener">margin and padding utilities</a>). // <code>.col-md-4 .offset-md-4</code> (see <a href="https://getbootstrap.com/docs/4.1/layout/grid/#offsetting-columns" target="_blank" rel="noopener">Offset</a>).</li>      </ol>    </li>    <li><strong>About thoroughly re-learn Bootsrap { Grid system } and responsive layout fundamental:</strong> The reason why I spends so much time re-lean Bootsrap { Grid system } is because I estimate it will be used again an again in <code>lahSale</code> project (and maybe my <code>corenet</code> too), so to prevent the time wasting on searching scattered information all over the net <strong>keep accumulating</strong>, I decide to learn it <strong>systematically</strong>. This might not only applyed on this <code>Bootstrap</code> example, I think many things are the same, sometimes it is preferable to learn systematically, sometimes it is preferable to learn with <strong>scattered</strong> info and just need to grab what I need from everywhere and should prevent diving too deep into rabbit hole.</li>    <li><strong>( Bootstrap ) What is { Custom forms } (.custom-control) compare to normal form elements?:</strong> <a href="https://getbootstrap.com/docs/4.0/components/forms/#custom-forms" target="_blank" rel="noopener">Link</a>. --{ For even more customization and cross browser consistency, use our completely custom form elements to replace the browser defaults. They’re built on top of semantic and accessible markup, so they’re solid replacements for any default form control. }--.</li>    <li><strong>( Bootstrap ) Form:</strong> <a href="https://getbootstrap.com/docs/4.0/components/forms" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Drawing ) { 抖抖村 } - 我適合哪種類型的藝術工作? - 認識你自己的技能樹，優勢，劣勢:</strong> <a href="https://youtu.be/AIufILDRw5U" target="_blank" rel="noopener">Link</a>. 總結就是，任何專業領域都一樣，一定要長時間的練習才會有一點成就，短時間是不會看到東西的。</li>    <li><strong>( Vue ) Form input bindings and { v-model }:</strong> <a href="https://vuejs.org/v2/guide/forms.html" target="_blank" rel="noopener">Link</a>. Helpful. Including <code>checkbox</code>, <code>radio</code>, <code>select</code>.</li>    <li><strong>( Vue ) How to correctly use { v-if },{ v-else },{ v-else-if }?:</strong> The docs, <a href="https://vuejs.org/v2/guide/conditional.html" target="_blank" rel="noopener">Conditional Rendering</a>, didn't mention the rules very detailed. After my own trial and error I found that, all of html elements that applied any of { v-if },{ v-else },{ v-else-if } vue attribute, they you have to treat their position strictly just like how you write <code>if ... else if ... else</code> statement in programming code logic. You have to treat the element <strong>depth</strong> just like <strong>indent</strong> in programming, no matter what element you are using (either <code>template</code>, or <code>div</code>, or <code>span</code>). And also between those special elements you can't insert other things between or it will fail to work (and complain). // About nesting, yeah you can nest another child <code>v-if ... v-else</code> inside parent <code>v-if</code> or <code>v-else</code>. Parent's <code>v-if ... v-else</code> is not related to child's <code>v-if ... v-else</code> at all, they work individually and the logic don't affect each other.</li>    <li><strong>( Music composition ) { iPianoDude } - BTS - Fake Love:</strong> <a href="https://youtu.be/m5DBroBtE3Q" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>??:?? Working on { lahSale } ,, replacing some element to use boostrap style.</strong></li>        <li><strong>??:?? Understading why boostrap have nagative margin of { .row }.</strong></li>        <li><strong>03:30 Sleep.</strong></li>        <li><strong>11:35 Wake up.</strong></li>        <li><strong>11:40 Uploading blog.</strong></li>        <li><strong>11:55 Wasting time on reflecting.</strong></li>        <li><strong>12:05 Working on { lahSale } ,, replacing some element to use boostrap style.</strong></li>        <li><strong>12:50 Thoroughly re-learn Bootsrap { Grid system } and responsive layout fundamental, cooking.</strong></li>        <li><strong>14:50 Eating, listening to music, brushing teeth.</strong></li>        <li><strong>15:20 Reading article ,, Try/Catch always needed for await?:</strong> <a href="https://esdiscuss.org/topic/try-catch-always-needed-for-await" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>15:30 Working on { lahSale } ,, replacing some element to use boostrap style.</strong></li>        <li><strong>??:?? Testing { Vue } v-model on { radio }, testing nested { v-if }.</strong></li>        <li><strong>17:21 Found why { Bootstrap } ,, { checkbox } not working as expected:</strong> (Here I talking about <code>form-check</code>, not <code>custom-control custom-checkbox</code>). Bootstrap require you put <code>&lt;input type="checkbox"&gt;</code> first, then <code>&lt;label&gt;</code> later, if you reverse the order, it will not work. Very wierd and stupid quirk. Also this is not documented anywhere.</li>        <li><strong>18:50 { lahSale } ,, finished the current progress.</strong></li>        <li><strong>18:51 Wating time on reflecting.</strong></li>        <li><strong>19:10 Dancing with music.</strong></li>        <li><strong>19:?? Grocery, preparing ingredient.</strong></li>        <li><strong>19:50 Listening to music, watching video, reading article.</strong></li>        <li><strong>22:30 Taking showing.</strong></li>        <li><strong>23:00 Mind is wandering, eating fruit:</strong> Reading article at first, but later starts to out of focus ... bad habbit.</li>        <li><strong>23:35 Learning { Atomic Design } Methodology:</strong> And reflecting if { lahSale } or { corenet } could [ apply same methodology ],[ be improved ].</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-07<a id="id190607m014418"></a></h2>  <div class="kwCloud">    <div class="itm s2">Design pattern</div>    <div class="itm s1">Book</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ MongoDB }</div>  </div>  <ol>    <li><strong>Design pattern and Design pattern for Javascript:</strong>      <ol>        <li><strong>{ OReilly }-[ Addy Osmani's Learning JavaScript Design Patterns ]-[ 2012 ]:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>Table of contents:</strong> <a href="https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>Released under a Creative Commons:</strong> --{ released under a <strong>Creative Commons</strong> Attribution-Noncommercial-No Derivative Works 3.0 unported license. It is available for purchase via O'Reilly Media but will remain available for both free online and as a physical (or eBook) purchase for readers wishing to support the project. }--.</li>            <li><strong>Been suggested again and again:</strong> This book have <strong>been suggested again and again</strong>, for Javascript community, seems a book gain quite credits.</li>          </ol>        </li>        <li><strong>{ GOF } design pattern (Gang of Four):</strong>          <ol>            <li><strong>Been suggested again and again:</strong> This book have <strong>been suggested again and again</strong>, it is an influential book that is still influential today.</li>            <li><strong>Quick reference - sourcemaking.com/design_patterns:</strong> <a href="https://sourcemaking.com/design_patterns" target="_blank" rel="noopener">Link</a>. Online, free.</li>            <li><strong>Quick reference - { medium } - JavaScript Design Patterns:</strong> <a href="https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>Quick reference - Youtube - Derek Banas:</strong> <a href="https://www.youtube.com/playlist?list=PLF206E906175C7E07" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>{ OReilly } - Head First Design Patterns:</strong> <a href="https://www.amazon.com/dp/0596007124//ref=cm_sw_su_dp?tag=nethta-20" target="_blank" rel="noopener">Link</a>. Not sure what language it used, not sure which Design Pattern it used. But this book is recommand by someone by few people, saying it is story-like and fun to read.</li>        <li><strong>Design pattern is only meaningful when in right context:</strong> --{ Gang of Four is considered the "canonical" design patterns book. The examples are not in JavaScript, and it has much more of an OOP bend, but worth reading. Since you're looking for Node, not all the patterns may be relevant just FYI. ; JavaScript-wise, Addy Osmani's Learning JavaScript Design Patterns might be a little more useful for you (not to say that Gang of Four isn't, it's just a different context).}--. // ---{ user1: I thought the point of learning patterns is that they're language agnostic. }--, --{ user2: No, quite the opposite. Many are language specific, like Iterator, you would not normally need to implement this pattern in JavaScript, for example. Another example of a pattern needed in a language such as Java and not really needed in JavaScript is Visitor, the problem it tries to solve is not being able to add methods to existing classes, in JavaScript there is no such problem to begin with ... I guess you wouldn't need to implement the observer pattern in .net because it is natively event driven. }--</li>      </ol>    </li>    <li><strong>( Book ) Best books for software engineering - { fullstackengine.net }:</strong> <a href="https://fullstackengine.net/best-books-for-software-engineering/" target="_blank" rel="noopener">Link</a>. A list of [ "classic" ]-[ "legendary" ]-[ influential ] books. Unread, but { GOF } and {Javascript: The good parts } is in two of them.</li>    <li><strong>( Music ) { DooPiano } - Forever Young:</strong> <a href="https://youtu.be/dzzeofYUZdw" target="_blank" rel="noopener">Link</a>. Quality and cretive [ interpretation ]-[ remake ]-[ composition ].</li>    <li><strong>( Music ) Blackpink - Forever Young - dance:</strong> <a href="https://youtu.be/89kTb73csYg" target="_blank" rel="noopener">Link</a>. Their dance has very correct rhythm feeling, not about the details, but right "bigger form". Feeling loose, relaxing, beauty, and dynamic.</li>    <li><strong>( Music composition ) { iPianoDude } - BLACKPINK - Forever Young:</strong> <a href="https://youtu.be/hJAKy31ho1g" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Blackpink - Don't Know What To Do - dance:</strong> <a href="https://youtu.be/bqzDuRz_P7g" target="_blank" rel="noopener">Link</a>. Their dance has very correct rhythm feeling, not about the details, but right "bigger form". Feeling loose, relaxing, beauty, and dynamic.</li>    <li><strong>( MongoDB ) About Searching:</strong>      <ol>        <li><strong>Different searching approach:</strong> Including <span style="text-decoration: underline;">exact match</span>, <code>$regex</code>, <span style="text-decoration: underline;">Keyword Index</span>, <span style="text-decoration: underline;">Text Indexes</span>.</li>        <li><strong>Keyword Index:</strong> <a href="https://docs.mongodb.com/manual/tutorial/model-data-for-keyword-search/" target="_blank" rel="noopener">Link</a>. Related to create the <code>multi-key index</code> on that array field.</li>        <li><strong>Text Index:</strong> <a href="https://docs.mongodb.com/manual/core/index-text/" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:45 Finished reading { Atomic Design } Methodology ,, article.</strong></li>        <li><strong>01:46 Organizing blog.</strong></li>        <li><strong>01:50 Misc.</strong></li>        <li><strong>02:40 Sleep.</strong></li>        <li><strong>10:45 Wake up.</strong></li>        <li><strong>10:55 Uploding blog.</strong></li>        <li><strong>11:00 Misc:</strong> Tired, sleepy, no energy, don't feel like working.</li>        <li><strong>12:00 Cooking.</strong></li>        <li><strong>12:18 Finding design pattern, and design pattern for Javascript.</strong></li>        <li><strong>12:30 Eating, understanding { GOF } design pattern.</strong></li>        <li><strong>14:20 Watching video.</strong></li>        <li><strong>14:50 Working on { corenet } ,, back-end ,, Model to get all post:</strong> Not very focused.</li>        <li><strong>15:20 Bathroom.</strong></li>        <li><strong>15:35 Working on { corenet } ,, back-end ,, Model to get all post:</strong> Refactoring <code>cfg.js</code>.</li>        <li><strong>16:35 Buying drinks.</strong></li>        <li><strong>16:47 Working on { corenet } ,, back-end ,, Model to get all post:</strong> Pagination logic.</li>        <li><strong>17:00 Understanding several Searching [ approach ]-[ practice ] in { MongoDB }.</strong></li>        <li><strong>17:?? Working on { corenet } ,, back-end ,, Model to get all post:</strong> Pagination logic.</li>        <li><strong>18:40 Messaging with mom.</strong></li>        <li><strong>19:00 Working on { corenet } ,, back-end ,, Model to get all post:</strong> Pagination logic.</li>        <li><strong>19:25 { corenet } ,, back-end ,, first Model { postAll } now functioning.</strong></li>        <li><strong>19:26 Watching video:</strong> <a href="https://youtu.be/oO-FMAdjY68" target="_blank" rel="noopener">Why Good Developers Write ugly (but dead simple) Tests</a>, <code>Blackpink</code>.</li>        <li><strong>21:20 Working on { corenet } ,, back-end ,, { route } to get single post.</strong>.</li>        <li><strong>23:15 Cooking, working on { corenet }.</strong>.</li>        <li><strong>23:55 Eating, watching video:</strong> Mostly about music.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-08<a id="id190608m014429"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Vue Router }</div>    <div class="itm s1">{ Bootstrap }</div>  </div>  <ol>    <li><strong>( Music ) Blackpink - Forever Young:</strong>      <ol>        <li><strong>( Music ) ( Rearranged ) ( Instrumental ) Blackpink - Forever Young - Official & Filtered Instrumental:</strong> <a href="https://youtu.be/3KLoGIxLRyo" target="_blank" rel="noopener">Link</a>. The end part is fixed, makes it better than official version, when <strong>studying</strong>.</li>        <li><strong>( Music ) ( Rearranged ) Blackpink - Forever Young - alternate ending version:</strong> <a href="https://youtu.be/Jl6gu3hssTk" target="_blank" rel="noopener">Version 1</a>, <a href="https://youtu.be/Tz-ZQ_OEybE" target="_blank" rel="noopener">version 2</a>. Cut the end "noise". Better than official version, when <strong>studying</strong>.</li>        <li><strong>( Music ) Blackpink - Forever Young - official & filtered instrumental:</strong> <a href="https://youtu.be/3KLoGIxLRyo" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) ( Drum ) Blackpink - Forever Young - { David Cannales } drum cover:</strong> <a href="https://youtu.be/3rI2V63KIy8" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music composition ) Let's Try to Make the Beat from Blackpink - Forever Young - { AZWZ }:</strong> <a href="https://youtu.be/O0tJJSg-MQA" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Music ) ( Drum ) Twice - Dance The Night Away - { David Cannales } drum cover:</strong> <a href="https://youtu.be/h7YCvzHvCrE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Film making ) { Twice } - Heart Shaker JP ver:</strong> <a href="https://youtu.be/CbZNzgKDd5Y" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) { Vue Router }:</strong> <a href="https://router.vuejs.org/" target="_blank" rel="noopener">Docs</a>, <a href="https://flaviocopes.com/vue-router/" target="_blank" rel="noopener">quick reference</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:45 Organizing blog.</strong></li>        <li><strong>01:50 Listening to music.</strong></li>        <li><strong>02:00 Working on { corenet } ,, back-end ,, { route } to GET single post:</strong> GET done. Ready to do POST, PUT in tomorrow.</li>        <li><strong>03:45 Sleep.</strong></li>        <li><strong>11:40 Wake up, misc:</strong> Too bad, stay up late even more.</li>        <li><strong>11:50 Uploding blog.</strong></li>        <li><strong>11:55 Working on { lahSale }:</strong> Woody had upgrade the code base to using <code>vuecli3</code>. Checking a trivial problem that why 2 nearby buttons don't have any spacing (side by side without margin) (this happens after upgraded?).</li>        <li><strong>13:10 { lahSale } ,, found bootstrap don't make defult margin for 2 side by side buttons.</strong></li>        <li><strong>13:11 Cooking, { pull request } to Woody:</strong> Visual check on <code>lahSale</code>, seems no found visual glitches at all.</li>        <li><strong>13:40 Eating, listening to music.</strong></li>        <li><strong>15:10 Working on { corenet } ,, back-end ,, { route } to POST single post.</strong></li>        <li><strong>15:15 Understanding { Vue Router }.</strong></li>        <li><strong>15:28 Distracting, serching music on youtube.</strong></li>        <li><strong>15:40 Understanding { Vue Router }.</strong></li>        <li><strong>16:00 Bathroom.</strong></li>        <li><strong>16:10 Understanding { Vue Router }.</strong></li>        <li><strong>17:13 Listening to music.</strong></li>        <li><strong>17:18 Taking a nap.</strong></li>        <li><strong>17:50 Wake up.</strong></li>        <li><strong>17:53 Buying drinks.</strong></li>        <li><strong>18:00 Watching video.</strong></li>        <li><strong>18:25 Learning { Vue Router }:</strong> Quite suprised, I don't know these days front-end (instead of back-end) do all heavy lifting on <code>routes</code>. That make sense, since <code>Vue</code> is front end framwork and <code>single page application</code> in natural. Back-end now only remain API purpose.</li>        <li><strong>20:25 Listening to music, cooking.</strong></li>        <li><strong>21:30 Listening to music, eating:</strong>  <a href="https://youtu.be/k3dDmKoEosY" target="_blank" rel="noopener">從事藝術行業者，都靠什麼管道賺錢?</a>. Yeah, it is too hard to make living with art, unless you are really that 1. Persistent until you become skilled 2. Talented.</li>        <li><strong>22:00 Working on { corenet } ,, front-end:</strong> Setting up front-end from zero.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-09<a id="id190609m004119"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Front-end</div>    <div class="itm s1">{ Vue.js }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">{ Woody }</div>  </div>  <ol>    <li><strong>( Health ) 飲食中， Omega-6:Omega-3 的理想比例約為 1:1, EPA 與 DHA:</strong> <a href="https://www.amway.com.tw/iShare/Monthly/Inner/11664/11764" target="_blank" rel="noopener">Link</a>, also see <a href="http://blog.vitabox.com.tw/2018/09/omega3-benefits/" target="_blank" rel="noopener">藻油跟魚油</a>.</li>    <li><strong>( Music ) Blackpink - Don't Know What To Do - dance:</strong> <a href="https://youtu.be/bqzDuRz_P7g" target="_blank" rel="noopener">Link</a>, <a href="https://youtu.be/iGjmkWnkV7o" target="_blank" rel="noopener">instrumental</a>. Very sad.</li>    <li><strong>( Music ) ( Cover ) { DooPiano } - BLACKPINK - As If It's Your Last:</strong> <a href="https://youtu.be/HjpkN9JXFwQ" target="_blank" rel="noopener">Link</a>. I found { DooPiano } always have a completely different interpretation himself, and do it great.</li>    <li><strong>( Music composition ) { iPianoDude } - Twice - YES or YES:</strong> <a href="https://youtu.be/eTN2PZOs2v4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music composition ) { iPianoDude } - Twice - Fancy:</strong> <a href="https://youtu.be/2tyK7dEVwxI" target="_blank" rel="noopener">Link</a>. Very complex, natural, abundant, and amazing.</li>    <li><strong>( Music composition ) { BTS } - Euphoria - DJ Swivel - deconstructed and the making:</strong> <a href="https://youtu.be/WjaJeGJN2A4" target="_blank" rel="noopener">Link</a>. The final piece itself is not my type, but the principle is more interesting.</li>    <li><strong>( Music theory ) 不自量力的挑戰：我與好和弦的【絕對音感大PK】:</strong> <a href="https://youtu.be/3IbJ2mCxuRo" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( npm ) What is "deduped" in npm packages list?:</strong> <a href="https://stackoverflow.com/questions/52781142/what-is-deduped-in-npm-packages-list" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) ( JQuery ) The problem with using jQuery and Vue together:</strong> <a href="https://vuejsdevelopers.com/2017/05/20/vue-js-safely-jquery-plugin/" target="_blank" rel="noopener">Link</a>. --{ Vue is a jealous library in the sense that you must let it completely own the patch of DOM that you give it (defined by what you pass to el). If jQuery makes a change to an element that Vue is managing, say, adds a class to something, Vue won't be aware of the change and is going to go right ahead and overwrite it in the next update cycle. }--.</li>    <li><strong>( Vue ) How to set a global variable:</strong> <a href="https://stackoverflow.com/questions/40896261/apply-global-variable-to-vuejs" target="_blank" rel="noopener">Link</a>, I follow the second answer, it follows the method of <a href="https://vuejs.org/v2/cookbook/adding-instance-properties.html" target="_blank" rel="noopener">docs ,, Adding Instance Properties</a>. // Also, Woody use this way to make a component be accessible by all other components - <code>this.$root.$message = this;</code>, and also see <a href="https://stackoverflow.com/questions/56233887/what-does-this-root-means-in-a-component" target="_blank" rel="noopener">what does { this.$root } mean?</a>, so <code>this.$root</code> is <code>new Vue(...)</code> instance, not <code>App.vue</code> component.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:30 Figure out why Bootstrap is not functioning:</strong> I have multiple vue testing-purpose "project" installed on system, they use <code>Bootstrap</code>. I thought they are funtional correctly (because CSS is working), but until now I found it is not fully functional. I compare with the version of <code>Woody's</code> and the "CDN"-ed method, it indicate my own project ,, bootstrap, is not funtional correctly, but I can't found the problem.</li>        <li><strong>03:15 Still not figured out why Bootstrap is not functioning:</strong> I guess it is because I wrongly use Boostrap in Vue, I have to use some special html [ elements ]-[ tags ] like <code>&lt;b-row&gt;, &lt;b-col&gt;</code>, so maybe this is why I keep can't found the answer.</li>        <li><strong>03:25 Sleep.</strong></li>        <li><strong>11:15 Wake up.</strong></li>        <li><strong>11:30 Uploading blog.</strong></li>        <li><strong>11:40 Watching video:</strong> Mostly related to music.</li>        <li><strong>12:35 Noting down about how to correctly using Bootstrap inside { Vue } project:</strong> Have to use special html tag like <code>&lt;b-collapse&gt;</code>.</li>        <li><strong>13:45 Cooking, playing with { Boostrap } special html tags inside { Vue }.</strong></li>        <li><strong>14:20 Eating, { Boostrap } special html tags.</strong></li>        <li><strong>15:00 Testing ES6 module, { import }, { export }:</strong> I'm sure in { node.js }-{ backend }, module will be cached, but I'm not sure if front end ES6 module behave the same or not. After testing, I'm sure they are cached too. They only load ("code executed", "initialized") once.</li>        <li><strong>15:40 Working on { corenet } ,, front-end:</strong> Writting config file to store something like back-end api url and port, for later <code>fetch</code> use.</li>        <li><strong>16:13 Eating fruit, listening to music.</strong></li>        <li><strong>16:25 Grocery.</strong></li>        <li><strong>16:40 Dancing with music.</strong></li>        <li><strong>17:00 Watching video:</strong> <a href="https://youtu.be/LByxQIpiVug" target="_blank" rel="noopener">TWICE 1001 Best Collection Of TWICE Sana (精選典藏凑崎紗夏)</a>, <a href="https://youtu.be/SoeCsLE80o0?t=670" target="_blank" rel="noopener">Why you build machine learning with Javascript?</a> (no any good reason, just because Javascript is ubiquitous, and people don't have time to lean a new language). For scientific things and eco system, Python is much more mature.</li>        <li><strong>18:35 Brushing teeth.</strong></li>        <li><strong>18:45 Working on { corenet } ,, front-end:</strong> Writting config file to store something like back-end api url and port, for later <code>fetch</code> use. // Leaning how to set up global variable that could be call by any component natually in <code>Vue</code>.</li>        <li><strong>20:30 Config { .eslintrc.js } for both front-end and back-end:</strong> I give up setting to much my own <code>.eslintrc.js</code> rules (what I did in project <code>Doggo</code>). Instead, I copy the <code>.eslintrc.js</code> from Woody's <code>lahSale</code> directly. It only have few lines of codes, I'm going to stick with any code [ type ]-[ preferences ] and focus on bigger picture.</li>        <li><strong>21:05 Cooking.</strong></li>        <li><strong>21:40 Eating, messaging with Woody, wasting time on reflecting.</strong></li>        <li><strong>22:32 Eating fruit, watching video about meat diet vs vegetarian:</strong> <a href="https://youtu.be/ouAccsTzlGU" target="_blank" rel="noopener">Is Meat Bad for You? Is Meat Unhealthy?</a>.</li>        <li><strong>23:20 Doing nothing, too sleepy.</strong></li>        <li><strong>23:45 Sleep:</strong> Too sleepy to do anything.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-10<a id="id190609m233229"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Front-end</div>    <div class="itm s1">{ Vue }</div>  </div>  <ol>    <li><strong>( Music ) Goblin - Original Soundtrack - Round And Round (Never Far Away Full Ver.):</strong> <a href="https://youtu.be/BaQfxRnab5Q" target="_blank" rel="noopener">Instrumental</a>, <a href="https://youtu.be/M1OJ2LdrRy4" target="_blank" rel="noopener">With vocal</a>. Very sad. I don't care about where it comes, but the Keywords of finding the source is - <code>South Korean television series, Guardian, The Lonely and Great God, Goblin</code>.</li>    <li><strong>( Twice ) The TWICE Gay Square: GAY OR GAY:</strong> <a href="https://youtu.be/1bPGruMh3cs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Twice ) TWICE Sana and Momo rejecting / loving each other:</strong> <a href="https://youtu.be/h7ygQLyCJps" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Inspiration ) 創意的三大要素 - { 抖抖村 }:</strong> <a href="https://youtu.be/C6UNHHRzlc0" target="_blank" rel="noopener">Link</a>. 1. 大量吸收知識識 (基於現實) 2. 發散思考 (新東西) 3. 收斂思考 (有價值的東西). // 繪畫學習的三個階段 - 1. 兒童般的亂畫 (全發散思考) 2. 系統規範的繪畫 (全收斂思考) 3. 突破規範的 "童貞" (發散 + 收斂)。</li>    <li><strong>( Form ) ( 3D modeling ) The 6 Key Principles to 3D Modeling Anything:</strong> <a href="https://youtu.be/OVbIOHAI3iY" target="_blank" rel="noopener">Link</a>. Always focus on bigger form first, then smaller detail later, never reverse.</li>    <li><strong>( AI ) NVIDIA's AI Creates Beautiful Images From Your Sketches:</strong> <a href="https://youtu.be/hW1_Sidq3m8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) What is { $refs }?:</strong> <a href="https://blog.johnsonlu.org/vue-refs/" target="_blank" rel="noopener">為什麼要用 $refs 取得 DOM Element 資訊?</a>, <a href="https://www.w3cplus.com/vue/accessing-dom-refs.html" target="_blank" rel="noopener">codepen example</a> (ignore the article, just use the <code>codepen</code> live example it given), <a href="https://codingexplained.com/coding/front-end/vue-js/accessing-dom-refs" target="_blank" rel="noopener">Be careful the pitfall, any DOM changes directly with $refs might be overwritten by Vue's virtual DOM</a> (best explained) (--{ Of course we could also have accomplished this with vanilla JavaScript by using a query selector to get access to the DOM element, but using the ref attribute is much cleaner and is the Vue way of doing it. It’s also safer because you won’t be relying on classes and IDs, so the chances of you breaking your code as a result of changing the markup or CSS styles, are lower. ... you should be careful with applying changes to the DOM directly like this ($refs), as any changes you apply may be overwritten if you are not careful. }--), <a href="https://www.cnblogs.com/xumqfaith/p/7743387.html" target="_blank" rel="noopener">注意陷阱，ref 在 render 前你不能訪問它 (還不存在)，在 render 後也不是響應式的 (什麼意思?)</a>, <a href="https://www.cnblogs.com/summer-raining/p/7685720.html" target="_blank" rel="noopener">ref使用在 外面的组件上, 外面的元素上, 里面的元素上 ...</a>.</li>    <li><strong>( Vue ) Event on route change?:</strong> <a href="https://stackoverflow.com/questions/46402809/vuejs-event-on-route-change" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:20 Wake up:</strong> Still lack of 01:40 of sleeping time.</li>        <li><strong>06:30 Uploading blog.</strong></li>        <li><strong>06:32 Thinking how to improve my { log table } system of blog:</strong> Do I need to reduce any duplicate or repeated workflow of my log table in everyday workflow? Can I automatically bubble-up all of the [ tag ]-[ label ]? No, it seems I can't do many workflow [ automatically ]-[ programmatically ], because many decision is not so sharp and crisp, it need so much human decision and decide by context. For example, I cook everyday, but it doesn't mean the <strong>"cook"</strong> [ tag ]-[ label ] should be important, in fact it even shouldn't be shown on the monthly [ tag ]-[ label ] cloud. While other thing like doing a long term project, it might involves across so much days, the tag might not even shown at daily [ tag ]-[ label ] cloud since they are common and trivial events, but should be shown in monthly [ tag ]-[ label ] cloud since it occupy so much time in this month, it is not important for daily scope, but important in monthly scope.</li>        <li><strong>07:45 Working on { corenet } ,, front-end:</strong> Use { Fetch } API to do first fetch request to back-end.</li>        <li><strong>08:25 Cooking, figuring out correct way to use { key } in { Vue }.</strong></li>        <li><strong>09:10 Eating, watching video.</strong></li>        <li><strong>10:30 { Vue } ,, can't get { key }:</strong> It seems no way to get <code>key</code> (which assigned to <code>v-bind:key="..."</code>). I just want to make sure I do it right, so this is why I want to print out the <code>key</code>, but I couldn't, it is not a big deal though.</li>        <li><strong>10:50 Understand { Vue } ,, { $refs }, listening to music:</strong> I'm digging into rabbit hole again, I might never going to use <code>$refs</code> in near future, and still I invest so much time on this.</li>        <li><strong>12:10 Working on { corenet } ,, front-end:</strong> Use { Fetch } API to do first fetch request to back-end.</li>        <li><strong>14:05 Prepare to figure out how to make pagination buttons later:</strong> { Corenet } ,, I have to figure out how to use <code>Bootstrap</code> <code>&lt;b-pagination-nav&gt;</code> later.</li>        <li><strong>14:06 Listening to music.</strong></li>        <li><strong>14:27 Taking shower.</strong></li>        <li><strong>15:05 Figure out how to use Bootstrap ,, &lt;b-pagination-nav&gt;.</strong></li>        <li><strong>16:00 Take a nap.</strong></li>        <li><strong>16:50 Buying drinks.</strong></li>        <li><strong>17:05 Figure out how to make Bootstrap ,, &lt;b-pagination-nav&gt; works with current route.</strong></li>        <li><strong>18:20 { lahSale } minor color changes.</strong></li>        <li><strong>18:30 Wasting time on reflecting.</strong></li>        <li><strong>18:42 Keep working on { corenet } ,, pagination and route.</strong></li>        <li><strong>19:20 Reviewing { Vue } ,, { scoped slot }.</strong></li>        <li><strong>19:25 Misc:</strong> Thinking about making a [ "messenger" ]-{ modal } just like what <code>Woody</code> did.</li>        <li><strong>19:35 Watching video.</strong></li>        <li><strong>21:10 { Corenet } ,, Making a [ "messenger" ]-{ modal }:</strong> Just like what <code>Woody</code> did, to handle general pop out messages.</li>        <li><strong>22:50 Preparing ingredient.</strong></li>        <li><strong>23:00 { Corenet } ,, making { postManager }:</strong> Main [ interface ]-[ component ] to to manage single post.</li>        <li><strong>23:30 Cooking.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-11<a id="id190611m000521"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Front-end</div>    <div class="itm s2">Music composition</div>    <div class="itm s1">{ Vue }</div>    <div class="itm s1">{ Bootstrap }</div>  </div>  <ol>    <li><strong>{ TWICE } dealing with { Sana } kissing everybody:</strong> <a href="https://youtu.be/yyeJSpqeIWw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Sad feeling collection:</strong>      <ol>        <li><strong>( Music ) Goblin - Original Soundtrack - Round And Round (Never Far Away Full Ver.):</strong> <a href="https://youtu.be/BaQfxRnab5Q" target="_blank" rel="noopener">Instrumental</a>, <a href="https://youtu.be/M1OJ2LdrRy4" target="_blank" rel="noopener">With vocal</a>. Very sad. I don't care about where it comes, but the Keywords of finding the source is - <code>South Korean television series, Guardian, The Lonely and Great God, Goblin</code>.</li>        <li><strong>( Music ) Blackpink - Don't Know What To Do - dance:</strong> <a href="https://youtu.be/bqzDuRz_P7g" target="_blank" rel="noopener">Link</a>, <a href="https://youtu.be/iGjmkWnkV7o" target="_blank" rel="noopener">instrumental</a>. Very sad.</li>        <li><strong>( Music ) Daughter - Youth:</strong> <a href="https://youtu.be/2QT5eGHCJdE" target="_blank" rel="noopener">Link</a>. Very sad.</li>      </ol>    </li>    <li><strong>( Music composition ) ( Re-arrange ) ( Remix ) { Apocalypse }:</strong>      <ol>        <li><strong>About:</strong> A bit noisy and messy, but very creative and varied.</li>        <li><strong>( Music composition ) { Apocalypse } remix - { Twice } - What Is Love?:</strong> <a href="https://youtu.be/-8s9SBX3ujo" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music composition ) { Apocalypse } remix - { Twice } - Dance The Night Away - A Ver.:</strong> <a href="https://youtu.be/Vob1EEO6cNc" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music composition ) { Apocalypse } remix - { Twice } - Dance The Night Away - B Ver.:</strong> <a href="https://youtu.be/fsQKUjBt2oU" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music composition ) { Apocalypse } remix - { Blackpink } - Don't Know What To Do:</strong> <a href="https://youtu.be/ujtMpNUcfpw" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Music ) { Nigel Stanford } - Science Vs. Music:</strong>      <ol>        <li><strong>( Music ) { Nigel Stanford } - { Cymatics } - Science Vs. Music:</strong> <a href="https://youtu.be/Q3oItpVa9fs" target="_blank" rel="noopener">Link</a>. The music style is kind of my type.</li>        <li><strong>( Music ) { Nigel Stanford } - One Hundred Hunters:</strong> <a href="https://youtu.be/ky2rtCpbn7k" target="_blank" rel="noopener">Link</a>. The music style is kind of my type.</li>        <li><strong>( Music ) { Nigel Stanford } - Entropy - from Solar Echoes:</strong> <a href="https://youtu.be/-oMHME8XmtE" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) { Nigel Stanford } - Icarus (Automatic Mix) - feat. Elizaveta:</strong> <a href="https://youtu.be/nmp51np10Sw" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) { Nigel Stanford } - Automatica - Robots Vs. Music:</strong> <a href="https://youtu.be/bAdqazixuRY" target="_blank" rel="noopener">Link</a>. Powerful, varied, but not my type, too much strength and tough, I like soft and implicit thing more.</li>      </ol>    </li>    <li><strong>( Music composition ) { NiceChord 好和弦 } - 一次搞懂，在家做音樂需要的基本配備:</strong> <a href="https://youtu.be/o2Q0l5xbZfw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( TWICE ) - YES or YES - Almost official instrumental:</strong> <a href="https://youtu.be/5Z8oi2T0lpE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue ) { v-html } directive - render given html literal to real dom:</strong>      <ol>        <li><strong>About:</strong> See <a href="https://vuejs.org/v2/api/#v-html" target="_blank" rel="noopener">docs</a>. Updates the element’s innerHTML.</li>        <li><strong>Notice ,, Vue will not compiled those content:</strong> Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates.</li>        <li><strong>Notice ,, scoped style don't work on it:</strong> And there is some solution, you can either use <code>/deep/</code> <code>selector</code>, or use <code>&lt;style&gt;</code> tag without <code>scoped</code>, or use <strong>extra</strong> <code>&lt;style&gt;</code> tag without <code>scoped</code> (so now you have 2 <code>&lt;style&gt;</code> tag on the component template file), or use global style sheet. See <a href="https://github.com/vuejs/vue-loader/issues/359" target="_blank" rel="noopener">v-html doesn't work with scoped CSS</a>.</li>        <li><strong>{ v-text } and { v-html } directive:</strong> <a href="https://stackoverflow.com/questions/34404843/alternative-binding-syntax-in-vue-js" target="_blank" rel="noopener">Link</a>. the later one use triple curly brackets <code>{{{ myHTML }}}</code> for shorthand.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:05 Eating.</strong></li>        <li><strong>01:15 Sleep.</strong></li>        <li><strong>09:25 Wake up.</strong></li>        <li><strong>09:33 Uploading blog.</strong></li>        <li><strong>09:38 Watching video:</strong> <a href="https://youtu.be/UKi2JumnJzY" target="_blank" rel="noopener">{ The Dodo } - Finding another new friend for a sad dog</a>.</li>        <li><strong>10:30 { Corenet } ,, making { postManager }:</strong> Main [ interface ]-[ component ] to to manage single post.</li>        <li><strong>12:45 Cooking:</strong> { Corenet } ,, making { postManager } ,, finished Fetch part, not yet rendered it on page.</li>        <li><strong>13:20 Eating, listening to music.</strong></li>        <li><strong>15:20 { Corenet } ,, making { postManager }:</strong> { Fetch }, and rendered it on page.</li>        <li><strong>16:25 Bathroom.</strong></li>        <li><strong>16:38 { Corenet } ,, making { postManager }:</strong> From "read mode" go into "edit mode".</li>        <li><strong>18:15 Take a nap.</strong></li>        <li><strong>18:45 Eating fruit, brushing teeth.</strong></li>        <li><strong>18:55 { Corenet } ,, making { postManager }:</strong> From "read mode" go into "edit mode".</li>        <li><strong>20:00 Out of internet:</strong> The place I'm living has bad internet stability, the connection speed is not the problem, but is is not stable, ofen unpredictably offline.</li>        <li><strong>20:10 Understanding { vue } ,, { v-html } directive.</strong></li>        <li><strong>20:30 { Corenet } ,, making { postManager }:</strong> "edit mode".</li>        <li><strong>21:05 Cooking.</strong></li>        <li><strong>23:25 { Corenet } ,, making { postManager }:</strong> "edit mode". Dealing with date and time picker.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-12<a id="id190612m004637"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Front-end</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">Programming { Methodology }</div>    <div class="itm s2">Methodology ,, { SOLID } principle</div>    <div class="itm s1">HTML { input types }</div>    <div class="itm s1">{ Date picker }</div>    <div class="itm s1">{ Time picker }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s2">{ Accessibility }</div>  </div>  <ol>    <li><strong>( Music ) { Hans Zimmer } - { Now We Are Free } - movie Gladiator soundtrack:</strong> <a href="https://youtu.be/xbHPTPUpQ1I" target="_blank" rel="noopener">Link</a>. Beautiful things will not last long, always.</li>    <li><strong>( Music ) { Hans Zimmer } - { Time } - movie Inception soundtrack:</strong> <a href="https://youtu.be/MuAGGZNfUkU" target="_blank" rel="noopener">Link</a>. Time is always elapsing, and we can't [ hold ]-[ control ] it. Only we can do is live in <strong>now</strong>.</li>    <li><strong>( Music ) { Thomas Bergersen } - { Colors of Love } - album Sun:</strong> <a href="https://youtu.be/ZuGiwDQEvDc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Tobu } - Sound of Goodbye:</strong> <a href="https://youtu.be/goRGKll_zE0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( cover ) { DooPiano } - BLACKPINK - Forever Young:</strong> <a href="https://youtu.be/dzzeofYUZdw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( cover ) { 2COLOR } covers - violin & flute:</strong>      <ol>        <li><strong>( Music ) { 2COLOR } cover - Way Back Home - violin & flute:</strong> <a href="https://youtu.be/5tmFAw9F2uQ" target="_blank" rel="noopener">Link</a>. Natural and fluent performance.</li>        <li><strong>( Music ) { 2COLOR } cover - GFRIEND - Sunrise:</strong> <a href="https://youtu.be/dUeteCWXoqQ" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) { 2COLOR } cover - Alex & Sierra - Little Do You Know:</strong> <a href="https://youtu.be/Oaaus4O3X5M" target="_blank" rel="noopener">Link</a>. Even such plain and "boring" song source, could be interpreted nicely. The bigger form is just correct, so don't need too much extra detail to be nice.</li>        <li><strong>( Music ) { 2COLOR } cover - iKON - GOODBYE ROAD:</strong> <a href="https://youtu.be/A7781TSy7JU" target="_blank" rel="noopener">Link</a>. Even such plain and "boring" song source, could be interpreted to such many dimension and varied.</li>        <li><strong>( Music ) { 2COLOR } cover - TWICE - YES or YES:</strong> <a href="https://youtu.be/3BKV4AxXg-g" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) { 2COLOR } cover - Days Without Tears - Mr.Sunshine:</strong> <a href="https://youtu.be/kvQW1IMxYME" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Music ) { SUNMI } - Siren:</strong>      <ol>        <li><strong>Official MV:</strong> <a href="https://youtu.be/TNWMZIf7eSg" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>First Nuclo Remix:</strong> <a href="https://youtu.be/XgZr0oarvVM" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>In empty arena effect:</strong> <a href="https://youtu.be/tpsVMNc02Qg" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Programming ) ( Methodology ) Writing Code You Won't Hate Tomorrow:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/qjtMs7jQxEo" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>??:?? { SOLID } principle:</strong> See tomorrow's log.</li>        <li><strong>08:35 Only one thing is consistent, that is "everything always changing":</strong> <a href="https://youtu.be/qjtMs7jQxEo?t=515" target="_blank" rel="noopener">Link</a>. How do you deal with things always changing? - Prepare your code to be replaced, code will be replaced constantly, you need to make sure your code easy to be replaced.</li>        <li><strong>16:57 Only one indentation:</strong> <a href="https://youtu.be/qjtMs7jQxEo?t=1023" target="_blank" rel="noopener">Link</a>. The purpose is not about the indentation, but to force you to keep the method small, so it will be much easy to read, comprehend, debug. This is also <u>single responsibility</u>.</li>        <li><strong>18:55 Avoid using { else }:</strong> <a href="https://youtu.be/qjtMs7jQxEo?t=1135" target="_blank" rel="noopener">Link</a>. Making the control flow sequential, not tree-like.</li>        <li><strong>20:08 Use object to wrap primative value:</strong> <a href="https://youtu.be/qjtMs7jQxEo?t=1208" target="_blank" rel="noopener">Link</a>. A some example is like <u>date object</u>, request object, they can catch wrong date format, wrong request method and options for you.</li>        <li><strong>22:59 Keep your classes small:</strong> <a href="https://youtu.be/qjtMs7jQxEo?t=1379" target="_blank" rel="noopener">Link</a>. 10 methods max in a class, 10 lines max for each method.</li>      </ol>    </li>    <li><strong>( Webdev ) { input } elements:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="noopener">Link</a>. An abundant list to show many input types. // Also see <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes" target="_blank" rel="noopener">Attributes common to all input types</a> section.</li>    <li><strong>( Webdev ) { input } ,, { type="date" }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Webdev ) { input } ,, { type="time" }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time" target="_blank" rel="noopener">Link</a>. Also see <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#Handling_browser_support" target="_blank" rel="noopener">Handling browser support</a> section.</li>    <li><strong>( Webdev ) { input } ,, Additional attributes ,, { maxlength },{ minlength },{ pattern }:</strong> See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text#pattern" target="_blank" rel="noopener">text input</a> for example (though not limited only to type="text"). The <code>pattern</code> attribute is what I care about here, it accept <strong>a regular expression pattern</strong>.</li>    <li><strong>( Webdev ) ( Browser ) Date picker and { Safari }:</strong> According to <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time" target="_blank" rel="noopener">MDN</a>, <code>Safari</code> will treat <code>&lt;input type="time"&gt;</code> as <code>&lt;input type="text"&gt;</code> (degrades gracefully), and <a href="https://bootstrap-vue.js.org/docs/components/form-input/#input-type" target="_blank" rel="noopener">{ Bootstrap }-{ vue } docs</a> also said --{ Regardless of input type, the value is always returned as a string representation. }--, so I think it is fine to implement html native picker (<code>&lt;input type="date"&gt;</code> or <code>&lt;input type="time"&gt;</code>), and <code>Safari</code> will treat them as text input, so Safari user can type someting like <code>2019-06-12</code> directly. // But you have to specify <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#Handling_browser_support" target="_blank" rel="noopener">{ pattern } attribute</a> to make it works well.</li>    <li><strong>( Webdev ) The &lt;datalist&gt; element:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist" target="_blank" rel="noopener">Link</a>. The HTML &lt;datalist&gt; element contains a set of &lt;option&gt; elements that represent the values available for other controls. // Simular to &lt;select&gt; but can search data list in time.</li>    <li><strong>( Bootstrap ) What does { .form-group } do in Boostrap?:</strong> <a href="https://getbootstrap.com/docs/4.0/components/forms/#form-groups" target="_blank" rel="noopener">Docs</a>, --{  By default it only applies margin-bottom, but it picks up additional styles in .form-inline as needed. Use it with &lt;fieldset&gt;s, &lt;div&gt;s, or nearly any other element. }-- .</li>    <li><strong>( Bootstrap ) Should I put multiple { input } inside { .form-group }?:</strong> In this <a href="https://getbootstrap.com/docs/4.0/components/forms/#form-row" target="_blank" rel="noopener">docs example</a>, you see the "City", "State", "Zip", they seems to be in same line, but they are not achieved with putting altogether in one <code>.form-group</code>, but in one <code>.row</code> (<code>.form-row</code> are almost identical to <code>.row</code> except have no "gutter") and multiple <code>.form-group</code>. So always put only one <code>input</code> (or other atomic form input element) in one <code>.form-group</code>.</li>    <li><strong>( Java ) What is relationship between { JVM },{ JRE },{ JDK },{ OpenJDK },{ Oracle Java }?:</strong> <a href="https://linuxize.com/post/install-java-on-debian-9/#install-openjdk-8" target="_blank" rel="noopener">Link</a>. <a href="https://wiki.debian.org/Java" target="_blank" rel="noopener">Java and Debian</a>.</li>    <li><strong>( Accessibility ) Web Accessibility evaluation tool:</strong> <a href="https://www.handicap-free.nat.gov.tw/Accessible/Detail/2214?Category=3" target="_blank" rel="noopener">NCC ,, 無障礙網路空間服務網 ,, 無障礙網頁測試與協助工具簡介</a>, <a href="https://www.handicap-free.nat.gov.tw/Download/Detail/1375?Category=52" target="_blank" rel="noopener">下載單機版檢測工具Freego 2.0</a>, <a href="http://wave.webaim.org/" target="_blank" rel="noopener">{ WAVE } Web Accessibility evaluation tool</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:01 Learning { html input types },{ date input },{ time input },[ cross browser solution ].</strong></li>        <li><strong>01:35 Sleep:</strong> Insomnia for an hour and more. Don't know why can't sleep well.</li>        <li><strong>10:55 Wake up.</strong></li>        <li><strong>11:10 Uploading blog.</strong></li>        <li><strong>11:15 Laundry, bathroom, misc.</strong></li>        <li><strong>11:37 { Corenet } ,, { postManager }:</strong> "edit mode". Dealing with date and time picker.</li>        <li><strong>12:00 Laundry, cooking, listening to music.</strong></li>        <li><strong>12:35 Eating, listening to music.</strong></li>        <li><strong>13:35 { Corenet } ,, { postManager }:</strong> "edit mode". Dealing with date and time picker ; styling.</li>        <li><strong>15:05 Eating fruit, listening to music, brushing teeth.</strong></li>        <li><strong>15:35 Grocery.</strong></li>        <li><strong>15:55 Listening to music</strong></li>        <li><strong>16:05 { Corenet } ,, { postManager }:</strong> Style tweaking. Too bad I'm wasting time tweaking style here, but I can't help I just want to fix it when it looks non-intuitive.</li>        <li><strong>17:25 Take a nap.</strong></li>        <li><strong>17:50 { Corenet } ,, back-end ,, write PUT logic:</strong> This is the first PUT logic I wrote in { corenet }. I'm doing very slow.</li>        <li><strong>19:35 Bathroom.</strong></li>        <li><strong>19:45 { lahSale } ,, understanding { accessibility } in web development:</strong> <code>Woody</code> messaged me a tool and a entry site to understand { accessibility } in web development.</li>        <li><strong>20:?? Installing Web Accessibility evaluation tool:</strong> Failed to install <code>Freego 2</code> by <code>NCC</code>. I'm going to email them through <code>handicap-free@mail.cisanet.org.tw</code>.</li>        <li><strong>21:45 Cooking.</strong></li>        <li><strong>22:05 Eating, learning "SOLID" [ principle ]-[ methodology ] of programming.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-13<a id="id190613m012627"></a></h2>  <div class="kwCloud">    <div class="itm s2">Methodology ,, { SOLID } principle</div>    <div class="itm s2">{ Javascript }</div>    <div class="itm s1">Front-end</div>  </div>  <ol>    <li><strong>( Programming ) ( Methodology ) "SOLID" principle - quality series by { Severin Perez }:</strong>      <ol>        <li><strong>About:</strong> { Severin Perez } wrote about series of articles about "SOLID" principle. Good quality, because 1. It have good and detailed example. 2. It tells "why" we do these things, the whole context, the before, the after, instead of just giving the definition about the principles.</li>        <li><strong>{ Severin Perez } - { /tags/principles/ }:</strong> <a href="https://severinperez.com/tags/principles/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Writing Flexible Code with the Single Responsibility Principle:</strong> <a href="https://severinperez.com/software/2018/09/07/writing-flexible-code-with-the-single-responsibility-principle.html" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Maintainable Code and the Open-Closed Principle (Javascript example):</strong> <a href="https://severinperez.com/software/2018/09/18/maintainable-code-and-the-open-closed-principle.html" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Making the Most of Polymorphism with the Liskov Substitution Principle:</strong> <a href="https://severinperez.com/software/2018/10/04/making-the-most-of-polymorphism-with-the-liskov-substitution-principle.html" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Avoiding Interface Pollution with the Interface Segregation Principle:</strong> <a href="https://severinperez.com/software/2018/10/09/avoiding-interface-pollution-with-the-interface-segregation-principle.html" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Effective Program Structuring with the Dependency Inversion Principle:</strong> <a href="https://severinperez.com/software/2018/10/11/effective-program-structuring-with-the-dependency-inversion-principle.html" target="_blank" rel="noopener">Link</a>. --{ In his paper on the DIP, Robert C. Martin enumerates the primary characteristics of poorly-designed software as follows: it is <strong>rigid</strong>, meaning that it is hard to change due to the cascading effects of changes in one place into another; it is <strong>fragile</strong>, meaning that changes result in unexpected breakage; and, it is <strong>immobile</strong>, in that you cannot reuse entities due to their entanglement with one another. }--.</li>      </ol>    </li>    <li><strong>( Programming ) ( Methodology ) "SOLID" principle:</strong>      <ol>        <li><strong>S.O.L.I.D The first 5 principles of Object Oriented Design with JavaScript:</strong> <a href="https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa" target="_blank" rel="noopener">Link</a>. Useful article, especially because it is for JavaScript reader. // This article use prototype a lot (and <code>Object.create()</code> and <code>Object.assign()</code>), so I learned these a lot too.</li>        <li><strong>The Definition of a "Bad Design":</strong> <a href="https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view" target="_blank" rel="noopener">Link</a>. --{ 1. It is hard to change because every change affects too many other parts of the system. (Rigidity) 2. When you make a change, unexpected parts of the system break. (Fragility) 3. It is hard to reuse in another application because it cannot be disentangled from the current application. (Immobility). }--.</li>        <li><strong>Open–closed principle:</strong> "software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification". // --{ When a single change to a program results in a cascade of changes to dependent modules, that program exhibits the undesirable attributes that we have come to associate with “bad” design. The program becomes fragile, rigid, unpredictable and unreusable. The open- closed principle attacks this in a very straightforward way. It says that you should design modules that never change. When requirements change, you extend the behavior of such modules by adding new code, not by changing old code that already works. }--. // An javascript <strong>example</strong> is <a href="http://aspiringcraftsman.com/2011/12/19/solid-javascript-the-openclosed-principle/" target="_blank" rel="noopener">this</a>, the example code is too complex, maybe not prefect and maybe not worth to read again. But the general idea is the same, when he want to generate a question/answer form with multiple question/answer, he know that he is going to have different answer &lt;input&gt; type (choice, input, ...), and maybe more in the future, so instead write the render/view/dom-operation logic and "switch" statement directly inside the "view()" function, he wrap those "lable" info, and render/view/dom-operation logic inside the returned object of "choiceQuestionCreator()" and "inputQuestionCreator()".</li>        <li><strong>Dependency inversion principle:</strong> <a href="https://stackoverflow.com/questions/5349003/dependency-inversion-principle-in-javascript#5349478" target="_blank" rel="noopener">Dependency inversion principle with JavaScript example</a>, <a href="https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view" target="_blank" rel="noopener">Example: the “Copy” program</a> (copy(), readKeyboard(), writePrinter()). // --{ 1. High level modules should not depend upon low level modules. Both should depend upon abstractions (an "Interface", or <code>duck typing</code> in Javascript). 2. Abstractions should not depend upon details. Details should depend upon abstractions. }--. // <a href="https://thefullstack.xyz/solid-javascript" target="_blank" rel="noopener">Here</a> says --{ Dependency Injection and Inversion of Controls also mean the same thing. }--.</li>      </ol>    </li>    <li><strong>( JavaScript ) Does JavaScript have the "Interface" type? How to implement { Interface } in JS?:</strong> <a href="https://stackoverflow.com/questions/3710275/does-javascript-have-the-interface-type-such-as-javas-interface" target="_blank" rel="noopener">Link</a>. Unlike other major OOP language, No. But JavaScript uses what's called <code>duck typing</code> (see <a href="https://stackoverflow.com/questions/5349003/dependency-inversion-principle-in-javascript#5349478" target="_blank" rel="noopener">Dependency inversion principle with JavaScript example</a> for example). --{ (If it walks like a duck, and quacks like a duck, as far as JS cares, it's a duck.) If your object has quack(), walk(), and fly() methods, code can use it wherever it expects an object that can walk, quack, and fly, without requiring the implementation of some "Duckable" interface. The interface is exactly the set of functions that the code uses (and the return values from those functions), and with duck typing, you get that for free. }--.</li>    <li><strong>( Javascript ) How to get the name of an object's type:</strong> <a href="https://stackoverflow.com/questions/332422/get-the-name-of-an-objects-type" target="_blank" rel="noopener">Stackoverflow</a>, very comprehensive answer, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener">MDN ,, { instanceof() }</a>. // Conclusion - Use <code>instanceof()</code>, when you can avoid using <code>thing.constructor.name</code>. // I'm thinking this - In traditional when I use <strong>functions</strong>, I always <strong>output</strong> (return) string, or object (with many fields that consists of key-value pair), and I always <strong>input</strong> (function argument) string, or object too. This might sounds ok in simple or trivial works, but when the same arguments with similar "attributes" need to use again and again, and it need to do <strong>validation</strong>, this is when things starts to get messy, I don't know if I have to do validation on <strong>output side, input side, or both?</strong> And if I have to do at both side, now I got so much duplicated code. // Now I'm thinking about passing specific class instance for output (return value) or input (function argument), between functions, so for example I will have a <strong>color class</strong>, which will contain properties, like hue, brightness, chroma, also contain methods, like hue rotation, and auto validation when changing property. So now I can apply this color instance, on both input and output side, they will do the <strong>same validation</strong> across all over the places that passing this data.</li>    <li><strong>( Javascript ) { Object.create() }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">MDN</a>. --{ The Object.create() method creates a new object, using an existing object as the prototype of the newly created object. }--. // This is related to the article <a href="https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa" target="_blank" rel="noopener">S.O.L.I.D The first 5 principles of Object Oriented Design with JavaScript</a>, so go read it if you forget where it comes from.</li>    <li><strong>Iceland's Tourism Revolution:</strong> <a href="https://youtu.be/17oZPYcpPnQ" target="_blank" rel="noopener">Link</a>. This guy (or team?) really like Airplane that much!</li>    <li><strong>( Music ) ( Piano ) Ru's Piano Ru味春捲:</strong>      <ol>        <li><strong>超時空之鑰「風の憧憬 / Yearnings of Wind:</strong> <a href="https://youtu.be/CJ4LjAC3I-8" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>魔力寶貝Cross Gate「法蘭城BGM」:</strong> <a href="https://youtu.be/689IjRQhNqQ" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Your Lie in April OST「Again」| 四月は君の嘘:</strong> <a href="https://youtu.be/rjCynw9EV2o" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Art ) 配色, 對比，低彩度:</strong> <a href="https://youtu.be/XzGc6_4SoXQ?t=261" target="_blank" rel="noopener">Link</a>。</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:25 Organizing blog.</strong></li>        <li><strong>01:30 Watching video.</strong></li>        <li><strong>01:45 Sleep.</strong></li>        <li><strong>09:50 Wake up.</strong></li>        <li><strong>10:00 Uploading blog.</strong></li>        <li><strong>10:15 Listening to music, preparing ingredient.</strong></li>        <li><strong>10:40 Learning "SOLID" [ principle ]-[ methodology ] of programming.</strong></li>        <li><strong>11:30 Cooking.</strong></li>        <li><strong>11:50 Eating, learning "SOLID" [ principle ]-[ methodology ] of programming.</strong></li>        <li><strong>12:?? Deep learning on "SOLID" [ principle ]-[ methodology ] of programming:</strong> I tried to find as much usful resources as possible, but unfortunately I didn't, instead I only find very little resources using Javascript as example and also deep enough.</li>        <li><strong>17:20 Email for troubleshooting - failed to installing Web Accessibility evaluation tool:</strong> Failed to install <code>Freego 2</code> by <code>NCC</code>. Email them through <code>handicap-free@mail.cisanet.org.tw</code>.</li>        <li><strong>17:45 Watching video.</strong></li>        <li><strong>18:25 Taking shower, listening to music.</strong></li>        <li><strong>19:05 Cooking.</strong></li>        <li><strong>19:35 Eating.</strong></li>        <li><strong>20:37 Misc.</strong></li>        <li><strong>21:30 Learning Javascript basics.</strong></li>        <li><strong>20:40 Misc.</strong></li>        <li><strong>21:50 Sleep:</strong> Too sleepy.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-14<a id="id190614m055757"></a></h2>  <div class="kwCloud">    <div class="itm s2">Javascript</div>    <div class="itm s3">Javascript - { Composition } over { Inheritance }</div>    <div class="itm s1">{ Javascript }-{ Prototype }-{ Prototypal }</div>    <div class="itm s2">Javascript ,, { factory function }</div>    <div class="itm s1">{ Functional Programming }-{ Paradigm }</div>    <div class="itm s1">Javascript ,, { class } "sugar"</div>    <div class="itm s1">Javascript ,, { constructor function }</div>  </div>  <ol>    <li><strong>( Javascript ) Object { Composition } over Class { Inheritance }:</strong>      <ol>        <li><strong>Object { Composition } over Class { Inheritance } - video by { Fun Fun Function }:</strong> <a href="https://youtu.be/wfMtDGfHWpA" target="_blank" rel="noopener">Link</a>. Very good example.</li>        <li><strong>3 Different Kinds of Prototypal Inheritance - ES6+ Edition - Eric Elliott:</strong> <a href="https://medium.com/javascript-scene/3-different-kinds-of-prototypal-inheritance-es6-edition-32d777fa16c9" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Also see { Factory Functions } in JavaScript:</strong> <a href="https://youtu.be/ImwrezYhw4w" target="_blank" rel="noopener">Video</a> by <code>Fun Fun Function</code>.</li>        <li><strong>Don't need to use { class },{ new },{ this }, at all:</strong> Above [ resources ],[ people ] suggest that we totally don't need to use these thing in Javascript, at all. We only use things like <code>Factory Function</code>, <code>Object.assign()</code>, <code>closure</code> (so we don't nee <code>this</code>), also thinking like <code>functional programming</code>.</li>        <li><strong>Related to Closure:</strong> <code>Factory Function</code> is related to <code>closure</code>, so we don't nee <code>this</code>.</li>        <li><strong>{ Self } keyword:</strong> At <a href="https://alligator.io/js/class-composition/" target="_blank" rel="noopener">this Composition</a> article, I found the using of <code>self</code> keyword. Not sure what is does, but it seems not important (you can use <code>thiz</code>, <code>that</code>, <code>_this</code>, <code>me</code> if you want ...) because it will overwrite (shadowing) the global <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/self" target="_blank" rel="noopener">{ Window.self }</a> variable, if inner function's own <code>self</code> is declared with <code>var self</code>. (The Window.self read-only property returns the window itself),.</li>      </ol>    </li>    <li><strong>( Javascript ) Factory Functions vs Constructor Functions vs Classes:</strong> <a href="https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e" target="_blank" rel="noopener">Link</a>, also see <a href="https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3" target="_blank" rel="noopener">The Two Pillars of JavaScript ,, Part 1: How to Escape the 7th Circle of Hell</a> (many point of former link come from this one). // Conclusion - This article did do a deep <strong>comparison</strong> between using these 3 practice - <code>class { ... }</code>, <code>smth.prototype.smth = ...</code>, and <code>factory function</code>, to implement an object that <u>hold properties, methods, prototype properties, and prototype methods</u>. Both autohr suggest don't use <code>class keyword</code>, <code>constructor function</code>, but <code>factory function</code> (<code>return Object.create(objThatYouWantToBecomePrototype)</code>). (In JavaScript, any function can create new objects. When it’s not a constructor function, it’s called a factory function).</li>    <li><strong>( Javascript ) Understanding { Prototype } basic concept and how it works:</strong> <a href="https://hackernoon.com/prototypes-in-javascript-5bba2990e04b" target="_blank" rel="noopener">Link</a>. The graph is <strong>very informative!</strong> This is quality resouces for people totoally don't know what Javascript Prototype is, and what to know the underlying concept, how it works. // Other resources on network is either hard to understand, or useless, or not comprehensive (scattered).</li>    <li><strong>( Javascript ) Prototype, video example and show in browser console:</strong> <a href="https://youtu.be/doXpW5AD60Q" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Class 的繼承 - ECMAScript 6 入門:</strong> <a href="http://es6.ruanyifeng.com/#docs/class-extends#super-%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener">Link</a>. Detailed, quality, but the <code>Class keyword</code> might not be helpful for me now, I need to learn more about Prototype. The sidebar have [ more ]-[ rich ] contents though.</li>    <li><strong>( Javascript ) Higher-Order Function, First-Class Function:</strong> <a href="https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad" target="_blank" rel="noopener">Higher-Order Function</a>. So the <code>Higher-Order Function</code> is function that accept another function as arguments (callbacks), or return another function as return value. Not special in Javascript since we use it everyday. The more interesting point is, this is the core underlying concept of how <strong><code>functional programming</code></strong> works. And this make me recall the <code>Open-closed principle</code> of <code>SOLID principle</code>.</li>    <li><strong>( Javascript ) The "0.1 + 0.2 !== 0.3" pitfall:</strong> <a href="https://www.google.com/search?hl=en&q=javascript%200.1%20%2B%200.2" target="_blank" rel="noopener">Google search results</a>. Two best solution - 1. use <code>math.js</code> and [ get rid ]-[ forget ] of those low level problems and focus back on the main goal. 2. The quicker, simpler, also-reliable way is simply use <code>parseFloat((0.1 + 0.2).toFixed(12))</code> (12 is a suggested but not mandatory number by people since it is good enough to handles most use cases) // Also see <a href="https://stackoverflow.com/questions/3337849/difference-between-tofixed-and-toprecision" target="_blank" rel="noopener">toPrecision() vs toFixed()</a>.</li>    <li><strong>( Javascript ) The problem of Inheritance and Class in other language - HTML5DevConf: Doug Crockford "Which Way Is Forward" for JavaScript:</strong> <a href="https://youtu.be/3WgVHE5Augc?t=1914" target="_blank" rel="noopener">Time point</a>. Why Prototypal Inheritance.</li>    <li><strong>( Atom editor ) ( troubleshooting ) Atom scrolls even when not focused:</strong> <a href="https://github.com/atom/atom/issues/15482" target="_blank" rel="noopener">Link</a>, <a href="http://www.webupd8.org/2015/12/how-to-change-mouse-scroll-wheel-speed.html" target="_blank" rel="noopener">imwheel</a>. Fixed  after installing and running <code>imwheel</code>. { keywords: mouse focus tab alt scroll scrolling event focus jump move switch imwheel wheel }.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>05:50 Wake up.</strong></li>        <li><strong>06:00 Uploading blog.</strong></li>        <li><strong>06:05 Learning Javascript basics:</strong> JavaScript Factory Functions vs Constructor Functions vs Classes.</li>        <li><strong>06:10 Fixing { Atom editor } scrolling problem:</strong> Also organizing <code>bash_aliases_main</code>.</li>        <li><strong>07:20 Misc.</strong></li>        <li><strong>07:30 Learning Javascript basics:</strong> JavaScript Factory Functions vs Constructor Functions vs Classes ; JavaScript { Prototype }.</li>        <li><strong>08:40 Cooking.</strong>.</li>        <li><strong>09:10 Eating, watching video, learning Javascript.</strong></li>        <li><strong>09:50 Learning Javascript, Higher-Order Function, First-Class Function.</strong></li>        <li><strong>10:40 Take a nap:</strong> Sleepy.</li>        <li><strong>11:30 Grocery.</strong> Sleepy.</li>        <li><strong>11:55 Watching video:</strong> <a href="https://youtu.be/dFtNdlK1Y_Y" target="_blank" rel="noopener">塑膠垃圾，回收處理技術，富國賣塑膠垃圾給窮國，掩埋派與焚化派</a>, <a href="https://youtu.be/ywBV6M7VOFU" target="_blank" rel="noopener">Everything About Grain Bins (Farmers are Geniuses) - Smarter Every Day </a>。</li>        <li><strong>12:40 Learning Javascript basics:</strong> JavaScript { Prototype }.</li>        <li><strong>13:10 Learning Javascript basics:</strong> JavaScript Factory Functions vs Constructor Functions vs Classes.</li>        <li><strong>14:25 Learning Javascript basics:</strong> Reading article <a href="https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3" target="_blank" rel="noopener">The Two Pillars of JavaScript ,, Part 1: How to Escape the 7th Circle of Hell</a>, understanding the javascript "0.1 + 0.2 !== 0.3" pitfall.</li>        <li><strong>16:10 Grocery.</strong></li>        <li><strong>16:20 Understanding { Prototypal } vs { OOP }, the totally different [ methodology ]-[ mindset ] between Javascript and other OOP language.</strong></li>        <li><strong>17:50 Watching video.</strong></li>        <li><strong>18:40 Understanding { Prototypal } vs { OOP }, the totally different [ methodology ]-[ mindset ] between Javascript and other OOP language.</strong></li>        <li><strong>21:35 Preparing ingredient.</strong></li>        <li><strong>21:40 Keep learning { Prototype }.</strong></li>        <li><strong>22:15 Cooking.</strong></li>        <li><strong>22:40 Eating, learning Object { Composition } vs Class { Inheritance }.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-15<a id="id190615m004054"></a></h2>  <div class="kwCloud">    <div class="itm s1">Javascript</div>    <div class="itm s1">Javascript - { Composition } over { Inheritance }</div>    <div class="itm s1">Methodology ,, { SOLID } principle</div>    <div class="itm s1">{ Functional Programming }</div>  </div>  <ol>    <li><strong>( Methodology ) Why use private method?:</strong> I think the ultimately goal is to decrease coupling between 2 object. If object B depends on object A, object B is going to use some of object A's public method, but object A should make public method as less as possible and set it to <u>private</u>, the reason of this is - --{ Consider how the coupling of two entities affects their respective maintainability. The more a given entity knows about how another one is implemented, the more we can say that they are coupled. Therefore, if one of the two entities is changed, then the other must be changed too. }--. As such, we should reveal as less detail as possible between 2 objects, this will force to decrease coupling.</li>    <li><strong>( Javascript ) ( "this" keyword ) Removing JavaScript’s “this” keyword makes it a better language. Here’s why.:</strong> <a href="https://www.freecodecamp.org/news/removing-javascripts-this-keyword-makes-it-a-better-language-here-s-why-db28060cc086/" target="_blank" rel="noopener">Link</a>. Multiple sources state that don't need to use <code>this</code> at all, use <code>closure</code> instead. // --{ JavaScript is both a functional programming language and a prototype-based language. If we get rid of this, we are left with JavaScript as a <strong>functional programming</strong> language. That is even better. }--.</li>    <li><strong>( Functinal Programming ) "Update as you copy" practice, and deep clone with nested object:</strong> <a href="https://alvinalexander.com/scala/fp-book/disadvantages-of-functional-programming" target="_blank" rel="noopener">Link</a>,, section <u>“Update as you copy” gets worse with nested objects</u>.</li>    <li><strong>( Javascript ) What is most recommended way to loop through an array?:</strong> <a href="https://stackoverflow.com/questions/3010840/loop-through-an-array-in-javascript" target="_blank" rel="noopener">Link</a>. I think it's <code>.forEach()</code>, you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">array.every()</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">array.some()</a> if you want to exit the iteration before it fully ends. // The differences between <code>array.forEach()</code>, <code>array.every()</code>, <code>array.some()</code>, is - 1. How to break the array. 2. The return value (not that inside callback). So basically the behavior of <code>array.every()</code> is similar to <code>AND</code> operator, while <code>array.some()</code> is similar to <code>OR</code> operator.</li>    <li><strong>( Javascript ) Why is using "for...in" with array iteration a bad idea?:</strong> <a href="https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-a-bad-idea" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) 張懸 - 我想你要走了:</strong> <a href="https://youtu.be/uYfr3s84-mM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { DooPiano } cover - { Twice } - Likey:</strong> <a href="https://youtu.be/70Gm350zA9U" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Tarzan -Son Of Man (Phil Collins):</strong> <a href="https://youtu.be/-WcHPFUwd6U?t=99" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Jim Yosef - Firefly:</strong> <a href="https://youtu.be/x_OwcYTNbHs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Elektronomia - Sky High:</strong> <a href="https://youtu.be/TW9d8vYrVFQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:42 Brushing teeth, misc.</strong></li>        <li><strong>01:05 Watching video.</strong></li>        <li><strong>01:15 Misc.</strong></li>        <li><strong>01:20 Sleep.</strong></li>        <li><strong>09:50 Wake up.</strong></li>        <li><strong>09:51 Uploading blog.</strong></li>        <li><strong>10:00 Email for troubleshooting - failed to installing Web Accessibility evaluation tool:</strong> Failed to install <code>Freego 2</code> by <code>NCC</code>. Email them through <code>handicap-free@mail.cisanet.org.tw</code>.</li>        <li><strong>10:30 Bathroom.</strong></li>        <li><strong>10:50 Reading { SOLID } principle from some article:</strong> Could not focus, messy mind.</li>        <li><strong>11:20 Cooking.</strong></li>        <li><strong>11:32 Keep reading { SOLID } principle.</strong></li>        <li><strong>15:20 Keep reading { Composition over Inheritance }-{ methodology }.</strong></li>        <li><strong>16:10 Buying drinks, cookies.</strong></li>        <li><strong>16:20 Misc.</strong></li>        <li><strong>16:25 Watching video.</strong></li>        <li><strong>17:35 Listening to music, reading Javascript articles:</strong> Not very focus. // <code>SOLID</code> ,, <code>Interface Segregation Principle</code>.</li>        <li><strong>18:45 Listening to music, reading Javascript articles:</strong> <code>Composition</code> over <code>Inheritance</code>.</li>        <li><strong>??:?? [ Testing ]-[ experiment with ] the { Javascript }-{ Composition }, writing my own testing code:</strong> To prove it can works, before I applying them somewhere in the future.</li>        <li><strong>23:00 Cooking.</strong></li>        <li><strong>23:30 Eating.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-16<a id="id190616m003513"></a></h2>  <div class="kwCloud">    <div class="itm s1">Javascript</div>    <div class="itm s2">{ Function Composition }</div>    <div class="itm s2">{ Object Composition }</div>    <div class="itm s1">{ Javascript }-{ Object Concatenation }</div>  </div>  <ol>    <li><strong>( Programming ) What is { Function Composition } and { Object Composition }?:</strong> <a href="https://medium.com/javascript-scene/composing-software-an-introduction-27b72500d6ea" target="_blank" rel="noopener">Link</a>. // Why write a <strong>concise and dense</strong> code? It is not harder to read, but in fact easier to read, and reduce the bug? // --{ Class inheritance is just one kind of composite object construction ... Favor object composition over class inheritance }--, --{  inheriting all properties from an ancestor in a class hierarchy, causes a large variety of well-known problems ... The tight coupling problem, The fragile base class problem, The inflexible hierarchy problem, The duplication by necessity problem, The gorilla/banana problem ... }--. // --{ The most common form of object composition in JavaScript is known as <strong>object concatenation</strong> (aka <strong>mixin composition</strong>). }--.</li>    <li><strong>( Programming ) ( Book ) { Robert C. Martin } - { Clean Code }:</strong> <a href="https://severinperez.com/software/2018/09/10/reflections-on-clean-code.html" target="_blank" rel="noopener">Link</a>. Found at article by <code>Severin Perez</code>.</li>    <li><strong>( Javascript ) { Inheritance } problem, and { Composition } example - Michael Ries:</strong> <a href="https://medium.com/code-monkey/object-composition-in-javascript-2f9b9077b5e6" target="_blank" rel="noopener">Link</a>. Very good article with clearly explanation, it shows the problem of classical inheritance, and the Javascript { Composition } practice (example code). // --{ The Problems of Classical Inheritance ... These problems are so common that there are names for them. Option 1 is known as the <u>duplication by necessity problem</u>. Option 2 is called the <u>Gorilla / Banana problem</u>. }--. // Don't use `new` and `this`. // --{ Note that we could have many functions on the object returned by canCast(), perhaps one for each spell, but it’s more future-safe to have only one. }--. </li>    <li><strong>{ Javascript }-{ Composition } testing note:</strong> Successfully have ways to keep and update the <code>state</code> that was already inside closure of "can-do..." methods. It's very simple. // First, appending new state properties to other old ones, use <code>Object.assign(oldState, {newStateProp1: val1}, {newStateProp2: val2});</code>, the old state properties will be updated (overwritten if necessary), but the refefence will not [ break ]-[ lost ] (if you don't do any <code>state <strong>=</strong> {...} thing.</code>). (Notice, you don't need the <code>return value</code> of <code>Object.assign()</code> here, since it write the <code>oldState</code> on the fly). // Second, appending new "can-do..." methods to other old ones, use <code>Object.assign(oldCanDoMethodsCollection, newCanDoMethod1(oldState), newCanDoMethod2(oldState))</code>. // You can see we only put everyting in [ one state ]-[ one closure ]-[ one reference ]. If we want to [ update ]-[ append ] something, we don't create the new one, but always use <code>Object.assign()</code> to achieve it, the <strong>reference will not [ break ]-[ lost ], and everything will be in one (not more) place</strong>. // Notice the <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/object/assign#Deep_Clone" target="_blank" rel="noopener">deep clone pitfall</a> of <code>Object.assign()</code>.</li>    <li><strong>( Javascript ) 3 Different Kinds of Prototypal Inheritance - by Eric Elliott:</strong> <a href="https://medium.com/javascript-scene/3-different-kinds-of-prototypal-inheritance-es6-edition-32d777fa16c9" target="_blank" rel="noopener">Link</a>. [ Good ]-[ quality ] resource to reference, but I think <strong>I don't need to know { Inheritance } or { Prototype } anymore</strong>, I didn't read it at all.</li>    <li><strong>( Music ) { DooPiano } cover - { TWICE } - YES or YES:</strong> <a href="https://youtu.be/l1mHjeXrqNw" target="_blank" rel="noopener">Link</a>. Very clean, relaxing, still dynamic and creative.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:40 Sleep.</strong></li>        <li><strong>08:50 Wake up.</strong></li>        <li><strong>08:55 Uploading blog.</strong></li>        <li><strong>09:05 Bathroom.</strong></li>        <li><strong>09:15 Fixing { github found 3 vulnerabilities on treegb/treegbBlog's } problem:</strong> So to update <code>hexo</code>, use <code>npm update</code> (this will not update <code>next theme</code>). To update <code>next theme</code>, use <code>git pull</code> <strong>under <code>next theme</code> directory</strong>, then resolve the merge conflict (because you generally will overwrote custom config onto  theme default beforehand), then <code>git add -A ; git commit -m '...'</code>.</li>        <li><strong>10:22 Preparing ingredient.</strong></li>        <li><strong>10:30 Reading article { Reflections on Clean Code }:</strong> <a href="https://severinperez.com/software/2018/09/10/reflections-on-clean-code.html" target="_blank" rel="noopener">Link</a></li>        <li><strong>11:00 Cooking, [ testing ]-[ experiment with ] the { Javascript }-{ Composition }.</strong></li>        <li><strong>11:30 Eating, [ testing ]-[ experiment with ] the { Javascript }-{ Composition }:</strong> The [ testing ]-[ experiment ] makes me leaned a lot, because if I don't do [ testing ]-[ experiment ] before leaning more { Javascript }-{ Composition } articles, I won't know the real problem I will faced, and the key I need to be careful about, so I won't really "understand" it.</li>        <li><strong>12:00 Reading articles about { Javascript }-{ Composition }.</strong></li>        <li><strong>16:25 Finally figure out how to merge 2 closure (inside variable) together", cooking.</strong></li>        <li><strong>16:55 Eating.</strong></li>        <li><strong>17:20 [ Testing ]-[ experiment with ] the { Javascript }-{ Composition }.</strong></li>        <li><strong>18:20 Take a nap.</strong></li>        <li><strong>18:55 Wake up, watching video, taking shower, grocery.</strong></li>        <li><strong>20:21: Watching video:</strong> <a href>Link</a>.</li>        <li><strong>21:25: [ Testing ]-[ experiment with ] the { Javascript }-{ Composition }:</strong> Successfully have ways to keep and update the <code>state</code> that was already inside closure of "can-do..." methods.</li>        <li><strong>22:45: Watching video.</strong></li>        <li><strong>22:55: Reading Javascript article.</strong></li>        <li><strong>23:55: Watching video:</strong> <a href="https://youtu.be/GoLvhh89law" target="_blank" rel="noopener">TWICE - LIKEY - Part Changed Ver</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-17<a id="id190616m235556"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Function Composition }</div>    <div class="itm s1">{ Functional Programming }</div>    <div class="itm s1">{ Design pattern }-{ Javascript }</div>    <div class="itm s1">{ Javascript }-{ data type }</div>    <div class="itm s1">Javascript</div>  </div>  <ol>    <li><strong>( Functional Programming ) { Function Composition } For Every Day Use:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>About:</strong> Explain why we use { Function Composition } in Functional Programming. And making some examples.</li>        <li><strong>Why function { Currying }?:</strong> Function <code>Currying</code> helps you easy to make a long [ pipe ]-[ compose ], because when all function you use have only one argument, and one return (simple), it will become more easy to [ pipe ]-[ compose ] . --{ Function composition requires you to write your functions in a composable way. This means your functions must have <strong>1 input and 1 output</strong>. Functions with multiple inputs must be <strong>curried</strong>. }--.</li>        <li><strong>Helps code reusable:</strong> --{ You will achieve the highest level of code reuse with function composition. Making our code reusable should always be one of our goals. }--.</li>        <li><strong>The { compose() } and { pipe() } function:</strong> The <code>compose()</code> and the <code>pipe()</code> functions the article used, is actually the custom function by author, and he also teach you how to simply do it yourself with <code>.reduceRight()</code> and <code>.reduce()</code>.</li>      </ol>    </li>    <li><strong>Article - { JavaScript Design Patterns } - by Soumyajit Pathak:</strong>      <ol>        <li><strong>Conclusion:</strong> Go read book <code>Addy Osmani’s { Learn JavaScript Design Patterns }</code> instead. // <code>GOF</code> seems not very useful for me (at least right now), many of these pattern are design to deal with classic OOP language, since Javascript is more advantage for functional programming, it seems not related and not helpful. But they wisdom of how these [ people ],[ pattern ] deal with classic OOP, is something I leaned more.</li>        <li><strong>Link:</strong> <a href="https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>About { GOF } and Addy Osmani’s { Learn JavaScript Design Patterns }:</strong> --{  In this article, we will mainly talk about design patterns from an object-oriented point of view and in the context of their usability in modern JavaScript. That is why many classic patterns from GoF (Gang of Four) may be omitted and some modern patterns from sources like Addy Osmani’s Learn JavaScript Design Patterns will be included. }--.</li>        <li><strong>About { OReilly }-[ Addy Osmani's Learning JavaScript Design Patterns ]-[ 2012 ]:</strong> See <a href="#id190607m014418">content at 2019-06-07</a>.</li>        <li><strong>Singleton Pattern:</strong> <code>Mongoose</code> (Node.js ODM library for MongoDB) utilizes the singleton pattern, there is need only one instance for a class. Maybe this is anti pattern in most case.</li>        <li><strong>Mediator Pattern:</strong> Also see <a href="https://zh.wikipedia.org/zh-tw/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">Wikipedia</a>. When I first saw the example in the article, I don't get why we need so highly coupled code. Then later I got it, those airplane are getting data from other airplanes, they need to highly interactive with each other, so without <code>Mediator Pattern</code> this will be even more coupled.</li>        <li><strong>Observer Pattern:</strong> Maybe not useful for Javascript, some people said in Javascript you use Functional Programming ways to do things, you use Callback function instead.</li>        <li><strong>State Pattern:</strong> Hmm ... this article use Traffic Light as example, but ... I never seen traffic light have sequence of green, red, yellow, green, red, yellow ... . // This pattern might [ be useful ]-[ have more value ] when different state have very different behavior? </li>      </ol>    </li>    <li><strong>{ Coding Tech } - Understanding CSS Custom Properties:</strong> <a href="https://youtu.be/IGlQjnH2Eyk" target="_blank" rel="noopener">Link</a>. // Change the value, not the varialbe, see <a href="https://youtu.be/IGlQjnH2Eyk?t=962" target="_blank" rel="noopener">16:03 (this is wrong)</a>, <a href="https://youtu.be/IGlQjnH2Eyk?t=973" target="_blank" rel="noopener">16:13 (this is right).</a> // <a href="https://youtu.be/IGlQjnH2Eyk?t=1010" target="_blank" rel="noopener">16:50 Custom property for responsive design</a>.</li>    <li><strong>( Javascript ) { NaN } data type:</strong> <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener">Link</a>. The only way to check if something is <code>NaN</code>, is to use <code>Number.isNaN()</code>, <strong>there is no other way to do this!</strong> (don't even use <code>isNaN()</code>). The quirks again, never successfully remember it after few weeks.</li>    <li><strong>( Javascript ) Truthy and and Falsey:</strong> --{ JavaScript has 6 falsey values: undefined, null, 0, NaN, "" (the empty string) and false. All other values are truthy (include nagative numbers!) }--.</li>    <li><strong>( Javascript ) What is the "symbol" primitive data type?:</strong> <a href="https://stackoverflow.com/questions/36797206/what-is-the-symbol-primitive-data-type-in-javascript" target="_blank" rel="noopener">Link</a>. Prevent accidentally property name conflicts between different methods that shared same piece of object.</li>    <li><strong>( Music ): Andreas Waldetoft - Leaving Shore - game { Hearts of Iron II }:</strong> <a href="https://youtu.be/OLTAFOpZm7k" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { DooPiano } cover - { TWICE } - YES or YES:</strong> <a href="https://youtu.be/l1mHjeXrqNw" target="_blank" rel="noopener">Link</a>. Very clean, relaxing, still dynamic and creative.</li>    <li><strong>( 自然語言 ) { 柴知道 } - 为什么牛肉叫 beef 而不是 cowmeat？:</strong> <a href="https://youtu.be/ItCgJmBhXcE" target="_blank" rel="noopener">Link</a>. 規範語言 (典範英語) 違反語言自然發展，自然演變的特性。 --{ 它們或許不規範，不簡潔，不高級，但是正是語言蓬勃生命力的所在。 }--.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:20 Sleep.</strong></li>        <li><strong>08:55 Wake up.</strong></li>        <li><strong>09:00 Uploading blog.</strong></li>        <li><strong>09:05 Watching video.</strong></li>        <li><strong>09:35 Reading article about { Function Composition }.</strong></li>        <li><strong>10:50 Cooking.</strong></li>        <li><strong>11:10 Eating, leaning, watching video.</strong></li>        <li><strong>12:20 Reading { JavaScript Design Patterns }:</strong> <a href="https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>14:10 Grocery, buy drinks:</strong> Sleepy.</li>        <li><strong>14:30 Keep reading { JavaScript Design Patterns }.</strong></li>        <li><strong>14:50 Take a nap:</strong> Sleepy.</li>        <li><strong>15:15 Keep reading { JavaScript Design Patterns }.</strong></li>        <li><strong>17:05 Watching video.</strong></li>        <li><strong>19:10 Watching video { Understanding CSS Custom Properties }.</strong></li>        <li><strong>19:30 Preparing ingredient.</strong></li>        <li><strong>19:35 Reading book { OReilly }-{ Head first javascript }:</strong> Understand caveats of <u>Types</u> in Javascript.</li>        <li><strong>21:00 Cooking, keep reading book { OReilly }-{ Head first javascript }.</strong></li>        <li><strong>21:45 Eating, keep reading book { OReilly }-{ Head first javascript }.</strong></li>        <li><strong>22:25 { lahSale } ,, help checking online site ,, if it looking properly as localhost.</strong></li>        <li><strong>23:15 Misc.</strong></li>        <li><strong>23:20 Watching video:</strong> <a href="https://youtu.be/NMP4kv0CTdg" target="_blank" rel="noopener">{ 公共電視 有話好說 } - 200萬+1港人怒吼！林鄭道歉修例暫緩</a>, <a href="https://youtu.be/NMP4kv0CTdg?t=2888" target="_blank" rel="noopener">港府為何讓步？北京顧忌什麼？</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-18<a id="id190618m002017"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ Functional Programming }</div>    <div class="itm s1">Javascript ,, { getter }, { setter }</div>    <div class="itm s1">Seeing bigger picture and the "form"</div>  </div>  <ol>    <li><strong>{ Functional Programming } basics - part 1 ~ part 6:</strong>      <ol>        <li><strong>Part 1 - replace for loop with recursion:</strong> <a href="https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536" target="_blank" rel="noopener">Link</a>. According to principle of { Functional Programming }, there is "good" reason to do this, that is - always try to pursue <strong>Immutability</strong> of initial variables. Once a variables is set (assigned), it should be constant and never changed, we only do [ runtime ]-[ danamic ] value changes and keep passing it in and out between functions, but not changing the declared variable itself. // --{ Functional Languages cannot eliminate Side Effects, they can only confine them. Since programs have to interface to the real world, some parts of every program must be impure. The goal is to minimize the amount of impure code and segregate it from the rest of our program. }--. </li>        <li><strong>Problem that { Functional Programming } can solves while { OOP } can't solves:</strong> <a href="https://medium.com/@cscalfani/why-programmers-need-limits-3d96e1a0a6db" target="_blank" rel="noopener">Why Programmers Need Limits</a> ,, read only these 3 sections - Complexity, Reusability, Global Mutable State. // --{ ... making all data structures immutable, i.e. once a variable has a value it can never change ... This doesn’t mean that state cannot change. It just means that to do so you have to pass the current state into a function which produces a new state. }--. </li>      </ol>    </li>    <li><strong>( Drawing ) ( Shading ) 為什麼雞蛋的側邊反而是光影最暗的地方？:</strong> <a href="https://youtu.be/lA6cDC68nLI?t=226" target="_blank" rel="noopener">Link</a>. 真好的解釋，因為雞蛋那個地方的 polygon 主光跟反射光都幾乎沒有接觸到，而是平行擦過。// 這些知識跟商業攝影也有關係。</li>    <li><strong>( Art ) ( Drawing ) Artist { Wlop }:</strong> <a href="https://www.bilibili.com/read/cv235889/" target="_blank" rel="noopener">Link</a>. What I leaned again - <strong>always focus on bigger form</strong> first, then details later (missing detail is also totally fine), never reversed.</li>    <li><strong>( Music ) { TWICE } - The Best Thing I Ever Did:</strong> <a href="https://youtu.be/CfUGjK6gGgs" target="_blank" rel="noopener">Link</a>. At first I'm feeling like the melody is kind of boring, plain, lack of creative, but after some time it becomes a more relaxed background music that suit for studying and focusing.</li>    <li><strong>( Javascript ) { Function Expression } vs { Function Declaration }? What are the different use case?:</strong> My conclusion - there is just some minor differences, expecially the "undefined" problem of <code>Function Expression</code> (if the invoked line is putting before declared line), but there is <strong>no any major advantage using <code>var = function () {...}</code> (<code>Function Expression</code>)</strong>, actully, 2 of them are functioning the same. I think this is <strong>just the personal [ taste ]-[ preference ]-[ style ]</strong>, but I prefer <code>Function Declaration</code> more because it is much more <strong>readable</strong>, the code looks just more clean and simple. // References - <a href="https://softwareengineering.stackexchange.com/questions/165831/what-is-the-advantage-of-assigning-a-function-to-a-var" target="_blank" rel="noopener">What is the advantage of assigning a function to a var?</a>, <a href="https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname" target="_blank" rel="noopener">What is the differences between 2?</a>.</li>    <li><strong>( Javascript ) { getter }, { setter } and { closure }:</strong>      <ol>        <li><strong>Use it to solve [ break ]-[ reference lost ] problem:</strong> I found this trick, I can use { getter } to prevent the <strong>[ break ]-[ reference lost ]</strong> of an object which one of it's property value is a object reference. For example, if I have a object <code>objWithClosure</code> <code>{ foo: bar, changeBar () { bar = "Break!" }, getBar () { return bar; } }</code> which it's surrounding closure has one variable <code>var bar = {a: "aa", b: "bb"}</code>, now you execute <code>objWithClosure.changeBar()</code>, then if you use <code>objWithClosure.getBar()</code> you will get the right result, but <strong>if you use <code>objWithClosure.foo</code> you will get the wrong (old) result!</strong> To solve this problem, instead using <code>foo: bar</code>, you can use <code>get foo () { return bar; }</code> (<strong>which is actually setting the <code>getter</code> here</strong>), since the <code>getter</code> will also always "lock" to the closure varialbes, it will give you correct anwer instead of [ break ]-[ reference lost ].</li>        <li><strong>When should I use { getter },{ setter }?:</strong>          <ol>            <li>I think they are just as same as other methods inside an object. But the biggest benefits (for now I can come up for) is:</li>            <li><strong>.It solves the "[ break ]-[ reference lost ] of closure variables" problem.</strong></li>            <li><strong>.You don't have to type extra brackets "()":</strong>, you use something like <code>obj.prop.innerProp</code> (getter), <code>obj.prop.innerProp = "My new value"</code> (setter), instead of <code>obj.prop.getInnerProp()</code> and <code>obj.prop.setInnerProp("My new value")</code>. It just makes the code looks more clean, thought it is doing the same thing for you.</li>            <li><strong>.You are not allowed to change the value:</strong> If you don't set the <code>setter</code>.</li>            <li><strong>Also see:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty()</a>.</li>          </ol>        </li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:35 Sleep.</strong></li>        <li><strong>09:00 Wake up.</strong></li>        <li><strong>09:10 Uploading blog.</strong></li>        <li><strong>09:13 Reply Woody.</strong></li>        <li><strong>09:15 Misc.</strong></li>        <li><strong>09:30 Watching video.</strong></li>        <li><strong>10:15 Cooking.</strong></li>        <li><strong>11:00 Eating:</strong> Learning Javascript ,, { Function Expression } vs { Function Declaration }.</li>        <li><strong>12:15 { Corenet } ,, refactoring:</strong> Remove all <code>class</code> keyword.</li>        <li><strong>13:15 Take a nap.</strong></li>        <li><strong>13:40 Wake up, watching video:</strong> <a href="https://youtu.be/4y5hxnZ2lxo" target="_blank" rel="noopener">{ 看电影了没 } - 美国穷人的教育困境，纪录片 - { 等待超人 }</a>.</li>        <li><strong>14:15 { Corenet } ,, refactoring:</strong> Remove all <code>class</code> keyword. Use pure function and closure to achieve "object" and "state".</li>        <li><strong>17:55 Grocery, misc:</strong> Finished { Corenet } ,, refactoring.</li>        <li><strong>18:35 Cooking, watching video, misc.</strong></li>        <li><strong>19:10 Eating, watching video:</strong> <a href="https://youtu.be/i1_DwmkfRtE" target="_blank" rel="noopener">Twice Disrespecting Nayeon / "You never treated me like an Unnie! "</a>, <a href="https://youtu.be/O03d3TdLj4A" target="_blank" rel="noopener">Nayeon being protective Unnie</a>.</li>        <li><strong>21:45 Brushing teeth.</strong>.</li>        <li><strong>21:55 { Corenet } ,, PUT logic.</strong>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-19<a id="id190619m001040"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Functional Programming }</div>    <div class="itm s1">{ Functional Programming } ,, "Side effects"</div>    <div class="itm s1">{ Functional Programming } ,, "Immutability"</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Javascript</div>    <div class="itm s2">Music theory</div>    <div class="itm s1">Music composition</div>  </div>  <ol>    <li><strong>( Functional Programming ) ( Book ) Professor { Frisby } - { Mostly Adequate Guide to Functional Programming }:</strong>      <ol>        <li><strong>Online reading link:</strong> <a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/" target="_blank" rel="noopener">中文線上版</a>, <a href="https://drboolean.gitbooks.io/mostly-adequate-guide-old/content/" target="_blank" rel="noopener">英文線上版</a>.</li>        <li><strong>Chapter 3, What is "pure" function:</strong> <a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch3.html" target="_blank" rel="noopener">Link</a>. Why <strong>Immutability</strong> is so crucial in Functional Programming?</li>        <li><strong>Chapter 4, { Currying } and { Curry }-[ helper function ]:</strong> <a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch4.html" target="_blank" rel="noopener">Link</a>. The { Curry }-[ helper function ] convert normal function with multiple arguments into "Curry style function". You can write you own one (it's easy to get one from stackoverflow, or google it), or simple use <code>lodash</code> ,, <code>var curry = require('lodash/curry');</code>. // { Currying } is useful for cases like <strong>callback funciton</strong> that need more extra environment variables (by <strong>closure</strong>), since you can't have multiple arguments for these callback functions (because the <code>signature</code> is fixed for methods like <code>array.map</code>, <code>array.filter</code> ...), you have to create a closure to put those environment variables <strong>beforehand</strong>.</li>        <li><strong>Chapter 5, { Pointfree }:</strong> <a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch5.html" target="_blank" rel="noopener">Link</a>. // --{ Pointfree 模式指的是永遠不必說出你的資料, function 不必提及要操作的資料是什麼樣的。}--. // <a href="https://www.freecodecamp.org/news/how-point-free-composition-will-make-you-a-better-functional-programmer-33dcb910303a/" target="_blank" rel="noopener">"Point-free style — aims to reduce some of the visual clutter by removing unnecessary parameter-argument mapping."</a>. // I Still don't understand this. // --{ 不過請注意，pointfree 就像一把雙刃劍，有時會混淆視聽。並不是所有的 functional 程式碼都為 pointfree，不過這沒關係。可以使用他的時候就使用，不能使用的時候就用普通的 function。 }--. So I think it is ok to not to use <code>Pointfree</code>.</li>      </ol>    </li>    <li><strong>( Functional Programming ) { Coding Tech } - understand Functional Programming from basics in ES6:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/FYXpOjwYzcs" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>23:45 { Object.freeze() }:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=1425" target="_blank" rel="noopener">Link</a>. This solved what I don't understand long time ago, that where can I store and modify the final state? The state <strong>must be</strong> stored (and modified) in somewhere! I must able to change value in some variable! Yeah, finally I got it, Functional Programming is not 100% no state, it is like you can have state, but just keep it as little as possible, and especially don't use state inside most core function (and never mutate your arguments inside these functions!), only use state and do state operation in <u>outer function</u> that mostly deal with <strong>I/O</strong> operations.</li>        <li><strong>32:45 { Partial } function, that doing something simliar to closure:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=1965" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>35:42 { Currying }:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=2142" target="_blank" rel="noopener">Link</a>. Improving version of { Partial } function?</li>        <li><strong>37:47 "Piecing" it together - some more practical examples of FP:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=2267" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>42:19 { Function Composition }:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=2539" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>51:30 { Recursion } ,, don't worry about itterating 100000 times breaks the Call Stack:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=3090" target="_blank" rel="noopener">Link</a>. ES6 have something called "Tail Call Optimization". And honestly, I think most people don't need to worry about those rare use cases too.</li>        <li><strong>52:12 Another way to write { Recursion } - No Call Stack accumulating:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=3132" target="_blank" rel="noopener">Link</a>. I'm not focus (and care) about the optimization, I'm focus about the different way to write { Recursion }.</li>        <li><strong>56:08 Suggesting the same book too - Professor { Frisby } - { Mostly Adequate Guide to Functional Programming }:</strong> <a href="https://youtu.be/FYXpOjwYzcs?t=3368" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Functional Programming ) Make a custom function that convert uncurried function to curried one:</strong> <a href="https://www.quora.com/What-are-the-advantages-of-currying-in-functional-programming" target="_blank" rel="noopener">Link</a> ,, Ömer Kaşdarma's answer ,, that piece of javascript code, dense, but complex logic, works, but don't know how it works.</li>    <li><strong>( Music theory ) A Beginner's Guide to Music Theory:</strong> <a href="https://youtu.be/n2z02J4fJwg" target="_blank" rel="noopener">Link</a>. Fundamental knowledge!</li>    <li><strong>( Music theory ) Music Theory Distilled - Part 1: Melody:</strong> <a href="https://youtu.be/mdEcLQ_RQPY" target="_blank" rel="noopener">Link</a>. More advanced than above one. Only watch part of it.</li>    <li><strong>( Music theory ) Music Theory Distilled - Part 2: Harmony:</strong> <a href="https://youtu.be/Su95gTHo4Ks" target="_blank" rel="noopener">Link</a>. More advanced than above one. Not watched yet. // --{ Whenever you are trying to understand a piece of music, keep in mind, <strong>that the rules are broken all the time, they are only hints, so the music may do things that your theory does not predict or understand, never let theory become a constraint on your expression</strong>. }--.</li>    <li><strong>( Music composition ) How to make an Orchestral film score music:</strong> <a href="https://youtu.be/pqcwGikgWJQ?t=941" target="_blank" rel="noopener">Link</a>. Informative! Because the workflow looks much more intuitive from creators perspective (compare to some videos), and the software interface is designed intuitive, even for outsider.</li>    <li><strong>( Music composition ) ( Application ) Tuning the volumn of each note:</strong> <a href="https://youtu.be/IabpePDNXjg?t=279" target="_blank" rel="noopener">Link</a>. Wow, cool, this natural and fine tuning hugely reduce the robotic feeling of software, makes them more like playing with physical keywoboards.</li>    <li><strong>( Music theory ) How to Imitate a Whole Lot of Hollywood Film Music In Four Easy Steps:</strong> <a href="https://youtu.be/YSKAt3pmYBs" target="_blank" rel="noopener">Link</a>. I don't even want to lean it, just feeling cool.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:01 Reading article about { Functional Programming }.</strong></li>        <li><strong>01:15 Sleep.</strong></li>        <li><strong>08:05 Wake up.</strong></li>        <li><strong>08:06 Uploading blog.</strong></li>        <li><strong>08:20 Surfing net.</strong></li>        <li><strong>08:35 Watching video:</strong> <a href="https://youtu.be/6hfgyliH6Es" target="_blank" rel="noopener">{ 公共電視 有話好說 } - [ 尼特族 ]-[ NEET ]-[ 啃老族 ]</a>.</li>        <li><strong>09:35 Learning { Funtional Programming }:</strong> I don't get any benifits we get of using <code>Currying</code>. // <a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch4.html" target="_blank" rel="noopener">第 4 章：Curry（柯里化）</a>, --{ 這裡示範的是一種「pre-load（預先載入）」的能力，透過傳遞一至兩個參數，就能得到一個記住這些參數的新 function。 }--.</li>        <li><strong>11:25 Take a nap.</strong></li>        <li><strong>13:00 Wake up, buying drinks and snack.</strong></li>        <li><strong>13:20 Watching video.</strong></li>        <li><strong>14:00 Watchihng video of { Funtional Programming }.</strong></li>        <li><strong>14:30 Watchihng video of cats:</strong> Distraction. <a href="https://youtu.be/DLG1jbPrp2Q" target="_blank" rel="noopener">Defending our Bird Nest from the Neighbor’s Cats</a>.</li>        <li><strong>14:38 Keep watchihng video of { Funtional Programming }.</strong></li>        <li><strong>16:35 Brushing teeth.</strong></li>        <li><strong>16:45 Learning { Funtional Programming } ,, { Currying },{ Compose }.</strong></li>        <li><strong>18:25 Preparing ingredient.</strong></li>        <li><strong>18:30 Misc.</strong></li>        <li><strong>19:10 Cooking, watching video.</strong></li>        <li><strong>19:35 Eating, watching video:</strong> Mostly about Music Composition and Music Theory.</li>        <li><strong>22:15 Reading article about javascript ecosystem fundamental knowledge:</strong> Like npm, ES6 module, common.js, require.js webpack.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-20<a id="id190620m000034"></a></h2>  <div class="kwCloud">    <div class="itm s1">Javascript</div>    <div class="itm s3">Front-end ecosystem</div>    <div class="itm s1">Node.js</div>    <div class="itm s1">{ Npm }</div>    <div class="itm s1">{ CommonJs } module</div>    <div class="itm s1">{ ES module }</div>    <div class="itm s2">{ Webpack }</div>    <div class="itm s1">{ Transpile }</div>    <div class="itm s1">{ Babel }</div>    <div class="itm s1">{ Vue.js }</div>    <div class="itm s1">{ Corenet }</div>  </div>  <ol>    <li><strong>( Javascript ) ( Front-end ) Javascript ecosystem fundamental knowledge - Alex Tzeng, 曾苔眠:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://ithelp.ithome.com.tw/users/20107440/ironman/1355?page=1" target="_blank" rel="noopener">JavaScript - JS 生態系及週邊工具整理 系列</a>.</li>        <li><strong>About:</strong> 系列文。<strong>讓我大幅的了解整個生態系統，和 bigger picture。</strong> 我一開始只是想知道 common.js 是什麼東西，結果發現愈挖愈多東西，於是想要趁機 [ 補充一下自己常識的不足 ],[ 增加自己的視野 ] ,, 關於 Front-end 的整個生態系統。 // Including Npm, ES6 module, Common.js, require.js, Webpack, Babel, Vue.js ... . // This article series were published around <strong>2017-12, are current enough</strong>.</li>        <li><strong>系列文 - 打造 Messenger Extension - Day 4 - Vue.js 基本介紹 + 優缺點:</strong> <a href="https://ithelp.ithome.com.tw/articles/10190976" target="_blank" rel="noopener">Link</a>. <strong>Mentioned about Youtuber - <code>Fun Fun Function</code></strong>, this is the main reaosn why I keep this li because it is the evidence of <code>Fun Fun Function</code> been suggested by multiple sources. // Compare the differences between <code>Vue</code> [ style ]-[ philosophy ] and <code>react</code> style.</li>        <li><strong>系列文 - 你所不知道的 JavaScript 模組化歷史，NPM & Module :</strong> <a href="https://ithelp.ithome.com.tw/articles/10191168" target="_blank" rel="noopener">Link</a>. <code>script loader</code> 的誕生 (是過渡時期的暫時解決方案)。</li>        <li><strong>系列文 - 歡迎來到大分叉時代 - AMD 與 CommonJS 的發展 :</strong> <a href="https://ithelp.ithome.com.tw/articles/10191574" target="_blank" rel="noopener">Link</a>. --{ 基本上 Webpack 的概念很有趣，他是這樣想的 - 「在我實作瀏覽器版本的 CommonJS 模組時，可不可以一起支援 npm 上的套件，這樣我就可以使用 npm 來整理我的函式庫了」 - 這一舉動簡直是驚為天人 ... }--. // How CommonJS loading module is sync, not async like ES module in front-end.</li>        <li><strong>系列文 - 前端也需要編譯？Transpile、Compile、Minify、Uglify 基本介紹:</strong> <a href="https://ithelp.ithome.com.tw/articles/10191992" target="_blank" rel="noopener">Link</a>. <code>Webpack</code> 跟 <code>transpile</code> 是有關係的。// 好像會跟 <code>Babel</code> 也有關？ // 好像也會編譯 Front-end framework 的語法 (Vue specific syntax)？</li>        <li><strong>系列文 - Webpack 入門教學，零設定:</strong> <a href="https://ithelp.ithome.com.tw/articles/10192578" target="_blank" rel="noopener">Link</a>. <code>Webpack</code> 跟 <code>transpile</code>, <code>require()</code> (可以使用模組) (CommonJS) 有什麼關係？</li>        <li><strong>系列文 - Webpack - module、bundle 和安裝 :</strong> <a href="https://ithelp.ithome.com.tw/articles/10192845" target="_blank" rel="noopener">Link</a>. 不用看，只是在講什麼是 "module bundle"，and <code>Webpack</code> [ generated ]-[ transpiled ] <code>bundle.js</code> file.</li>        <li><strong>系列文 - 使用 webpack.config.js 來設定 webpack ! :</strong> <a href="https://ithelp.ithome.com.tw/articles/10193343" target="_blank" rel="noopener">Link</a>. 看看就好，不用真的學，用到再學，因為 <code>vue-cli</code> (?) 已經把這些事情自動化了 (？)</li>        <li><strong>系列文 - webpack.config.js - 設定 module 來編譯不同類型的檔案 :</strong> <a href="https://ithelp.ithome.com.tw/articles/10193788" target="_blank" rel="noopener">Link</a>. 原來 <code>webpack</code> 在做的事情是這樣的概念! // 什麼是 <strong><code>loader</code></strong>? (css-loader, sass-loader, style-loader, vue-loader, react-loader, babel-loader ...). // --{ <strong>webpack 不只打包 JavaScript，而是連同 React, Vue, CSS, Babel 都可以透過 webpack 來編譯</strong> }--.</li>        <li><strong>系列文 - 不只是瀏覽器！JavaScript 征服世界的第一步 - Node.js (Day 8):</strong> <a href="https://ithelp.ithome.com.tw/articles/10191345" target="_blank" rel="noopener">Link</a>. 什麼是 Javascript <code>runtime</code> (實作)? (我的理解是 ECMAScript 的 implementation)。Node.js 跟 SpiderMonkey？</li>        <li><strong>系列文 - 什麼是 Browserlist？設定 Autoprefixer、Stylelint 來支援你想要的任何瀏覽器！:</strong> <a href="https://ithelp.ithome.com.tw/articles/10192300" target="_blank" rel="noopener">Link</a>. 什麼是 <code>Autoprefixer</code>? 自動為 CSS 裡面的 rules 加上 prefix, 比如使用 <code>display: grid;</code> 以後，<code>Autoprefixer</code> 會自動另外增加 <code>display: -ms-grid;</code> (給 IE 11 看的).</li>      </ol>    </li>    <li><strong>( Javascript ) ( Front-end ) Relation between CommonJS, AMD and RequireJS?:</strong> <a href="https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs" target="_blank" rel="noopener">Link</a>. Conclusion - Very complex and I don't want to know the detail, basically you use <code>module.exports = ...</code> and <code>requrie(...)</code> in back-end (common.js, will load with <strong>"sync"</strong>). For front-end, you can use <code>ES6 module</code> (will load with <strong>"async"</strong>), but for <code>vue.js</code> framework, you use like back-end does.</li>    <li><strong>( Javascript ) ( Front-end ) All about using ES6 (ES) module:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://www.sitepoint.com/using-es-modules/" target="_blank" rel="noopener">Link</a>. Great article!</li>        <li><strong>Syntax of { export } and { import }:</strong> <a href="https://blog.csdn.net/crystal6918/article/details/74906757#es6-modules" target="_blank" rel="noopener">Link1</a>, <a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/module_system.html" target="_blank" rel="noopener">link2</a>.</li>        <li><strong>Conclusion:</strong> Not mature yet, use <code>bundle</code> instead (bundler like Webpack.js). And if you are using <code>Vue.js</code> you don't need to do this manually.</li>        <li><strong>Problem ,, many CDN still don' support loading with ES module way:</strong> <code>lodash</code> ,, --{ Popular libraries are starting to be published as ES modules now, however they’re still targeting <strong>bundlers</strong> and not direct imports. }--.</li>        <li><strong>Preloading ES Modules:</strong> <code>rel="modulepreload"</code> (Preloading ES Modules) helps you to reduce the go back and forth network request amount when your ES6 module have nested dependency, but this is still not mature and still have long way to go. Also see <a href="https://developers.google.com/web/updates/2017/12/modulepreload" target="_blank" rel="noopener">All about Preloading ES Modules</a>.</li>      </ol>    </li>    <li><strong>( Javascript) Data type - { Map } vs { Object } - What and when?:</strong> <a href="https://medium.com/front-end-weekly/es6-map-vs-object-what-and-when-b80621932373" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) ( Back-end ) ( Node.js ) The Node Knowledge Challenge - Learning the Node.js Runtime:</strong> <strong>Not very useful, forget about this article</strong>. // <a href="https://jscomplete.com/learn/node-beyond-basics" target="_blank" rel="noopener">Link</a>, <a href="https://www.freecodecamp.org/news/before-you-bury-yourself-in-packages-learn-the-node-js-runtime-itself-f9031fbd8b69/" target="_blank" rel="noopener">old link</a> (backup only). // --{ Before you bury yourself in packages, learn the Node.js runtime itself. I believe the majority of developers learn Node the wrong way. Most tutorials, books, and courses about Node focus on the Node ecosystem – not the Node runtime itself. They focus on teaching what can be done with all the packages available for you when you work with Node, like Express and Socket.IO, rather than teaching the capabilities of the Node runtime itself. }--. // Test yourself with those questions to see what you still miss for understanding Node.js.</li>    <li><strong>( Npm ) kik, left-pad, and npm incident:</strong> <a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm" target="_blank" rel="noopener">The point of view from NPM</a>. // <a href="https://www.zhihu.com/question/41694868" target="_blank" rel="noopener">The point of view from Azer</a>. // The point of view from Kik (their lawyer email to Azer): --{ We don't mean to be a dick about it, but it's a registered Trademark in most countries around the world and if you actually release an open source project called kik, our trademark lawyers are going to be banging on your door and taking down your accounts and stuff like that — and we'd have no choice but to do all that because you have to enforce trademarks or you lose them. Can we not come to some sort of a compromise to get you to change the name without involving lawyers? Is there something we could do for you in compensation to get you to change the name? }--. // About Npm and Azer, in their own perspective and viewpoint, actually they are both doing right. While Kik is just a company and only consider about it's own benefits.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:01 Uploading blog.</strong></li>        <li><strong>00:15 Reading article about Node.js:</strong> The Node Knowledge Challenge - Learning the Node.js Runtime.</li>        <li><strong>01:45 Reading article about Javascript Module, { Webpack }.</strong></li>        <li><strong>03:00 Watching video.</strong></li>        <li><strong>03:30 Sleep.</strong></li>        <li><strong>04:00 Wake up:</strong> Insomnia.</li>        <li><strong>04:01 Misc.</strong></li>        <li><strong>06:10 Sleep again.</strong></li>        <li><strong>14:45 Wake up, preparing ingredient.</strong></li>        <li><strong>14:53 Watching video, cooking, eating.</strong></li>        <li><strong>16:05 Watching video { Promises - Part 8 of Functional Programming in JavaScript }:</strong> <a href="https://youtu.be/2d7s3spWAzo" target="_blank" rel="noopener">Link</a>. Not helpful, I thought this video were going to provide me some caveats I need to know when using <code>Promise</code> in Functional Programming.</li>        <li><strong>17:00 Reading article about { nmp }-{ left-pad } incident.</strong></li>        <li><strong>18:40 Reading articles ,, "Javascript ecosystem fundamental knowledge" series.</strong></li>        <li><strong>21:25 Taking shower, cooking.</strong></li>        <li><strong>22:17 Eating, watching video:</strong> So sleepy, don't want to do any work.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-21<a id="id190621m001018"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Debugging in { Vue.js }</div>    <div class="itm s1">Date and time - { ISO 8601 }</div>    <div class="itm s1">Tired, low energy</div>    <div class="itm s2">Wasting time</div>    <div class="itm s1">Boring</div>  </div>  <ol>    <li><strong>( Programming ) 10 Programming side projects to boost your resume:</strong> <a href="https://purelyfunctional.tv/guide/programming-projects-resume/" target="_blank" rel="noopener">Link</a>. Maybe is a useful article, for giving advice to people who want to build side project. // There might be more useful article here, like <a href="https://purelyfunctional.tv/guide/5-hurdles-of-hirability/" target="_blank" rel="noopener">The 5 hurdles of hirability</a>. // And my thought is, if you look from the "results" perspective, most side project people build, is <strong>pretty boring</strong> and reinventing the wheel (todo list apps, twitter bot ...), but if you look at "middle process" perspective, <strong>during the process of solving problem</strong> could be fun (if the problem to be solved is not too challenging, or to simple). So maybe I have to change my altitude, learn to <strong>make the fun</strong> (or deceive myself?) during the process of solving problem. This <a href="https://youtu.be/eJg3yuAAawA?t=97" target="_blank" rel="noopener">Self balancing robot</a> should be fun to make. And even more, seeking problem to be solved intended like <a href="https://softwareengineering.stackexchange.com/questions/756/where-can-i-find-programming-puzzles-and-challenges" target="_blank" rel="noopener">Where can I find programming puzzles and challenges?</a>, might be fun for some people like to challenge themselves.</li>    <li><strong>( Vue.js ) Debugging in { Vue.js }:</strong>      <ol>        <li><strong>My conclusion:</strong> No, you can't get the line number where error thrown, but you can <strong>[ reasoning ]-[ guessing ] manually, until you gradually have clue</strong> where the bug comes from. Yeah this sucks, but this is how people deal with the debugging currently. // Although you can't know the error line number, but sometimes you can at least know the component name.</li>        <li><strong>Problem overview:</strong> This <strong>bugs me again and again!</strong> I always want to know how but still I don't find any tutorials! How the hell can I get the line number where error occurs in javascript in vue? The default error messages in web console is useless, since you only see line number of <u>app.js</u>, not the real Vue component's line number since Webpack transpiled everything already.</li>        <li><strong>Debugging in VS Code:</strong> <a href="https://vuejs.org/v2/cookbook/debugging-in-vscode.html" target="_blank" rel="noopener">Link</a>. Conclusion - All of the method mentioned here, is for [ people ]-[ cases ] to <strong>guess</strong> where the actual bug is hidden (<strong>actively</strong>), not for [ people ]-[ cases ] to <strong>know</strong> where the error thrown ,, line number is located (<strong>passively</strong>). // All these methods are all realated to getting the state, or setting breakpoint. // Tools including Vue Devtools firefox plugin, debugger statement.</li>        <li><strong>Getting more specific information about runtime errors? (error line number)</strong> <a href="https://forum.vuejs.org/t/getting-more-specific-information-about-runtime-errors/19137" target="_blank" rel="noopener">Link</a>. --{ Sourcemaps are notoriously tricky ... About the second point, the actual error code, that’s not that easy, because the template is converted into a render function, and mapping an Error in that Javascript function to a line in the template <strong>is not really possible.</strong> }--, sigh ... so what is the point of source map?</li>        <li><strong>Are error messages normally this useless or are sourcemaps not working?:</strong> <a href="https://www.reddit.com/r/vuejs/comments/69ct8c/are_error_messages_normally_this_useless_or_are/" target="_blank" rel="noopener">Link</a>. Yeah, source map are pretty useless. So it seems I found many people instead of trying to fix the bug from the hinting of line number from web console, they use some guesses like this case ... works, but very unintuitive and painful.</li>      </ol>    </li>    <li><strong>{ ISO 8601 } - { Moment.js } - date and time:</strong>      <ol>        <li><strong>ISO 8601:</strong> <a href="https://zh.wikipedia.org/zh-tw/ISO_8601" target="_blank" rel="noopener">ISO 8601</a>. The <u>ISO 8601</u> page shows what is the meaning of <code>14:30:05Z</code> and <code>22:30:05+08:00</code>. // So I think <code>2019-06-21T08:22:43.317Z</code> = <code>2019-06-21T16:22:43.317+08:00</code> = <code>2019-06-21T02:22:43.317-06:00</code>, they all means the same [ time ]-[ moment ] on the earth though they have different <u>local time</u> and <u>time zone</u>! It doesn't matter where you located (country), at that moment the England time is always <code>2019-06-21 08:22:43</code>.</li>        <li><strong>Moment.js Documentation:</strong> <a href="https://momentjs.com/docs/" target="_blank" rel="noopener">Moment.js Documentation</a>.</li>        <li><strong>Convert object to { ISO 8601 } string:</strong> The <code>Moment.js</code> use <code>moment().format(moment.defaultFormat)</code> (or no argument inside <code>.format()</code>) to convert <code>moment</code> object to <code>ISO 8601</code> string, while native javascript <code>Date</code> object use <code>(new Date()).toISOString()</code> to convert <code>Date</code> object to <code>ISO 8601</code> string.</li>        <li><strong>Submit date time from front-end to back-end:</strong> This is my plan - in front-end you use MomentJs object, when submit you convert it to ISO 8601 (string), then when back-end received it it converted to MomentJs object and also do validation. And finally before it saved into MongoDb it converted to Javascript native Date object (maybe this step could be omitted, if MongoDb could also accept MomentJs object as input).</li>      </ol>    </li>    <li><strong>{ Fun Fun Function } Why separating files into html, css, javascript, is not "Separation of concerns"?:</strong> <a href="https://youtu.be/0ZNIQOO2sfA" target="_blank" rel="noopener">Link</a>. Also, "long function are bad" is not always true, you should split your function by considering "Separation of concerns", not how long it is.</li>    <li><strong>How Air Traffic Control Works - { Wendover Productions }:</strong> <a href="https://youtu.be/C1f2GwWLB3k" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:15 Sleep.</strong></li>        <li><strong>07:50 Wake up.</strong></li>        <li><strong>07:57 Uploading blog.</strong></li>        <li><strong>08:10 Watching video, misc:</strong> Low energy, can't do anything. // <a href="https://youtu.be/9DXaTGSomBI?t=2958" target="_blank" rel="noopener">台灣禁止巴拉刈 (農藥)</a>， { Twice } related, <a href="https://youtu.be/DNiGDoYuqKY" target="_blank" rel="noopener">Dog on Remote Island Near Belize is Rescued and Brought Home | The Dodo</a>.</li>        <li><strong>10:14 Setting up testing environment:</strong> Now I instead of using single html file to do all javascript testing, I build a dummy, reusable <code>Vue</code> project for testing purpose. The reason of this is it allows me to install npm modules. With single html file it is hard to do this.</li>        <li><strong>11:15 Figuring out how to debug in vue:</strong> This <strong>bugs me again and again!</strong></li>        <li><strong>11:55 Take a nap:</strong> Too tired, sleepy.</li>        <li><strong>12:40 Wake up, buying drinks and snacks.</strong></li>        <li><strong>12:55 Keep figuring out how to debug in vue:</strong></li>        <li><strong>14:20 { Corenet } ,, PUT logic.</strong>.</li>        <li><strong>14:55 Bathroom.</strong>.</li>        <li><strong>15:05 Testing date and time related logic.</strong></li>        <li><strong>??:?? { Corenet } ,, date and time related logic:</strong> From input to backend.</li>        <li><strong>17:22 Watching video, wasting a lot of time:</strong> <code>Twice</code>, <a href="https://youtu.be/fS1dTKOqvkk" target="_blank" rel="noopener">Kids Jump On Moving Trucks To Steal To Feed Families</a>, <a href="https://youtu.be/rbOuExTgu8M" target="_blank" rel="noopener">Deadly School Rivalry Behind Clashes At Bangkok's MBK</a>, <a href="https://youtu.be/babZU-Jsx_A" target="_blank" rel="noopener">Is Aung San Suu Kyi A Fading Icon?</a>, <a href="https://youtu.be/FNhpHSvMzOg" target="_blank" rel="noopener">Risky Jobs: The Lift Fixer</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-22<a id="id190621m235821"></a></h2>  <div class="kwCloud">    <div class="itm s3">{ Stoicism }</div>    <div class="itm s1">柯文哲</div>    <div class="itm s2">Simplicity - dealing with complexity elephant</div>    <div class="itm s1">Newbie can join many open source project</div>    <div class="itm s1">People, lives</div>    <div class="itm s1">{ Front-end } and { back-end }</div>    <div class="itm s1">What is consider a terrible API?</div>    <div class="itm s1">{ PATCH } vs { PUT } method</div>    <div class="itm s2">"State" always causing "side effect"</div>    <div class="itm s1">{ Corenet }</div>  </div>  <ol>    <li><strong>( 柯文哲 ) ( Stoicism ) 20190615 陽明大學畢業典禮 - 人都會死，所以世俗的成功與失敗，不過是你生命中的一部分:</strong>      <ol>        <li><strong>09:00:</strong> <a href="https://youtu.be/uQh_JpjPLwE?t=540" target="_blank" rel="noopener">Link</a>. --{ 你會想通一件事情，人最後都會死掉 ... 只有人死而平等這句話才是對的 ... 不管 ... 人，最後都會死掉，你想通這件事情，不管你一生中是成功還是失敗 ... 都是生命中的一部分 ... 會讓你有非常強的抗壓性 ... 讓我們對不確定的事情有很強的忍受性 ... }--.</li>        <li><strong>12:00:</strong> <a href="https://youtu.be/uQh_JpjPLwE?t=721" target="_blank" rel="noopener">Link</a>. --{ 我常常看到什麼叫做 ... 一家歡樂一家愁 ... 器官交換 }--.</li>        <li><strong>20:44:</strong> <a href="https://youtu.be/uQh_JpjPLwE?t=1244" target="_blank" rel="noopener">Link</a>. --{ 所以，人事無常，悲歡離合，生離死別，看淡人生。 }--.</li>      </ol>    </li>    <li><strong>Simplicity - dealing with complexity elephant - { Rich Hickey }:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/rI8tNMsozo0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>02:30 Simplicity means reduce interleaving, not cardinality:</strong> <a href="https://youtu.be/rI8tNMsozo0?t=150" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>{ FreeCodeCamp } - How I went from being a contributor to an Open Source project maintainer:</strong> <a href="https://www.freecodecamp.org/news/how-i-went-from-being-a-contributor-to-an-open-source-project-maintainer-acd8a6b316f5/" target="_blank" rel="noopener">Link</a>. Newbie can join many open source project. Don't work in isolation, this article gives you some hint to lead you from being a lone software developer, to contributor to collaboration with online open source community, of any github project. Though the project in this article might not be very useful (and practical), but it is fun (it seems) to collaborating together. --{  The main idea is to have fun and build something collectively. }--.</li>    <li><strong>The book that changed my social life - book in 1936:</strong> <a href="https://youtu.be/dKUmXnorrlQ?t=156" target="_blank" rel="noopener">Link</a>. The book is <code>How to win friends and influential people - 1936</code>. I'm not interested in the book, I'm interested but this point that might could be general applied for socializing - --{ lesson one: It's all about the other person. }--.</li>    <li><strong>{ Fun Fun Function } - Depression can kill people (people will kill themselves):</strong> <a href="https://youtu.be/BZAVtDR-SQs?t=663" target="_blank" rel="noopener">Link</a>. --{ I am very aware that depression is a deadly disease, it is not uncommon that a depression kills you ... we as a culture over trivialize the problem of feeling unhappy at work ... }--.</li>    <li><strong>( Inspiration ) ( Touching ) Sleep-Deprived Dog Has A Nightmare Every Night:</strong> <a href="https://youtu.be/VqzlnpvsoB4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( REST API ) ( Back-end ) What is consider a terrible API? - Fixing with { Backend In the Frontend } architecture:</strong> <a href="https://hackernoon.com/frontend-in-the-backend-a-pattern-for-cleaner-code-b497c92d0b49" target="_blank" rel="noopener">Link</a>. I think the <code>Backend In the Frontend</code> is using the <code>SOLID</code> principle ,, <code>dependency inversion principle</code>, it is basically an huge <code>interface</code>.</li>    <li><strong>( REST API ) { PATCH } vs { PUT } method:</strong> <a href="https://medium.com/backticks-tildes/restful-api-design-put-vs-patch-4a061aa3ed0b" target="_blank" rel="noopener">Link</a>. It's important to note that <code>PUT</code> is used to replace the entire resource, it doesn't do partial updates like what <code>PATCH</code> does! // My conclusion is, you don't need to use <code>PATCH</code> in the most of the case, you thought it is more efficient, but the truth is it will <strong>makes the logic more complex! Just update the entire same data to database, make the system more simple</strong> in bigger picture, even it is a bit more "wasteful". // But the <strong>bigger reason is related to the <code>state</code></strong>. According to <a href="https://stackoverflow.com/questions/28821936/why-would-you-use-put-instead-of-patch" target="_blank" rel="noopener">here</a>, with <code>PATCH</code>, you have some <u>side effect</u> just like what Functional Programming says about OOP, you have problem that comes from having different <code>state</code>, because <code>PATCH</code> is for providing an <strong>instruction</strong> to change a resource.</li>    <li><strong>( Front-end ) ( Back-end) How to avoid business logic (validation) duplication?:</strong> <a href="https://stackoverflow.com/questions/37502754/how-to-avoid-repeating-business-logic-between-client-and-server" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Functional programming ) How do you compose JavaScript functions with multiple parameters?:</strong> <a href="https://jrsinclair.com/articles/2019/compose-js-functions-multiple-parameters/" target="_blank" rel="noopener">Link</a>. Though the 2 example this article given ,, I still not yet encounter this kind of problem (redundant lines of code), but I start to understand why people using Functional Programming always bring out these topics - currying, function composition, again and again.</li>    <li><strong>( JSON ) How big is "too big" for JSON?:</strong> <a href="https://joshzeigler.com/technology/web-development/how-big-is-too-big-for-json" target="_blank" rel="noopener">Link</a>. Don't need to consider the JSON size limit, in practical usage there is no limit, the browser will crash first (if that JSON file is absurdly huge) before you reach the limit.</li>    <li><strong>( Javascript ) { Generator function } and { yield } keyword:</strong> <a href="https://youtu.be/QOnUcU8U_XE" target="_blank" rel="noopener">Link1</a> (<code>Fun Fun Function</code>), <a href="https://youtu.be/ategZqxHkz4?t=1496" target="_blank" rel="noopener">link2</a> (<code>Fun Fun Function</code>). // <a href="https://stackoverflow.com/a/51484556/10607630" target="_blank" rel="noopener">Use Async/Await 99% of the time over Generators</a>. So <strong>forget about <code>Generator function</code>, you don't need to use it</strong> in most cases. It is just the Javascript ,, developing history ,,legacy.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:25 Sleep.</strong></li>        <li><strong>07:40 Wake up.</strong></li>        <li><strong>07:44 Uploading blog.</strong></li>        <li><strong>08:00 Misc:</strong> Reflecting, preparing ingredient, cooking, eating. // Life is such a big paradox, when you thought you found the rule of life and philosophy, you don't, it always changing. And your [ perspective ]-[ interpretation ] always changing back and forth too. Something feel like meaningful, could become meaningless in next month, something feel like fun, could become boring in next month. And one more month it changes again ... .</li>        <li><strong>09:50 Reading articles about open source collaboration, understanding { Generator function }:</strong> Not really important stuff.</li>        <li><strong>10:45 Take a nap.</strong></li>        <li><strong>11:55 Buying drinks, fruit.</strong></li>        <li><strong>12:10 Watching video.</strong></li>        <li><strong>12:55 Watching video { Simplicity Matters }-{ Rich Hickey }, reading some articles.</strong></li>        <li><strong>14:30 Watching video:</strong> <code>Twice</code>.</li>        <li><strong>14:37 Understanding { PATCH } vs { PUT } method:</strong> This is related to (and will hugely change how I design) the architecture of { Corenet }. I <strong>got a valuable lesson</strong> that I shouldn't use <code>PATCH</code> method, but use <code>PUT</code> method instead. Glad I know this just before I was going to write the code using <code>PATCH</code> way.</li>        <li><strong>17:00 Cooking.</strong></li>        <li><strong>17:20 Eating, watching video.</strong></li>        <li><strong>20:40 { Corenet }:</strong> Moslty not pushing forward. I once again stuck into writing some unimportant code again, related to how to structure the config data. So now I will give up making my "object" ,, property private, I just make them naked, keep it as simeple as possible. I give up using Setter and Getter, because they increase the complexity and duplication of code, and I don't really see the value it can prevent the error since that are too rare to happened in this moment.</li>        <li><strong>23:15 Watching video.</strong></li>        <li><strong>23:55 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-23<a id="id190623m080746"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Hallucination }-[ Point of view ]</div>    <div class="itm s1">{ Corenet }</div>  </div>  <ol>    <li><strong>( Thought ) ( Hallucination ) ( Stoicism ) [ Point of view ]-[ perspective ] - optimistic or pessimistic? - good or bad? - meaningful or meaningless?:</strong>      <ol>        <li><strong>About { Hallucination }-{ Stoicism }-{ Point of view }:</strong> I recently come up with the [ idea ]-[ thought ] that, Eveything surrounding us in our life -          <ol>            <li><strong>Is not inherently good or bad.</strong></li>            <li><strong>Have no any meaning (meaningless), anything is just physically functioning in the universe, but they have no any meaning.</strong></li>            <li><strong>The good or bad, meaningful or meaningless, all depends our Point of View, how we interpret it.</strong></li>          </ol>        </li>        <li><strong>{ TED Talks } - Your brain hallucinates your conscious reality - { Anil Seth }:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/lyu7v7nWzfo" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>08:24:</strong> <a href="https://youtu.be/lyu7v7nWzfo?t=504" target="_blank" rel="noopener">Link</a>. <code>Hallucination</code> is uncontrolled <code>perception</code>, <code>perception</code> is controlled <code>hallucination</code>.</li>            <li><strong>08:44:</strong> <a href="https://youtu.be/lyu7v7nWzfo?t=524" target="_blank" rel="noopener">Link</a>. If we agree with our <code>hallucination</code>, we call it "reality".</li>            <li><strong>10:56:</strong> <a href="https://youtu.be/lyu7v7nWzfo?t=656" target="_blank" rel="noopener">Link</a>. ... is enough evidence for the brain to make it's best guess the <strong>fake hand</strong> is in fact a part of the body.</li>          </ol>        </li>        <li><strong>Story - Is the glass of water Half Empty or Half Full?:</strong>          <ol>            <li><strong>Half full or half empty? - children’s story/parable:</strong> <a href="https://www.sabbathschoolpersonalministries.org/4-8-2017-childrens-story.pdf" target="_blank" rel="noopener">Link</a>. Even a little girl with cancer she is being super optimistic.</li>            <li><strong>Do you only see the cost? or value?:</strong> <a href="https://tborash.wordpress.com/2014/09/12/half-empty-half-full-thats-only-half-the-story/" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>( 柯文哲 ) ( Stoicism ) 20190615 陽明大學畢業典禮 - 人都會死，所以世俗的成功與失敗，不過是你生命中的一部分:</strong>          <ol>            <li><strong>09:00:</strong> <a href="https://youtu.be/uQh_JpjPLwE?t=540" target="_blank" rel="noopener">Link</a>. --{ 你會想通一件事情，人最後都會死掉 ... 只有人死而平等這句話才是對的 ... 不管 ... 人，最後都會死掉，你想通這件事情，不管你一生中是成功還是失敗 ... 都是生命中的一部分 ... 會讓你有非常強的抗壓性 ... 讓我們對不確定的事情有很強的忍受性 ... }--.</li>            <li><strong>12:00:</strong> <a href="https://youtu.be/uQh_JpjPLwE?t=721" target="_blank" rel="noopener">Link</a>. --{ 我常常看到什麼叫做 ... 一家歡樂一家愁 ... 器官交換 }--.</li>            <li><strong>20:44:</strong> <a href="https://youtu.be/uQh_JpjPLwE?t=1244" target="_blank" rel="noopener">Link</a>. --{ 所以，人事無常，悲歡離合，生離死別，看淡人生。 }--.</li>          </ol>        </li>        <li><strong>( Inspiration ) 創意的三大要素 - { 抖抖村 }:</strong>          <ol>            <li><strong>Conclusion:</strong> 藝術家，或更廣泛來說，很有創意的人，在某種程度上都是對現實做某種程度的扭曲，修改，加上自己主觀的解讀，表現出 ((只屬於)) 自己世界裡看到的視角。</li>            <li><strong>Link, and content:</strong> <a href="https://youtu.be/C6UNHHRzlc0" target="_blank" rel="noopener">Link</a>. 1. 大量吸收知識識 (基於現實) 2. 發散思考 (新東西) 3. 收斂思考 (有價值的東西). // 繪畫學習的三個階段 - 1. 兒童般的亂畫 (全發散思考) 2. 系統規範的繪畫 (全收斂思考) 3. 突破規範的 "童貞" (發散 + 收斂)。</li>          </ol>        </li>        <li><strong>{ Twice } - all members having high degree of Imagination, { Hallucination }, Optimism:</strong> <a href="https://youtu.be/u9wicpzEtcU" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Albert Einstein quote - "Imagination is more important than knowledge":</strong> <a href="https://en.wikiversity.org/wiki/Talk:Albert_Einstein_quote" target="_blank" rel="noopener">People having some discussion and debate here</a>.</li>      </ol>    </li>    <li><strong>( Music ) { TWICE } - Headphones:</strong> <a href="https://youtu.be/u4Ov6aEwKzE" target="_blank" rel="noopener">Link</a>. Pure rhythm, very little melody.</li>    <li><strong>( Music ) { TWICE } - Jelly jelly:</strong> <a href="https://youtu.be/C6uRLMVijvY" target="_blank" rel="noopener">Link</a>. Pure rhythm, very little melody.</li>    <li><strong>( Music ) { TWICE } - Wake Me Up:</strong> <a href="https://youtu.be/DdLYSziSXII" target="_blank" rel="noopener">Link</a>. Pure rhythm, very little melody.</li>    <li><strong>( HTTP ) Difference between { Accept } and { Content-Type } HTTP headers:</strong> <a href="https://webmasters.stackexchange.com/questions/31212/difference-between-the-accept-and-content-type-http-headers" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( HTTP ) Common Header type - request and response:</strong> <a href="https://www.cnblogs.com/111testing/p/6037579.html" target="_blank" rel="noopener">Link</a>. Throw away info.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>08:05 Wake up.</strong></li>        <li><strong>08:10 Uploading blog, fixing keyboard.</strong></li>        <li><strong>08:40 Thinking about { Hallucination }-[ Point of view ].</strong></li>        <li><strong>10:15 Cooking, eating, watching video.</strong></li>        <li><strong>12:20 { Corenet }:</strong> Still very unsure and can't decide how to perfectly set up a dead simple javascript object that contains property (states) and methods (operate those states), even I already spent so much time on this. I don't want  to use <code>this</code> keyword, and this brings me some cost I have to paid with this decision.</li>        <li><strong>13:10 Taking nap:</strong> Sleepy and not productive.</li>        <li><strong>13:50 Wake up, watching video.</strong></li>        <li><strong>13:56 { Corenet }:</strong> Finished [ changing ]-[ applying ] all the javascript object to follow the new convention, that don't use <code>this</code> keywords, but pure <code>closure</code>.</li>        <li><strong>16:17 Eating red beans, watching video.</strong></li>        <li><strong>16:43 Taking shower.</strong></li>        <li><strong>17:17 Watching video.</strong> <a href="https://youtu.be/DwQ7psiU23I" target="_blank" rel="noopener">{ Fun Fun Function } - Top developer habits - Perseverance</a>. --{ Programming is a marathon, not a sprint. }--, --{ You can't be this person with low productivity for a long time and then a burst of productivity at the end of project, you need to be this person that has a medium level of productivity all the time. }--.</li>        <li><strong>17:50: Grocery, buying drinks:</strong> Sleepy.</li>        <li><strong>18:15: { Corenet }:</strong> PUT logic, both front-end and back-end. // Still sleepy at first, don't know why, low productivity. But later become much more focused and have much more clear mind.</li>        <li><strong>21:15 Cooking, { corenet }.</strong></li>        <li><strong>21:45 Eating, watching video.</strong></li>        <li><strong>23:05 { Corenet }:</strong> PUT logic, both front-end and back-end. Starts to think about how to write PUT logic for <code>model</code> that update parts of data.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-24<a id="id190624m000326"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ JYP }-{ Park Jin young }</div>    <div class="itm s2">{ Twice }</div>    <div class="itm s1">Intimate relationship</div>    <div class="itm s1">[ Personality ]-[ real ]-[ true ]-[ honest ]-[ consistent ]-[ open ]-[ frank ]-[ plain ]</div>  </div>  <ol>    <li><strong>Intimate relationship:</strong>      <ol>        <li><strong>{ Twice } - A Story of Yogurt Aloe by Momo &amp; Sana - "Selfish Momo":</strong> <a href="https://youtu.be/IoejbhFM_RM" target="_blank" rel="noopener">Link</a>. My posture is very similar to <a href="https://youtu.be/Qj_FCM7THDI" target="_blank" rel="noopener">this dog</a>.</li>        <li><strong>{ Twice } - The best of SaMo (sana &amp; momo) - japan gay line:</strong> <a href="https://youtu.be/qTW3WM7cEQc" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Twice } - Times When Momo Was Too Cute:</strong> <a href="https://youtu.be/KsBiDPAgxaA" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Twice } - Twice as a gay drama (mostly Saida, Samo, Dahmo):</strong> <a href="https://youtu.be/nFt6qMvS-cY" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>{ Twice } 1st tour - every member is crying on stage:</strong> <a href="https://youtu.be/Imj9xKI4-0c" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Twice } - Knock knock:</strong> <a href="https://youtu.be/8A2t_tAjMz8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Mashup of { TWICE } - Fancy, TT, Likey, LOA, DTNA, Yes Or Yes...:</strong> <a href="https://youtu.be/pOBx_EYRoLQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) Mashup of { TWICE } - HAPPY HAPPY, What Is Love?, Heart Shaker:</strong> <a href="https://youtu.be/vt-b8-1qcWM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { JYP }-{ Park Jin young }:</strong>      <ol>        <li><strong>{ JYP } - Don't Leave Me:</strong> <a href="https://youtu.be/anbPft3jAcQ" target="_blank" rel="noopener">Link</a>, <a href="https://youtu.be/tPyhEENo4gE?t=553" target="_blank" rel="noopener">link2</a>, <a href="https://youtu.be/3TyFJ_D7Uq8" target="_blank" rel="noopener">audio</a>. The background: --{ He said this at a korean show. "I failed every audition because of my outer appearance." Said JYP. He continued, "I auditioned with 'Don't Leave Me' a song I composed myself and Lee Soo Man hyung let out a heavy sigh as soon as he saw my face." JYP then explained, "However, Lee Soo Man hyung called me out again asking me to sell my track 'Dont Leave Me' to him but i refused. That was the saddest audition ever in my entire lifetime." }--. --{ He wanted to become a trainee in SM Ent but was rejected. Now he's the CEO of JYP Ent. }---.</li>        <li><strong>{ JYP } - "Still Alive":</strong> <a href="https://youtu.be/pJc2ypdWvEI" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ JYP } - Honey - covered by a girl:</strong> <a href="https://youtu.be/Z8O6oCg-W-E" target="_blank" rel="noopener">Link</a>. --{ This girl is 15, she never had singing lessons or guitar lessons and do you know what she said after the judged asked her if she knows harmonics, "No, but it sounds cool." }--.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:01 Update blog.</strong></li>        <li><strong>00:10 Watching video.</strong></li>        <li><strong>00:30 Sleep.</strong></li>        <li><strong>08:40 Wake up.</strong></li>        <li><strong>08:50 Watching video.</strong></li>        <li><strong>10:50 { Corenet }-{ back-end }:</strong> PUT logic for <code>model</code> that update parts of data.</li>        <li><strong>11:45 Cooking, eating, watching video.</strong></li>        <li><strong>14:00 { Corenet }-{ back-end }:</strong> PUT logic for <code>model</code> that update parts of data.</li>        <li><strong>16:36 Watching video, eating tangerine:</strong> Mostly about <code>Twice</code> again.</li>        <li><strong>18:30 { Corenet }:</strong> PUT logic, accross back-end including <code>controller</code> and <code>model</code>, and front-end.</li>        <li><strong>20:55 Preparing ingredient, cooking, understanding { CORS }.</strong></li>        <li><strong>21:50 Eating, watching video.</strong></li>        <li><strong>23:55 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-25<a id="id190625m081800"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">HTTP - { CORS }</div>    <div class="itm s1">Unit Test vs Integration Test</div>  </div>  <ol>    <li><strong>( Music composition ) You don't need to learn music theory first before you can write a piece:</strong> <a href="https://youtu.be/YmT5e5J5Mx4?t=377" target="_blank" rel="noopener">Link</a>. You can just placing notes by only using ears, this still works.</li>    <li><strong>( Music theory ) { JYP } - Honey - covered by a girl:</strong> <a href="https://youtu.be/Z8O6oCg-W-E" target="_blank" rel="noopener">Link</a>. --{ This girl is 15, she never had singing lessons or guitar lessons and do you know what she said after the judged asked her if she knows harmonics, "No, but it sounds cool." }--.</li>    <li><strong>( Javascript ) 3 ways to create an object that holding states and methods:</strong> <a href="https://www.hongkiat.com/blog/getters-setters-javascript/" target="_blank" rel="noopener">Link</a>,, section <u>1. Block scoping, 2. Function scoping, 3. "this" keyword</u>.</li>    <li><strong>( Javascript ) Getters/Setters. Evil. Period:</strong> <a href="https://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html" target="_blank" rel="noopener">Link</a>. (You can see why OOP is better than Imperative paradigm in this article, but you still need to know why functional programming is better than OOP). // This is not javascript specific, but it doesn't matters. // Maybe the stance of this article is not always right, but the main point of this article is --{ A Ball and A Dog }--, --{ true object-oriented programming, objects are living creatures, like you and me. They are living organisms, with their own behavior, properties and a life cycle. }--, I think the main point is, treating and using object like an <strong>individual</strong> that holding <strong>active</strong> state and methods, don't threat them like a state holder.</li>    <li><strong>{ Twice } - 'What is Love?' MV Movie References Side-by-side Comparison:</strong> <a href="https://youtu.be/JWutFAjDKoM" target="_blank" rel="noopener">Link</a>. Not very important, but a bit interesting story.</li>    <li><strong>{ Fun Fun Function } - Unit tests vs. Integration tests:</strong> <a href="https://youtu.be/vqAaMVoKz1c" target="_blank" rel="noopener">Link</a>. <a href="https://youtu.be/vqAaMVoKz1c?t=793" target="_blank" rel="noopener">13:13 downside of unit test</a> (they do not test the { contract }), <a href="https://youtu.be/vqAaMVoKz1c?t=1080" target="_blank" rel="noopener">18:00 downside of integration test</a> (more expensive, can't tell you where the problem is, can't simulate errors (like in unit test can test what should be true and what should be false), harder to write).</li>    <li><strong>{ Fun Fun Function } - How to do mocking for Unit tests:</strong> <a href="https://youtu.be/fgqh-OZjpYY" target="_blank" rel="noopener">Link</a>. Inspiring, since I never see the real code myself before, even the code in this video is just a simple example. So after watching this video, I found there is really not magic here, the idea is simple, just mock the [ environment ]-[ dependencies ], and starts to test the target unit.</li>    <li><strong>{ Fun Fun Function } - Settings are evil - combinatorial explosion of test cases:</strong> <a href="https://youtu.be/glZ1C-Yu5tw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>08:10 Wake up.</strong></li>        <li><strong>08:18 Uploading blog:</strong> reflecting about I only working on { Corenet } about 5.5 hours yesterday ... that was bad efficiency ... Maybe increase the time for this today.</li>        <li><strong>08:40 Watching video.</strong></li>        <li><strong>09:20 Cooking, understading { CORS }.</strong></li>        <li><strong>10:00 Eating, watching video, bathroom.</strong></li>        <li><strong>10:50 Understading { CORS }, { let } vs { var }:</strong> Including "simple request, and "not-so-simple requests" (formally called { preflight request }), <strong>and both are { CORS } request</strong>. // Correctly setting <code>CORS</code> for my <code>express.js</code> (<code>cors</code> package ,, <a href="https://github.com/expressjs/cors#configuration-options" target="_blank" rel="noopener">readme</a>). // <a href="https://medium.com/@realdennis/%E4%B8%80%E6%AC%A1%E8%AA%AA%E6%B8%85%E6%A5%9A-javascript-%E4%B8%AD%E5%AE%A3%E5%91%8A%E7%9A%84%E5%90%84%E7%A8%AE%E6%8F%90%E5%8D%87%E8%A1%8C%E7%82%BA-var-function-let-const-dd9175d063f0" target="_blank" rel="noopener">{ let }</a>, so I don't see any reason to use <code>var</code> anymore, but at the same time, I don't feel like I need to use <code>const</code> too.</li>        <li><strong>13:25 Buying drinks, grocery.</strong></li>        <li><strong>13:45 Watching video.</strong></li>        <li><strong>15:35 { Corenet }:</strong> PUT logic, accross back-end including <code>controller</code> and <code>model</code>, and front-end. // Testing and learning <code>getter</code> and <code>setter</code> again.</li>        <li><strong>18:05 Misc.</strong></li>        <li><strong>18:25 Cooking, coding.</strong></li>        <li><strong>19:05 Eating, watching video.</strong></li>        <li><strong>21:00 Watching video about unit test.</strong></li>        <li><strong>22:10 { Corenet }:</strong> PUT logic, accross back-end including <code>controller</code> and <code>model</code>, and front-end. // Fixing bugs.</li>        <li><strong>22:50 Brushing teeth, watching video.</strong></li>        <li><strong>23:15 { Corenet }:</strong> <code>PUT</code> logic of <u>post</u> done. // Starting to think about <strong><code>POST</code></strong> logic of <u>post</u> now.</li>        <li><strong>23:58 Uploading blog.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-26<a id="id190626m000021"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">{ Dependency Injection } ,, custom "dependency manager"</div>  </div>  <ol>    <li><strong>( Stoicism ) Always living in "now" - TedTalks:</strong> <a href="https://youtu.be/qzR62JJCMBQ" target="_blank" rel="noopener">Link</a>. Don't focus on those thing we can't control.</li>    <li><strong>Twice - Tzuyu personality have been erased after the "flag controversy" incident:</strong> How can personality of a person been erased just by a single incident. // <a href="https://youtu.be/E9-trzoLdug" target="_blank" rel="noopener">Video of Tzuyu before flag controversy</a>. // --{ twice tzuyu has the saddest injury the mental injury that pain will never be erased ... flag controversy about Tzuyu holding her National Flag (Taiwan') ... <strong>apology</strong> video ... kinda <strong>ruined her confidence and personality</strong>. She was <strong>quirky, lively,  outspoken, talkative</strong> before that incident. Now she almost dropped all character ... Yeah when I started liking Twice and became a Once, I didn't understand why she was so... <strong>empty</strong>. But after knowing about this I think I understand the amount of harshness she had to go through and just kind of broke a bit.  }--.</li>    <li><strong>Twice - Wake Me Up - instrumental:</strong> <a href="https://youtu.be/KoFxLOf8ots" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Animal ) Quick brown fox jumps over the lazy dog:</strong> <a href="https://youtu.be/f2d6q2oUJeY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>天使女孩／全身黑痣:</strong> <a href="https://youtu.be/JxAvyZ-J2EY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { ThePianoGuys } - Avatar in Real Life! - The Piano Guys in Disney World:</strong> <a href="https://youtu.be/VIba88zHxRA" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music )【女性が歌う】ひまわりの約束/秦基博 "STAND BY ME ドラえもん"主題歌 （Full Covered by コバソロ & 春茶）:</strong> <a href="https://youtu.be/_duWnJ6nsz0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Meet The Strongest J-pop Girl Idol | ASIAN BOSS:</strong> <a href="https://youtu.be/KJN1Bzapb0E" target="_blank" rel="noopener">Link</a>. Interesting, but unread.</li>    <li><strong>( Programming ) Dependency Injection - custom dependency manager:</strong> These resources I read give me some idea, maybe I can <strong>write my own custom dependency manager (dead simple), it will be a global object (DI), and almost inside of every functions from big to small will solely rely this global object (DI) to fetch dependencies they want.</strong> This global object (DI) is essentially a big interface, the dependencies stores in a "map" that the key is function's name and the value is function's real path, so if for example I want to rename the function name, I can only change the value, and keep the key untouched, so all it's dependent [ won't break ]-[ don't need to update ]. // And about the <code>DI</code> itself, I will pass it to function argument (for every function) so those function using <code>DI</code> won't need to know where it comes from, so if the path of <code>DI</code> changes, nothing breaks.</li>    <li><strong>( Programming ) Dependency Injection - When is it not appropriate to use the dependency injection pattern?:</strong> <a href="https://softwareengineering.stackexchange.com/questions/135971/when-is-it-not-appropriate-to-use-the-dependency-injection-pattern" target="_blank" rel="noopener">Link</a>. --{ SOMETHING, SOMEWHERE, must have knowledge of the dependent, the dependency interface ... DI tends to place all that knowledge at a very high level ... }--.</li>    <li><strong>{ Fun Fun Function } - Dependency Injection helps unit testing:</strong> <a href="https://youtu.be/0X1Ns2NRfks" target="_blank" rel="noopener">Link</a>. But I still have so much question, if I have to feed all dependencies inside function's argument, then the number of dependencies keep adding up from bottom to top, finally the toppest level function will have to include [ so much ]-[ all ] dependencies?</li>    <li><strong>Software development - Why company always rewrite a new software product, instead of improving old one? - { Fun Fun Function }:</strong> <a href="https://youtu.be/M6_a2wBK-yc" target="_blank" rel="noopener">Why software needs to dies over times</a>. Because the complexity is huge, adding a new feature is much more easy then removing an old feature, so the complexity of software overtime inevitably grows. Rewrite is easier, faster.</li>    <li><strong>( Webdev ) { URL } API:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank" rel="noopener">Link</a>. After doing a little searching, I found the best way to manipulate url is still using native simple { URL } API, and do other manipulation [ manually ]-[ myself ], like "join" and "split" (like <code>myURLObj.pathname.split("/").filter(itm => itm !== "")</code>).</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:10 Watching video:</strong> </li>        <li><strong>00:50 Sleep.</strong></li>        <li><strong>09:05 Wake up.</strong></li>        <li><strong>09:10 Watching video:</strong> Doing research on { Twice } ,, { Tzuyu } ,, "flag controversy" incident</li>        <li><strong>10:25 Grocery, cooking.</strong></li>        <li><strong>11:00 Eating, watching video.</strong></li>        <li><strong>11:50 { Corenet }:</strong> Front-end ,, "new post" related work.</li>        <li><strong>13:00 Watching video.</strong></li>        <li><strong>13:30 Taking a nap.</strong></li>        <li><strong>14:00 Watching video.</strong></li>        <li><strong>14:30 { Corenet }:</strong> Front-end ,, "new post" related work.</li>        <li><strong>16:20 Eating fruit, watching video.</strong></li>        <li><strong>18:25 Brushing teeth.</strong></li>        <li><strong>18:35 { Corenet }:</strong> Front-end ,, "new post" related work.</li>        <li><strong>20:15 Cooking, eating, watching video:</strong></li>        <li><strong>21:45 Understanding more about { Dependency Injection }:</strong> Though not directly gain something, but seems comes out some indirectly idea of making my code base more manageable.</li>        <li><strong>23:05 Thinking about { Dependency Injection }, eating fruit, watching video.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-27<a id="id190627m000749"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">External and internal motivation</div>    <div class="itm s1">{ Contemporary/modern dance }-{ 現代舞 }</div>  </div>  <ol>    <li><strong>( Psychology ) { Cognitive Evaluation Theory } - External and internal [ motivation ]-[ incentive ] system:</strong>      <ol>        <li><strong>{ Fun Fun Function } Losing motivation:</strong> <a href="https://youtu.be/RQg_Q4HYYpg" target="_blank" rel="noopener">Link</a>. External and internal incentive - need to feel competent and also need to feel everything is in my control.</li>        <li><strong>Theory theory suggests that there are actually two motivation systems:</strong> <a href="https://iedunote.com/cognitive-evaluation-theory" target="_blank" rel="noopener">Link</a>. --{ Extrinsic Motivators ... Pay, promotion, feedback, working conditions — things that come from a person’s environment, controlled by others. }--, --{ A boss who is always dangling this <strong>reward</strong> or that <strong>stick</strong> will turn off the intrinsically motivated people. }--.</li>        <li><strong>興趣沒有目的地 - 曾博恩 - 做鋼鐵人模型 - 路人問你這個要賣多少? - 我做完後就直接把他踢到牆角去了:</strong> <a href="https://youtu.be/CJd1Qiz8QDQ?t=343" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Contemporary/modern dance ) ( 現代舞 ) Momo &amp; Mina - falling for ‘Dangerous Love’ - { Mnet }:</strong> <a href="https://youtu.be/4rpY57eJqfM" target="_blank" rel="noopener">Link</a>. // --{ ... show us one of the darkest meaning of love ... }--. // --{ I guess this dance is the tragedy of an abusive relationship in Korea years ago. A guy was madly in love with a girl and he locked her in a room. That's why Momo pushed Mina into the box. The girl contacted the police for help, and it was even all over the news, but no one did anything to help her. Eventually the girl died due to starvation and abuses. At the end of the dance a bunch of people came out covering their eyes pretending they cant see anything, that symbolizes the neglect of the society towards this incident. While the paint of their faces symbolizes the sin and responsibility on each of them. Yes indeed, Momo ( the guy) is the murderer in this case. Yet the dance wants to convey the message that the society indirectly killed the girl and should bear responsibility as well. }--. // --{ A MM it's about an abusive relationship Momo is the toxic lover who wants mina all to her self and she locked her tell mina got sick of it and committed suicide or you can say Momo killed her and Than Momo goes back into the world as if she did nothing and the blindfolded people are the public who over looks this kind of relationships and didn't stand for the women's right they sow what's happening but didn't help nor cared , some people are saying it represents a real story of a couple in Korea where the girl really committed suicide in the end , my explanation was so bad obviously. }--.</li>        <li><strong>( Music ) TWICE - Candy Pop:</strong> <a href="https://youtu.be/wQ_POfToaVY" target="_blank" rel="noopener">Link</a>. Highly loose and unpredictable. No main melody.</li>        <li><strong>( Javascript ) Object - { Object.entries() }:</strong> <a href="https://zellwk.com/blog/looping-through-js-objects/" target="_blank" rel="noopener">Proper way to loop through JS objects</a>. Related to <code>Object.keys()</code> and <code>Object.values()</code>.</li>        <li><strong>{ Fun Fun Function } Is Programming Art? - We need way more types of programmer, from various fields:</strong> <a href="https://youtu.be/MdlHgIJrQn0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Javascript ) Array - "3f" - { .forEach() },{ .filter() },{ .find() }:</strong> Related to { .find() }. Also see <a href="https://www.w3schools.com/JSREF/jsref_some.asp" target="_blank" rel="noopener">{ .some() }</a>, { .every() }, <a href="https://www.w3schools.com/JSREF/jsref_includes_array.asp" target="_blank" rel="noopener">{ .includes() }</a>.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:05 Uploading blog.</strong></li>        <li><strong>00:15 Watching video.</strong></li>        <li><strong>00:35 Sleep.</strong></li>        <li><strong>08:40 Wake up.</strong></li>        <li><strong>08:45 Reading articles, cooking.</strong></li>        <li><strong>10:20 Eating, watching video.</strong></li>        <li><strong>11:00 Brushing teeth.</strong></li>        <li><strong>11:10 { Corenet }:</strong> "new post" related work.</li>        <li><strong>15:30 Watching video.</strong></li>        <li><strong>15:50 Taking shower.</strong></li>        <li><strong>16:30 Grocery, misc.</strong></li>        <li><strong>16:45 Watching video.</strong></li>        <li><strong>19:05 { Corenet }:</strong> Finished "new post" related work.</li>        <li><strong>21:30 Watching video:</strong> <a href="https://youtu.be/n5_qC8AEUXw" target="_blank" rel="noopener">TWICE "Move (Taemin)" cover dance practice</a>.</li>        <li><strong>23:10 { Corenet }:</strong> Makes "messenger" have "dialog" functionality, so it not only show messages, but accept different types of input, user will be prompt to make decision in some cases.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-28<a id="id190628m003145"></a></h2>  <div class="kwCloud">    <div class="itm s2">Portfolio and Resume</div>    <div class="itm s1">{ Corenet }</div>    <div class="itm s1">Prefer more straightforward code</div>    <div class="itm s1">Drawing ,, { posture }</div>  </div>  <ol>    <li><strong>( Music ) TWICE - Nayeon - Only Longing Grows - cover:</strong>      <ol>      <li><strong>About:</strong> A nostalgic song that makes you want to cry without any reason.</li>      <li><strong>Live with here mom:</strong> <a href="https://youtu.be/e51MONEZXcQ" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Audio:</strong> <a href="https://youtu.be/K_wlWUtbyAY" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Audio ,, empty arena + rain sound effect:</strong> <a href="https://youtu.be/K_wlWUtbyAY" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Better skills used doesn't always means better:</strong> <a href="https://youtu.be/shNpmIuo8VE" target="_blank" rel="noopener">This version</a> ,, singer has better skills, but just feel like losing something compare to Nayeon's thus "not better". Many times simpler is just better.</li>      </ol>    </li>    <li><strong>( Programming ) { Fun Fun Function } - The 3 stages of growing as a programmer:</strong> <a href="https://youtu.be/2qYll837a_0" target="_blank" rel="noopener">Link</a>. So, writing your code to be reusable, higly abstract and general, extensible, elegant, concise, <strong>comes with a [ trade off ]-[ cost ]</strong>, if you can't <strong>get more value back</strong> later when you are making this decision, then you are actually losing more and it don't worth it. In almost every cases, is is better to write a <strong>dead simple straightforward code that is more readable</strong>, instead of elegant and smart code. They key is, knowing <strong>when</strong> to write like this (smart code) and when not to. // The 3rd stage of mindset is like this: --{ move fast, break things, revise, fix, and <strong>get shit done</strong> }--.</li>    <li><strong>( Drawing ) { 抖抖村 } 如何畫人體動態 - { posture }:</strong> <a href="https://youtu.be/Bn3e48G55us" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Intimate relationship ) 180429 TWICE - Sana touching Momo's cheek - fancam - 4K:</strong> <a href="https://youtu.be/XXohP7ZCZWw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) TWICE Stage Compilation - 2h:15min:</strong> <a href="https://youtu.be/Je5BjA0WPPw?t=2691" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) ( Promise ) Resolve javascript Promise outside function scope:</strong> <a href="https://stackoverflow.com/questions/26150232/resolve-javascript-promise-outside-function-scope" target="_blank" rel="noopener">Link</a>. Cool! Useful! I just want a promise object get resolved when I click a button. And way before the button get clicked, that promise object already get retuned to some other async function but still "pending". // If you want to build a factory function for this, use <a href="http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/" target="_blank" rel="noopener">this code pattern</a> (the bottom code snippet), nothing new from first link ,, answers, but just this is cleaner than the answer that using <code>class</code> to achieve it (Deferred Pattern).</li>    <li><strong>( Javascript ) { Promise.resolve() },{ Promise.reject() }:</strong> Instead of use the promise constructor for things like <code>if(someCondition)</code>, you can write like this too - <code>let p = Promise[(someCondition) ? "resolve" : "reject"]();</code>, this is more concise (but just preference). Also see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener">{ Promise.resolve() }</a>.</li>    <li><strong>( Full-stack ) Server-Sent Events:</strong> <a href>Link</a>. --{ Server-Sent Events are real-time events emitted by the server and received by the browser. They’re similar to <strong>WebSockets</strong> in that they happen in real time, but they’re very much a one-way communication method from the server. }--, --{ These events are similar to ordinary JavaScript events that occur in the browser — like click events — except we can control the name of the event and the data associated with it. }--.</li>    <li><strong>( Node.js ) Some little tips you could learn when developing with node.js:</strong> <a href="https://www.airpair.com/node.js/posts/top-10-mistakes-node-developers-make" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:35 Watching video.</strong></li>        <li><strong>00:50 Sleep.</strong></li>        <li><strong>09:10 Wake up.</strong></li>        <li><strong>09:13 Uploading blog.</strong></li>        <li><strong>09:20 Bathroom.</strong></li>        <li><strong>09:37 Watching video.</strong></li>        <li><strong>11:00 { Corenet }:</strong> Makes "messenger" have "dialog" functionality.</li>        <li><strong>13:10 Cooking, { Corenet }:</strong> Finished the "messenger".</li>        <li><strong>13:45 Eating, watching video:</strong> <a href="https://youtu.be/bV3oON0nIfE" target="_blank" rel="noopener">TWICE makes MV Commentary of Dance The Night Away themselves</a>, <a href="https://youtu.be/lpp04G48VPI" target="_blank" rel="noopener">Momo dance version of "Dance The Night Away"</a>.</li>        <li><strong>16:00 Reading article.</strong></li>        <li><strong>16:35 Take a nap.</strong></li>        <li><strong>17:00 { Corenet }:</strong> "delete post" related work.</li>        <li><strong>18:10 Bathroom.</strong></li>        <li><strong>18:17 { Corenet }:</strong> Finished "delete post" related work.</li>        <li><strong>19:00 Watching video.</strong></li>        <li><strong>19:40 Start to [ thinking ]-[ planning ] about Portfolio.</strong></li>        <li><strong>21:20 Cooking, [ thinking ]-[ planning ] about Portfolio.</strong></li>        <li><strong>21:55 Eating, watching video.</strong></li>        <li><strong>23:35 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-29<a id="id190629m075304"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>    <div class="itm s1">[ Art ]-[ graphic design ]</div>  </div>  <ol>    <li><strong>( Music ) TWICE - Nayeon - Only Longing Grows - cover:</strong>      <ol>      <li><strong>About:</strong> A nostalgic song that makes you want to cry without any reason.</li>      <li><strong>Live with here mom:</strong> <a href="https://youtu.be/e51MONEZXcQ" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Audio:</strong> <a href="https://youtu.be/K_wlWUtbyAY" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Audio ,, empty arena + rain sound effect:</strong> <a href="https://youtu.be/K_wlWUtbyAY" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Better skills used doesn't always means better:</strong> <a href="https://youtu.be/shNpmIuo8VE" target="_blank" rel="noopener">This version</a> ,, singer has better skills, but just feel like losing something compare to Nayeon's thus "not better". Many times simpler is just better.</li>      </ol>    </li>    <li><strong>( Art ) [ 藝術 ]-[ 設計 ] 的本質還是一樣:</strong> [ 藝術 ]-[ 設計 ] 的本質還是一樣 - 想辦法玩出 [ 非預期 ]-[ 動 ] 的效果。效果是什麼不重要，有沒有意義不重要，只要是 [ 非預期 ]-[ 動 ] 就會看起來很特別。 [ 藝術 ]-[ 設計 ] 的本質就是一直在玩 "色" 而已 (不是指顏色的色)。// 很多時候會故意 "花時間" 去 <strong>突顯 "根本不重要" 的元素</strong> (目的不在那個元素，而是要產生 [ 非預期 ]-[ 動 ] 的效果)， 像這個 <a href="https://castirondesign.com/work/roger-the-barber" target="_blank" rel="noopener">衣服上的 "R"</a>，那個 <code>._ R _.</code> 就是一個例子，你可以放 Rain, Cloud, Wind, 然後讓每個字首用顏色更突顯出來 .... 。像 <a href="https://castirondesign.com/work/wiseman-editing" target="_blank" rel="noopener">這個</a> 也是一樣，在旋轉一疊的紙，看起來就不一樣。但是有意義嗎？沒有。是重點嗎？不是。但是有動嗎？有，<strong>所以有趣</strong>。 我今天看到太多太多網頁，全部都是本質上在玩這樣東西，其實把那些效果去除掉，剩下的內容其實也沒有比較特別的地方。</li>    <li><strong>歸納出，構成好看的網頁的幾個關鍵要素:</strong> 歸納出，構成好看的網頁的幾個關鍵要素 (按照重要性) - 豐富的資訊 (資料)，好看的圖片及視覺設計，正確的排版 (以及創意的排版方式)，動畫。</li>    <li><strong>( Environment ) { 台客劇場 } 挑戰夏天不開冷氣:</strong> <a href="https://youtu.be/1tXDvyn4T7I" target="_blank" rel="noopener">Link</a>. 看底下留言。</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:45 Wake up.</strong></li>        <li><strong>07:55 Uploading blog.</strong></li>        <li><strong>08:10 Cooking, eating.</strong></li>        <li><strong>09:45 [ Thinking ]-[ planning ] about Portfolio.</strong></li>        <li><strong>10:30 Watching video.</strong></li>        <li><strong>10:45 [ Thinking ]-[ planning ] about Portfolio:</strong> Making simple drawing and wireframe.</li>        <li><strong>14:40 Watching video.</strong></li>        <li><strong>14:50 Grocery.</strong></li>        <li><strong>15:10 Taking shower.</strong></li>        <li><strong>15:45 Watching video.</strong></li>        <li><strong>17: 40 [ Thinking ]-[ planning ] about Portfolio:</strong> Doing reasearch online, seeing advice of people.</li>        <li><strong>21:10 Cooking, eating, watching video.</strong></li>        <li><strong>23:15 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-06-30<a id="id190630m073230"></a></h2>  <div class="kwCloud">    <div class="itm s1">Portfolio and Resume</div>  </div>  <ol>    <li><strong>Twice anecdotes of some members:</strong> <a href="https://youtu.be/hcVSS9GuUgw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Twice, vlive:</strong> <a href="https://www.vlive.tv/video/24371" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:25 Wake up.</strong></li>        <li><strong>07:33 Uploading blog.</strong></li>        <li><strong>08:23 Cooking, reading article about Portfolio.</strong></li>        <li><strong>08:57 Eating, reading article about Portfolio:</strong> Doing research what to put inside Portfolio, to have correct direction, and to save time later.</li>        <li><strong>11:40 Brushing teeth.</strong></li>        <li><strong>11:50 Laundry, grocery.</strong></li>        <li><strong>12:15 Watching video.</strong></li>        <li><strong>13:10 Reading article about Portfolio:</strong> Doing research what to put inside Portfolio, to have correct direction, and to save time later.</li>        <li><strong>14:10 Designing Portfolio site:</strong></li>        <li><strong>18:30 Cooking, keep working.</strong></li>        <li><strong>19:10 Eating, keep thinking:</strong> I'm working damn slow on graphic design. I should see and reference more works from others, before I have the sense to do my own creation.</li>        <li><strong>19:45 Watching video.</strong></li>        <li><strong>22:15 Sleep.</strong></li>      </ol>    </li>  </ol></div><hr><div class="facetList">Cmm: u190601m112844 x88lost x88fs c88log log88tableCurrent: ti88crr88y19 ti88crr88y19dw7 ti88crr88y19m06 ti88crr88y19m06d30 ti88crr88y19m06dw7 ti88crr88y19q2 ti88crr88y19q2dw7 ti88crr88y19w26 ti88crr88y19w26dw7Time (d): ti88y19 ti88y19dw6 ti88y19m06 ti88y19m06d01 ti88y19m06dw6 ti88y19q2 ti88y19q2dw6 ti88y19w22 ti88y19w22dw6</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190501 ( Log table ) 2019-05</title>
      <link href="/treegbBlog/19/05/01/190501m130707/"/>
      <url>/treegbBlog/19/05/01/190501m130707/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-05:</strong> <a href="#id190501m131032">Section</a>.</li>    <li><strong>2019-05-01:</strong> <a href="#id190501m131037">Section</a>.</li>    <li><strong>2019-05-02:</strong> <a href="#id190502m083200">Section</a>.</li>    <li><strong>2019-05-03:</strong> <a href="#id190502m220141">Section</a>.</li>    <li><strong>2019-05-04:</strong> <a href="#id190504m073338">Section</a>.</li>    <li><strong>2019-05-05:</strong> <a href="#id190505m080414">Section</a>.</li>    <li><strong>2019-05-06:</strong> <a href="#id190505m204247">Section</a>.</li>    <li><strong>2019-05-07:</strong> <a href="#id190506m074020">Section</a>.</li>    <li><strong>2019-05-08:</strong> <a href="#id190508m064507">Section</a>.</li>    <li><strong>2019-05-09:</strong> <a href="#id190509m073023">Section</a>.</li>    <li><strong>2019-05-10:</strong> <a href="#id190510m071656">Section</a>.</li>    <li><strong>2019-05-11:</strong> <a href="#id190511m075146">Section</a>.</li>    <li><strong>2019-05-12:</strong> <a href="#id190512m080121">Section</a>.</li>    <li><strong>2019-05-13:</strong> <a href="#id190513m084031">Section</a>.</li>    <li><strong>2019-05-14:</strong> <a href="#id190514m083913">Section</a>.</li>    <li><strong>2019-05-15:</strong> <a href="#id190515m012915">Section</a>.</li>    <li><strong>2019-05-16:</strong> <a href="#id190516m082549">Section</a>.</li>    <li><strong>2019-05-17:</strong> <a href="#id190517m064905">Section</a>.</li>    <li><strong>2019-05-18:</strong> <a href="#id190518m082938">Section</a>.</li>    <li><strong>2019-05-19:</strong> <a href="#id190519m091346">Section</a>.</li>    <li><strong>2019-05-20:</strong> <a href="#id190520m100447">Section</a>.</li>    <li><strong>2019-05-21:</strong> <a href="#id190521m065645">Section</a>.</li>    <li><strong>2019-05-22:</strong> <a href="#id190522m071152">Section</a>.</li>    <li><strong>2019-05-23:</strong> <a href="#id190523m071357">Section</a>.</li>    <li><strong>2019-05-24:</strong> <a href="#id190524m072259">Section</a>.</li>    <li><strong>2019-05-25:</strong> <a href="#id190525m073659">Section</a>.</li>    <li><strong>2019-05-26:</strong> <a href="#id190526m070847">Section</a>.</li>    <li><strong>2019-05-27:</strong> <a href="#id190527m074838">Section</a>.</li>    <li><strong>2019-05-28:</strong> <a href="#id190528m075637">Section</a>.</li>    <li><strong>2019-05-29:</strong> <a href="#id190529m081215">Section</a>.</li>    <li><strong>2019-05-30:</strong> <a href="#id190530m001443">Section</a>.</li>    <li><strong>2019-05-31:</strong> <a href="#id190601m111146">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-05<a id="id190501m131032"></a></h2>  <div class="kwCloud">    <div class="itm s4">{ Stoicism }</div>    <div class="itm s3">Virtue</div>    <div class="itm s1">Understand what's in your control and what's not</div>    <div class="itm s1">Understand what changes and what doesn't</div>    <div class="itm s2">[ Toughness ]-[ resilience ]</div>    <div class="itm s2">Live inside "the zone"</div>    <div class="itm s1">Live in "now"</div>    <div class="itm s1">Purpose of life</div>    <div class="itm s2">Sensibility</div>    <div class="itm s2">Rationality</div>    <div class="itm s3">Volunteering</div>    <div class="itm s3">Exercising</div>    <div class="itm s2">{ 深蹲 }</div>    <div class="itm s2">{ Plank }</div>    <div class="itm s1">核心肌群</div>    <div class="itm s1">{ 下交叉綜合症 (症候群) }</div>    <div class="itm s1">{ 臀肌 }</div>    <div class="itm s1">{ 髖屈肌 }</div>    <div class="itm s1">Lower back muscle</div>    <div class="itm s1">{ Kpop }</div>    <div class="itm s1">{ JYP Entertainment}</div>    <div class="itm s2">{ Twice }</div>    <div class="itm s3">Efficiency can be extremely different</div>    <div class="itm s2">Book { The one thing }</div>    <div class="itm s1">{ Marginal utility } of doing everything</div>    <div class="itm s1">Book</div>    <div class="itm s3">{ LoveAndHappiness } project</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s2">{ Woody }</div>    <div class="itm s2">{ Front-end }</div>    <div class="itm s1">{ Vue.js }</div>    <div class="itm s1">{ SASS } and { SCSS }</div>    <div class="itm s1">{ CSS 的模組化 }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">{ Font-awesome }</div>    <div class="itm s1">{ JQuery }</div>    <div class="itm s1">{ Lodash }</div>    <div class="itm s1">{ Git }</div>    <div class="itm s1">{ Accessibility }</div>    <div class="itm s2">{ Back-end }</div>    <div class="itm s1">{ Node.js }</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ MongoDB }</div>    <div class="itm s2">{ MVC } design pattern</div>    <div class="itm s1">{ Node.js } module</div>    <div class="itm s1">{ Node.js } ,, error handling</div>    <div class="itm s1">{ REST API }</div>    <div class="itm s1">{ HTTP status code }</div>    <div class="itm s1">Wasting time</div>    <div class="itm s1">Playing { game }-{ Zero-k }</div>  </div>  <ol>    <li><strong>( Music ) { TWICE } - Heart Shaker - acoustic remix:</strong> <a href="https://youtu.be/D2Fkg1MOOIM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { TWICE } - What is Love?:</strong> <a href="https://youtu.be/i0p1bmr0EmE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>190501:</strong>          <ol>            <li><strong>Learning and testing { svg-pan-zoom } library.</strong></li>            <li><strong>How to add custom Javascript in { Hexo }</strong>: Give up, not worth the time, { Hexo } docs sucks.</li>          </ol>        </li>        <li><strong>190502:</strong>          <ol>            <li><strong>Learning { Express.js }:</strong> Is backend.</li>          </ol>        </li>        <li><strong>190503:</strong>          <ol>            <li><strong>Exercising:</strong> The last time I did this was few years ago.</li>            <li><strong>Try to understand Vegan diet.</strong></li>            <li><strong>Searching about "intermittent blurred vision":</strong> Searching about what is the cause of "intermittent blurred vision".</li>            <li><strong>Learning { Express.js }:</strong> Is backend.</li>            <li><strong>Try to understand Vegan diet.</strong></li>            <li><strong>Talking with { Woody }:</strong> For volunteering.</li>          </ol>        </li>        <li><strong>190504:</strong>          <ol>            <li><strong>Exercising:</strong> This is the 2nd time I did this after few years without exercising.</li>            <li><strong>Understand project { LoveAndHappiness }:</strong> Try to understand  the structure of project { LoveAndHappiness }, with the help from <code>Woody</code> from phone.</li>          </ol>        </li>        <li><strong>190505:</strong>          <ol>            <li><strong>Exercising:</strong> This is the 3nd time I did this after few years without exercising.</li>            <li><strong>Do I really need little sensation stimulation?:</strong> I'm thinking about do I really need any form of entertainment? Can I have a life totally without any entertainment and those little sensation stimulation? What is the life looks like if most of time I don't have (need) those things?</li>            <li><strong>Understand structure of { LoveAndHappiness }:</strong> Hard to guess, the front-end is not finished yet, so it is hard to guess what is the meaning of those API data.</li>            <li><strong>12:30 Learning { Express.js }.</strong></li>          </ol>        </li>        <li><strong>190506:</strong>          <ol>            <li><strong>Exercising:</strong> This is the 4nd time I did this after few years without exercising.</li>            <li><strong>( Git ) Don't know how to { git pull } from { LoveAndHappiness }:</strong> After few hours of struggling, <code>woody</code> solved my problem with 3 lines of commands.</li>          </ol>        </li>        <li><strong>190507:</strong>          <ol>            <li><strong>Exercising:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a>. The routine is as same as yesterday, but i make it less intense for myself, I can't fully follow the routine yet.</li>            <li><strong>{ Git }:</strong> Lean many basics [ things ]-[ operation ].</li>            <li><strong>( CSS ) { SCSS } 物件導向模組設計 (1):</strong> <a href="https://blog.chh.tw/posts/scss-object-oriented/#lkp" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>190508:</strong>          <ol>            <li><strong>( CSS ) CSS 方法論與 Atomic CSS:</strong> <a href="https://blog.techbridge.cc/2017/04/29/css-methodology-atomiccss/" target="_blank" rel="noopener">Link</a>. Useful.</li>            <li><strong>Working on { LoveAndHappiness } ,, styling.</strong></li>            <li><strong>Troubleshooting.</strong></li>          </ol>        </li>        <li><strong>190509:</strong>          <ol>            <li><strong>Working on { LoveAndHappiness } ,, color scheme:</strong> Figure out new different information dimension not related to color (font-size, font-style, letter-spacing ...).</li>            <li><strong>Watching video about filming and { Twice }:</strong> <a href="https://youtu.be/G6q_eMGFyCE" target="_blank" rel="noopener">TWICE TV "What is Love?" EP.09</a>, <a href="https://youtu.be/AGHu7dxlq8k" target="_blank" rel="noopener">TWICE TV "Pocari Sweat in Thailand"</a>.</li>          </ol>        </li>        <li><strong>190510:</strong>          <ol>            <li><strong>Upper body exercising:</strong></li>            <li><strong>Understanding { Bootstrap }:</strong></li>            <li><strong>Understand HTML { form }.</strong></li>          </ol>        </li>        <li><strong>190511:</strong>          <ol>            <li><strong>Working on { lahSale } ,, styling.</strong></li>            <li><strong>Understanding { Bootstrap }:</strong> The strength of { Bootstrap } is, you don't need to waste any time on desigining, you do nothing.</li>            <li><strong>( CSS ) How to make "sticky footer", in five Ways:</strong> <a href="https://css-tricks.com/couple-takes-sticky-footer/" target="_blank" rel="noopener">Link</a>. I prefer flex-box version and grid version most.</li>            <li><strong>( CSS ) Child inside parent with min-height: 100% not inheriting height:</strong> <a href="https://stackoverflow.com/a/21836870/10607630" target="_blank" rel="noopener">Link</a>. Add <code>height: 1px;</code> to fix this "bug". But it don't adapt to child size, which is useless.</li>          </ol>        </li>        <li><strong>190512:</strong>          <ol>            <li><strong>Find date picker input module which has good accessibility support:</strong> Found <a href="https://github.com/eureka2/ab-datepicker#dependencies" target="_blank" rel="noopener">{ eureka2/ab-datepicker }</a> which are good at accessibility.</li>            <li><strong>Working on { lahSale }:</strong> Styling using Bootstrap and Font-awesome. Tomorrow is the user feedback stage of the <u>sale system</u>, so this need to be done.</li>          </ol>        </li>        <li><strong>190513:</strong>          <ol>            <li><strong>( Javascript ) { Object Destructuring },  { Array Destructuring }, { Spread syntax }, { reduce() }, { map() }, { filter() }.</strong></li>            <li><strong>Accessibility.</strong></li>            <li><strong>{ lahSale } ,, apply "sticky footer".</strong></li>          </ol>        </li>        <li><strong>190514:</strong>          <ol>            <li><strong>( Philosophy ) { udn.com } - 林斯諺／什麼是 "高級藝術"？什麼是 "低級藝術"？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3637898" target="_blank" rel="noopener">Link</a>. What is "High level art" and "low level art"? My conclusion - both <code>Sensibility</code> and <code>Rationality</code> are <strong>2 pillar of humanity and form the purpose of life</strong>, none is more important than other.</li>            <li><strong>( Philosophy ) { udn.com } - 廖育廷／要活出生命意義，是自己爽就好，還是有客觀標準？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3582749" target="_blank" rel="noopener">Link</a>. Is purpose of life is decide by totally personal satisfaction? Or by totally serving others?</li>            <li><strong>( Philosophy ) { udn.com } - 廖育廷／過程比結果重要？人生的意義在於過程？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3692120" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>( Vue ) { Slot }:</strong> <a href="https://vuejs.org/v2/guide/components-slots" target="_blank" rel="noopener">Link</a>. Including <code>named slots</code> and <code>scoped slots</code>.</li>            <li><strong>( Accessibility ) Some html attibutes ... .</strong></li>          </ol>        </li>        <li><strong>190515:</strong>          <ol>            <li><strong>( Philosophy ) { Stoicism }.</strong></li>            <li><strong>Reading book.</strong></li>          </ol>        </li>        <li><strong>190516:</strong>          <ol>            <li><strong>Wasting time.</strong></li>            <li><strong>{ lahSale }.</strong></li>          </ol>        </li>        <li><strong>190517:</strong>          <ol>            <li><strong>Wasting time.</strong></li>            <li><strong>( Philosophy ) Stoicism 101 - Massimo Pigliucci.</strong></li>            <li><strong>( Book ) Staring at the sun - Overcoming the terror of death - by Irvin D. Yalom:</strong> Found at <a href="https://udn.com/news/story/12674/2284505" target="_blank" rel="noopener">{ UDN } - 《凝視太陽》：過一個「克服死亡恐懼」的充實人生</a>. // <a href="http://booksdescr.org/item/index.php?md5=D0EB8D6F251B2205EA7231B3C0312C21" target="_blank" rel="noopener">Library Genesis</a>.</li>            <li><strong>( Database ) The Problem with MongoDB - relationship, normalization, duplication, constraint:</strong> <a href="https://hackernoon.com/the-problem-with-mongodb-d255e897b4b" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>190518:</strong>          <ol>            <li><strong>( Health ) { 下交叉綜合症 (症候群) } - 骨盆前傾 - 需訓練 { 腹肌 } 和 { 臀肌 }:</strong> <a href="https://youtu.be/_DHZfERzzKY" target="_blank" rel="noopener">Link</a>. Very useful and clear illustration! 反而不是要訓練 { 下背 } 和 { 髖屈肌 }，因為 { 下背 } 和 { 髖屈肌 } 要多做 [ 拉伸 ]-[ 舒展 ]。</li>            <li><strong>{ 骨盆前傾 }.</strong></li>            <li><strong>{ MongoDB }.</strong></li>            <li><strong>{Back-end } - { Traversy media }.</strong></li>          </ol>        </li>        <li><strong>190519:</strong>          <ol>            <li><strong>( Back-end ) ( MVC design pattern ).</strong></li>          </ol>        </li>        <li><strong>190520:</strong>          <ol>            <li><strong>( Kpop ) JYP ,, The 3 Most Important Things JYP Looks For In His Artists, And They’re Not Talent:</strong> <a href="https://www.koreaboo.com/news/3-important-things-jyp-looks-artists-theyre-not-talent/" target="_blank" rel="noopener">Link</a>. 1. Honesty. 2. Sincerity. 3. Humility</li>            <li><strong>( MVC design pattern ) What is the model lifetime in MVC application?:</strong> <a href="https://stackoverflow.com/questions/27442835/maintain-the-model-lifetime-in-mvc-application" target="_blank" rel="noopener">Link</a>. I'm not sure ... .</li>          </ol>        </li>        <li><strong>190521:</strong>          <ol>            <li><strong>{ 看电影了没 } - 为什么我们害怕衰老？戛纳金棕榈 { 爱 }.</strong></li>            <li><strong>( Node.js ) Are Node.js modules singletons? - "Module Caching".</strong></li>          </ol>        </li>        <li><strong>190522:</strong>          <ol>            <li><strong>Learning back-end, { Http status code },{ request method},[ practicing write a simple CRUD using MVC and Mongoose ].</strong></li>          </ol>        </li>        <li><strong>190523:</strong>          <ol>            <li><strong>{ TWICE } - Ordering Ice Cream in English in Switzerland:</strong> <a href="https://youtu.be/SvCnzggdfMY" target="_blank" rel="noopener">Link</a>. Beautiful moments always not last long, this is how natrual works.</li>            <li><strong>{ Function arguments signature } good practice ; { Async function } ; { try ... catch block } ; { Mongoose }.</strong></li>            <li><strong>{ PTSTalk 公視 } - 拔除大腦 ARM致命一擊！華為慘遭KO:</strong> <a href="https://youtu.be/fr5kBN0mf3c" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>190524:</strong>          <ol>            <li><strong>( Architecture ) Stateful vs Stateless Web Services:</strong> ... .</li>            <li><strong>( Http ) ( REST API ) Richardson Maturity Model - 3 level of REST:</strong> ... .</li>            <li><strong>( Http ) REST - updating multiple resources with one request - is it standard or to be avoided?:</strong> ... .</li>            <li><strong>Finished nested schema ,, POST part:</strong> Finished [ testing code ]-{ Mongoose }-{ CRUD } ,, nested schema ,, POST part.</li>          </ol>        </li>        <li><strong>190525:</strong>          <ol>            <li><strong>( Http ) { Cookie }:</strong> ... .</li>            <li><strong>( Back-end ) ( Express.js ) { Traversy Media } - Node.js & Express From Scratch.</strong> <a href="https://youtu.be/CrAU8xTHy4M?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp" target="_blank" rel="noopener">[ Link ]-[ part 9]-[ user registration ]</a>. Not read et. This series take you down deep regarding how you can buid a authentication system, in practical standard. Brad guide you how you correctly store the password into database, before hashing.</li>            <li><strong>( Http ) { Cookie },{ Authentication }.</strong></li>          </ol>        </li>        <li><strong>190526:</strong>          <ol>            <li><strong>( Javascript ) ( Library ) { Lodash },{ JQuery }.</strong></li>            <li><strong>Working on { lahSale } component ,, { scrollspy }-{ sticky nav bar }:</strong> Not done yet, start to understanding { JQuery }.</li>          </ol>        </li>        <li><strong>190527:</strong>          <ol>            <li><strong>Working on { lahSale }:</strong> Style update with woody, fixing { scrollspy } bug.</li>            <li><strong>( JQuery ) { jQuery() } method:</strong> ... .</li>            <li><strong>( JQuery ) { jQuery } object (returned by { jQuery() } method):</strong> ... .</li>          </ol>        </li>        <li><strong>190528:</strong>          <ol>            <li><strong>Fixing { scrollspy }.</strong></li>            <li><strong>( Javascript ) { Events }.</strong></li>            <li><strong>( Javascript ) Optimize JavaScript execution performance:</strong> ... .</li>            <li><strong>( Javascript ) Tools ,, { debugger }-{ breakpoint } and { performance monitor }.</strong> ... .</li>            <li><strong>{ Vue ,, lifecycle }:</strong> ... .</li>          </ol>        </li>        <li><strong>190529:</strong>          <ol>            <li><strong>( Music ) Thomas Bergersen - Colors of Love - { Sun }:</strong> <a href="https://youtu.be/ZuGiwDQEvDc" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>Finally around finished all testing and research about back-end!:</strong> Now I done the [ testing code ]-{ Mongoose }-{ CRUD } ,, all methods (4), { Traversy Media } { Mongoose } and { Express,js } tutorial. Now I have enough base to build my <code>CMS</code>!</li>          </ol>        </li>        <li><strong>190530:</strong>          <ol>            <li><strong>{ mongodb.com } - 6 Rules of Thumb for MongoDB Schema Design:</strong> ... Related to { Document-oriented database }-{ Data Modeling }</li>            <li><strong>Playing { game }-{ Zero-k }, eating:</strong> It have been quite some time I did this last time.</li>          </ol>        </li>        <li><strong>190531:</strong>          <ol>            <li><strong>Playing { game }-{ Zero-k }:</strong> <strong> Playing game all day long, non-stoped, even passed midnight.</strong></li>          </ol>        </li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-01<a id="id190501m131037"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/05/01/190501m124856/2019-05-01.svg" alt="2019-05-01">  </div>  <ol>    <li><strong>( Music ) { TWICE } - Heart Shaker - acoustic remix:</strong> <a href="https://youtu.be/D2Fkg1MOOIM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { TWICE } - What is Love?:</strong> <a href="https://youtu.be/i0p1bmr0EmE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { TWICE } - What is Love? - instrumental:</strong> <a href="https://youtu.be/E_PM7tZLFMo" target="_blank" rel="noopener">Link</a>. Suit for study.</li>  </ol></div><div class="h2">  <h2>2019-05-02<a id="id190502m083200"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/05/01/190501m124856/2019-05-02.svg" alt="2019-05-02">  </div>  <ol>    <li><strong>( Database ) { MySQL } (RDBMS) vs { MongoDB } (Document-oriented) detailed comparison:</strong> <a href="https://www.simform.com/mongodb-vs-mysql-databases/" target="_blank" rel="noopener">Link</a>. Including the <code>MongoDB</code> ,, <code>un-Structured Query Language</code>, integrity model - <code>A C I D</code> vs <code>B A S E</code>. // The most advantage of <code>MongoDB</code> I think is, <u>dynamic schema</u>, this can cope with unpredictable future. I'm tired of my code keep breaking continuous.</li>    <li><strong>( Video ) { 看电影了没 } - { 罗伦佐的油 } - 孩子，求你别死！真实事件改编:</strong> <a href="https://youtu.be/wwIxkun_aWs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Express.js } crash course - { Traversy Media }:</strong>      <ol>        <li><strong>3 type of architecture</strong> At <a href="https://youtu.be/L72fhGm1tfE?t=3654" target="_blank" rel="noopener">01:00:54</a>, Brad mentioned about there is 3 different type of architecture youo can use Express to build, 1. server: API ; client: front-end framwork like Vue.js. 2. Complete server side app (server randered template) (express-handlebars? EJS (Embedded JavaScript templating)?). 3. Simply serving static web page (html) under specific directory.</li>        <li><strong>07:56, 25:19 Middleware function</strong> At <a href="https://youtu.be/L72fhGm1tfE?t=476" target="_blank" rel="noopener">Link1</a>, <a href="https://youtu.be/L72fhGm1tfE?t=1519" target="_blank" rel="noopener">link2</a>. They can alter content inside request and response object.</li>        <li><strong>11:18 { process.env.PORT }:</strong> At <a href="https://youtu.be/L72fhGm1tfE?t=678" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>37:23 Use { router }:</strong> At <a href="https://youtu.be/L72fhGm1tfE?t=2243" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>43:24 Loading extra body parser feature for { express }:</strong> At <a href="https://youtu.be/L72fhGm1tfE?t=2604" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>{ Express.js } - API reference:</strong> <a href="https://expressjs.com/en/4x/api" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Application ) { httpie } - A CLI, cURL-like tool for humans:</strong> <a href="https://github.com/jakubroztocil/httpie" target="_blank" rel="noopener">Link</a>. This tool is for testing backend (such as API), you can lanuch a testing resquest to your target server with a url, and get the response. You can do diverse of things such us - use different request methods (GET, POST, PUT, DELETE), different content type (application/json, form data), you can download a jpg image ... . // Example - <code>http --pretty all 'https://dog.ceo/api/breeds/image/random' | less</code>.</li>  </ol></div><div class="h2">  <h2>2019-05-03<a id="id190502m220141"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/05/01/190501m124856/2019-05-03.svg" alt="2019-05-03">  </div>  <ol>    <li><strong>( Node.js ) { Traversy Media } - { Node.js } crash course:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/fBNz5xF-Kx4" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>15:18 [ re-generate ]-[ re-create] the whole { node_modules } after delete it:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=918" target="_blank" rel="noopener">Link</a>. You don't need to back up the whole <code>node_modules</code> directory, you can just use <code>npm install</code> and brings those dependencies (rely on <code>package.json</code>) back.</li>        <li><strong>20:41 { __dirname } and { __filename }:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=1242" target="_blank" rel="noopener">Link</a>. The variable value will be the file location where the <code>__filename</code> and <code>__dirname</code> is used.</li>        <li><strong>22:36 { path } module:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=1356" target="_blank" rel="noopener">Link</a>. The <code>path.join()</code> is useful to deal with those dirty prefixing and suffixing <code>/</code> characters of the given arguments, in other words, you don't nee don't need to remove them, <code>path.join()</code> will handle those things automatically. // Notice, you can even pass argument like <code>../../</code>, it will travel back to upper level of directories.</li>        <li><strong>22:36 { fs } module:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=1724" target="_blank" rel="noopener">Link</a>. File system operation, like append text to a file, rename a  directory ... .</li>        <li><strong>42:16 { url } module:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=2536" target="_blank" rel="noopener">Link</a>. Can get query parameters, domain name ... .</li>        <li><strong>46:54 { event } module:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=2814" target="_blank" rel="noopener">Link</a>. Including how to emit an custom event, and define the custom callback (or class) for that event.</li>        <li><strong>56:17 { http } module:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=3377" target="_blank" rel="noopener">Link</a>. Can handle http request and response. When your application becomes more complex, you definitely want to use some framework like <code>express.js</code>.</li>        <li><strong>01:24:51 Deploy back-end to { Heroku }:</strong> <a href="https://youtu.be/fBNz5xF-Kx4?t=5091" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-04<a id="id190504m073338"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/05/01/190501m124856/2019-05-04.svg" alt="2019-05-04">  </div>  <ol>    <li><strong>( Vue.js ) vue-router 常用用法:</strong> <a href="https://ithelp.ithome.com.tw/articles/10208798?sc=iThelpR" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Node.js ) Get project root from a running node.js application:</strong> <a href="https://stackoverflow.com/questions/10265798/determine-project-root-from-a-running-node-js-application" target="_blank" rel="noopener">Link</a>. There is several methods, each of them have pros and cons.</li>    <li><strong>( Kpop ) { TWICE TV } - { YES or YES } - EP.06:</strong> <a href="https://youtu.be/tnOlipQ69Us" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-05-05<a id="id190505m080414"></a></h2>  <div class="kwCloud">    <div class="itm s1">Do I really need little sensation stimulation?</div>    <div class="itm s2">Exercising</div>    <div class="itm s1">Toughness</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ Git }</div>    <div class="itm s1">{ Bootstrap }</div>  </div>  <ol>    <li><strong>Do I really need little sensation stimulation?:</strong> I'm thinking about do I really need any form of entertainment? Can I have a life totally without any entertainment and those little sensation stimulation? What is the life looks like if most of time I don't have (need) those things?</li>    <li><strong>( http ) { PUT } vs. { POST } in { REST }:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://stackoverflow.com/questions/630453/put-vs-post-in-rest" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Methods can use same url:</strong> In <code>REST</code>, you use the same URL, but interact with it using different methods. The method used to access the resource defines the actual type of operation.</li>        <li><strong>About "safe" and "idempotent":</strong> <a href="https://data-sci.info/2015/10/24/%E5%B8%B8%E8%A6%8B%E7%9A%84http-method%E7%9A%84%E4%B8%8D%E5%90%8C%E6%80%A7%E8%B3%AA%E5%88%86%E6%9E%90%EF%BC%9Agetpost%E5%92%8C%E5%85%B6%E4%BB%964%E7%A8%AEmethod%E7%9A%84%E5%B7%AE%E5%88%A5/" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Http ) Authentication with header ,, { x-auth-token }:</strong> <a href="https://youtu.be/iYM2zFP3Zn0?t=1745" target="_blank" rel="noopener">29:05</a>.</li>    <li><strong>Github ,, { pull request }:</strong>      <ol>        <li><strong>About pull requests - doc:</strong> <a href="https://help.github.com/en/articles/about-pull-requests" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Creating a pull request:</strong> <a href="https://help.github.com/en/articles/creating-a-pull-request" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>How to do a GitHub pull request - Stackoverflow:</strong> <a href="https://stackoverflow.com/questions/14680711/how-to-do-a-github-pull-request" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Base } repository, { Fork } (forked) ({ head }) repository, { origin } and { upstream } - Stackoverflow:</strong> <a href="https://stackoverflow.com/questions/6286571/are-git-forks-actually-git-clones/6286877#6286877" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>{ Bootstrap }:</strong>      <ol>        <li><strong>bootcss.com:</strong> <a href="http://www.bootcss.com/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Bootstrap 4 Tutorial:</strong> <a href="https://www.w3schools.com/bootstrap4/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Bootstrap 4 Get Started:</strong> <a href="https://www.w3schools.com/bootstrap4/bootstrap_get_started.asp" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( CSS ) { overflow-wrap }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap" target="_blank" rel="noopener">Link</a>. Use <code>overflow-wrap</code> instead of old <code>word-wrap</code> (though they do the same thing). And about <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/word-break" target="_blank" rel="noopener">word-break</a>, I don't know where it should be used, no reaserch it yet and I still don't need it.</li>    <li><strong>( Social movement ) 這是動蕩的時代，也是說故事的時代（上）：「好故事」成為一盞明燈，指引改革之路:</strong> <a href="https://npost.tw/archives/43644" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Social movement ) 這是動蕩的時代，也是說故事的時代（下）：「好故事」能跨越差異，成為社會運動的立基:</strong> <a href="https://npost.tw/archives/43652" target="_blank" rel="noopener">Link</a>. Unread.</li>    <li><strong>( NPO ) ( Fundraising ) 10 大最有效的線上募款工具、6 個互聯網時代不可不知的關鍵字／2018 全球 NGO 技術應用調查:</strong> <a href="https://npost.tw/archives/42515" target="_blank" rel="noopener">Link</a>. Unread.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:40 Wake up.</strong></li>        <li><strong>06:50 Go exercising:</strong> This is the 3rd time I did this after few years without exercising.</li>        <li><strong>07:40 Cooking, eating, reading, thinking.</strong></li>        <li><strong>09:30 Thinking about do I really need entertainment?:</strong> I'm thinking about do I really need any form of entertainment? Can I have a life totally without any entertainment and sensation satisfaction? What is the life looks like if most of time I don't have (need) those things?</li>        <li><strong>10:00 Designing keyword cloud:</strong> I will abort putting the Concept Map in my blog, but use "keyword cloud" instead. So now every day information will have these 3 dimension: 1. Basic infomation structure. 2. Time (of log) 3. Importance scale.</li>        <li><strong>12:00 Taking nap.</strong></li>        <li><strong>12:30 Learning { Express.js }.</strong></li>        <li><strong>14:40 Serching { PUT } vs. { POST }.</strong></li>        <li><strong>15:00 Searching back-end big [ direction ]-[ roadmap ]:</strong> I mostly rely on trusty resources like <code>Traversy Media</code> now. I'm planning to dive into his tutorial in the near future.</li>        <li><strong>15:35 Watching video ,, TWICE TV "What is Love?" EP.03:</strong> <a href="https://youtu.be/RgG0UNQoNIs" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>15:55 Understand structure of { LoveAndHappiness }:</strong> Hard to guess, the front-end is not finished yet, so it is hard to guess what is the meaning of those API data.</li>        <li><strong>17:10 Talk to { Woody }.</strong></li>        <li><strong>17:30 Github ,, { pull request }, understanding and setting up.</strong></li>        <li><strong>19:00 { LoveAndHappiness } ,, researching the base css file:</strong> I tried to do little modification first, before I do bigger one. I want to start from beautify the header first.</li>        <li><strong>19:50 Understanding { Bootstrap } ,, basic.</strong></li>        <li><strong>20:50 Cooking and eating.</strong></li>        <li><strong>21:30 Watching video ,, TWICE TV "What is Love?" EP.01:</strong> <a href="https://youtu.be/aPKBpCbgqw0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>22:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-06<a id="id190505m204247"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">Toughness</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s2">{ git }</div>  </div>  <ol>    <li><strong>( CSS ) ( SASS ) { @mixin } "function":</strong> <a href="https://stackoverflow.com/questions/40338877/css-scss-media-query-or-class" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Cloud database ) What is { Firestore }-{ firebase }?:</strong> <a href="https://youtu.be/sYNjEzcOTOs?list=PLillGF-RfqbYsOOycB67Raf9dwmL6Y31M&t=17" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Back-end ) { Traversy Media } - { MEAN } stack front To back:</strong>      <ol>        <li><strong>05:00 Dependency for back-end project:</strong> <a href="https://youtu.be/DQ9pZ2NKXRo?list=PLillGF-RfqbZMNtaOXJQiDebNXjVapWPZ&t=300" target="_blank" rel="noopener">Link</a>. It includes - express, mongoose, bcryptjs, cors, jsonwebtoken, body-parser, passport, passport-jwt. And finally Brad use <code>npm install</code> to install those non-exists dependencies, list in <code>package.json</code>, at once.</li>        <li><strong>09:14 Install { nodemon } globally:</strong> <a href="https://youtu.be/DQ9pZ2NKXRo?list=PLillGF-RfqbZMNtaOXJQiDebNXjVapWPZ&t=554" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>18:09 Set static directory for { Angular }-[ public files ]:</strong> <a href="https://youtu.be/DQ9pZ2NKXRo?list=PLillGF-RfqbZMNtaOXJQiDebNXjVapWPZ&t=1089" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Git ) How to add remote repo, and how to change from default lable name "origin" to different one?:</strong> <code>git remote add myCustomLableName https://github.com/fooUser/barProject</code>. This will define <code>https://github.com/fooUser/barProject</code> as <code>myCustomLableName</code>.</li>    <li><strong>( Git ) How to merge from different repository label (instead of default "origin"):</strong>      <ol>        <li><strong>.{ git remote add myCustomLableName https://github.com/fooUser/barProject }.</strong></li>        <li><strong>.{ git fetch myCustomLableName }.</strong></li>        <li><strong>.{ git merge myCustomLableName/master }:</strong> Change <code>master</code> to the branch you want to merge.</li>        <li><strong>.Weirdly, I still saw this kind of usage - { git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME }:</strong> In <a href="https://help.github.com/en/articles/merging-an-upstream-repository-into-your-fork" target="_blank" rel="noopener">link</a>.</li>      </ol>    </li>    <li><strong>( Video ) 以平權與安全之名：穆斯林面紗禁令合理嗎？｜國際大風吹｜EP52:</strong> <a href="https://youtu.be/a-8G4SZB_Us" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:40 Wake up.</strong></li>        <li><strong>06:40 ~ 07:20 Go exercising:</strong> This is the 4th time I did this after few years without exercising.</li>        <li><strong>07:30 Upload blog.</strong></li>        <li><strong>07:45 Watching video ,, May 3rd 2019 (1)文贵在做平板称时的视频做得不标准，希望战友们不要秀文贵这样的做共28分钟:</strong><a href="https://youtu.be/4SEBoogJp24" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>07:52 Taking shower.</strong></li>        <li><strong>08:10 Watching video ,, 2019年4月29日：台湾．香港．将是灭共的重要之地……谷畜生侮骂一亿河南同胞必须受惩罚！:</strong><a href="https://youtu.be/1xG7TCT94Q0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>08:25 Learning { Bootstrap } ,, basic:</strong> To <a href="https://www.w3schools.com/bootstrap4/bootstrap_typography.asp" target="_blank" rel="noopener">typography</a>.</li>        <li><strong>08:55 Cooking.</strong></li>        <li><strong>09:15 Learning { Bootstrap } ,, basic:</strong> To <a href="https://www.w3schools.com/bootstrap4/bootstrap_colors.asp" target="_blank" rel="noopener">colors</a>.</li>        <li><strong>09:50 ~ 10:00 Brushing teeth.</strong></li>        <li><strong>10:05 Learning { Bootstrap } ,, basic:</strong> To <a href="https://www.w3schools.com/bootstrap4/bootstrap_buttons.asp" target="_blank" rel="noopener">buttons</a>.</li>        <li><strong>10:15 Keyboard problem:</strong> "k" key doesn't works all other key works smoothly, restarting PC doesn't works, change usb cable doesn't works, change to differnt usb socket doesn't works. The problem might not be hardware problem but software, the key mechanical function is not the problem (not "short" at there). After re-plug the usb plug to another socket few times it still don't works, but the last time I tried it, it works smoothly, very wierd problem. Last time this problem happened on "m" key.</li>        <li><strong>10:25 Learning { Bootstrap } ,, basic:</strong> To <a href="https://www.w3schools.com/bootstrap4/bootstrap_alerts.asp" target="_blank" rel="noopener">alert</a>.</li>        <li><strong>11:00 Clean up useless file.</strong></li>        <li><strong>11:35 ~ ?? Learning { Bootstrap } ,, basic:</strong> To <a href="https://www.w3schools.com/bootstrap4/bootstrap_navs.asp" target="_blank" rel="noopener">navs</a>.</li>        <li><strong>12:00 ~ ?? Learning { SASS }.</strong></li>        <li><strong>12:15 ~ 12:25 Learning { Bootstrap } ,, basic:</strong> I'm feeling too much to learn, too deep to dive into this rabbit hole, I should hold back at this moment.</li>        <li><strong>12:25 ~ 13:30 Misc:</strong> Taking nap, doing laundry.</li>        <li><strong>13:30 Watching video.</strong></li>        <li><strong>14:00 Understanding { MEAN } stack.</strong></li>        <li><strong>15:15 Thinking about aborting the idea of using web-based file manager in my CMS:</strong> Web-based file manager, such as <code>elfinder</code>, only makes the system design more complex, bad for user experience (myself). I should design like this - front-end call back-end (Express.js), then use core module of { Express.js } which can invoke shell command, to open { Nautilus } file manager directly. And no need to use { webdev } at all.</li>        <li><strong>16:20 Watching video:</strong> <a href="#">柴知道 - 如何做一只寄生虫？ 第二集</a>.</li>        <li><strong>16:30 Understanding { MEAN } stack.</strong></li>        <li><strong>16:50 Buying food.</strong></li>        <li><strong>17:20 Understanding { MEAN } stack.</strong></li>        <li><strong>18:00 ~ ?? Cooking and eating.</strong></li>        <li><strong>19:00 Watching video.</strong></li>        <li><strong>19:30 Don't know how to { git pull } from { LoveAndHappiness }:</strong> After few hours of struggling, <code>woody</code> solved my problem with 3 lines of commands.</li>        <li><strong>23:20 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-07<a id="id190506m074020"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">Toughness</div>    <div class="itm s1">Clean the room</div>    <div class="itm s2">{ git }</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ SASS } and { SCSS }</div>    <div class="itm s1">{ CSS 的模組化 }</div>    <div class="itm s1">{ Marginal utility } of doing everything</div>  </div>  <ol>    <li><strong>{ Git }:</strong>      <ol>        <li><strong>( Git ) help.github.com:</strong> <a href="https://help.github.com" target="_blank" rel="noopener">Link</a>. Help center</li>        <li><strong>( Git ) { Git } 遠程操作詳解:</strong> <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Link</a>. Good graphs and easy to understand content (still comprehensive) for beginners, solve a lot misconception for new users.</li>        <li><strong>( Git ) { git merge } problem ,, shows "Already up-to-date" even it is not?:</strong> Problem solved, { git } just behave like this natually. You don't have to do anything about this. See <a href="https://stackoverflow.com/questions/634546/git-merge-reports-already-up-to-date-though-there-is-a-difference" target="_blank" rel="noopener">link1</a>, <a href="https://stackoverflow.com/questions/41477261/master-branch-is-already-up-to-date-and-yet-it-is-ahead-of-origin-master-by" target="_blank" rel="noopener">link2</a>. --{ ... it means that the branch you’re trying to merge is a parent of your current branch. Congratulations, that’s the easiest merge you’ll ever do. }--.</li>        <li><strong> Git Doc - addressing merge conflict:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://help.github.com/en/articles/addressing-merge-conflicts" target="_blank" rel="noopener">Link</a>. Include those topics:</li>            <li><strong>.About merge conflicts:</strong> <a href="https://help.github.com/en/articles/about-merge-conflicts" target="_blank" rel="noopener">Link</a>. Including auto merge as possible ; what cause a conflict ; <code>Merge pull request button</code>.</li>            <li><strong>.Resolving a merge conflict on GitHub:</strong> <a href="https://help.github.com/en/articles/resolving-a-merge-conflict-on-github" target="_blank" rel="noopener">Link</a>. Including <u>conflict editor</u>.</li>            <li><strong>.Resolving a merge conflict using the command line and text editor:</strong> <a href="https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line" target="_blank" rel="noopener">Link</a>. Including using <code>git status</code> to list all files that is affected by the merge conflict ; search for <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> string pattern to jump to the conflict line directly.</li>          </ol>        </li>        <li><strong>( Git ) { git merge } two local branches:</strong> <a href="https://stackoverflow.com/questions/25053697/git-merge-two-local-branches" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Git ) { git remote ... }:</strong>          <ol>            <li><strong>( Git ) { git remote show origin }.</strong></li>            <li><strong>( Git ) { git remote -v }:</strong> Show remote repo alias. You can define alias name yourself.</li>            <li><strong>( Git ) { git remote add myCustomAliasName thatLongRemoteRepoUrl }.</strong> Also see <a href="https://help.github.com/en/articles/adding-a-remote" target="_blank" rel="noopener">[ Doc ]-[ Adding a remote ]</a>. After this, you just need to use <code>git fetch myCustomAliasName</code> and <code>git push myCustomAliasName</code> instead of that long url everytime.</li>          </ol>        </li>        <li><strong>Doc - Fetching a remote:</strong> <a href="https://help.github.com/en/articles/fetching-a-remote" target="_blank" rel="noopener">Link</a>. Include - git clone ; git fetch ; <strong>git merge</strong> ; git pull.</li>        <li><strong>( Git ) What does { origin } means:</strong> <a href="https://githowto.com/what_is_origin" target="_blank" rel="noopener">Link</a>. It is a [ alias ]-[ shorthand ] of the actual long url, so instead of typing and remembering that long url, you know can just use that short alias. Of course you can define alias by command like <code>git remote add myCustomAliasName https://github.com/fooUser/barProject</code>, after this, you just need to use <code>git fetch myCustomAliasName</code> and <code>git push myCustomAliasName</code> instead of that long url everytime. // Also see <code>man git remote</code>. // Also see { Refs } (references).</li>        <li><strong>( Git ) What is { Refs } (references) :</strong> <a href="https://www.atlassian.com/git/tutorials/refs-and-the-reflog" target="_blank" rel="noopener">Link</a>. Not fully understand.</li>        <li><strong>( Git ) { git branch -a }, { git branch -vv }.</strong></li>        <li><strong>( Git ) { git add -A } and what is { Stage } means:</strong> Mentioned in <a href="https://marklodato.github.io/visual-git-guide/index-en.html" target="_blank" rel="noopener">this link</a>. It is useful in case such as, when you <code>checkout</code> to other branch and <code>checkout</code> back, you lost the new modified content if you didn't use <code>git add -A</code> before doing first <code>checkout</code>.</li>        <li><strong>( Git ) { git add -A } vs { git add . }:</strong> <a href="https://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add?rq=1" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Git ) { git branch -m }:</strong> <a href="https://stackoverflow.com/questions/15376241/why-does-git-say-my-master-branch-is-already-up-to-date-even-though-it-is-not" target="_blank" rel="noopener">Link</a>, found from top answer.</li>        <li><strong>( Git ) { git branch -t }:</strong> <a href="https://stackoverflow.com/questions/15376241/why-does-git-say-my-master-branch-is-already-up-to-date-even-though-it-is-not" target="_blank" rel="noopener">Link</a>, found from top answer. So <code>git branch -m master bunchofhacks</code> will make a new local branch named master that "tracks" the origin (or upstream) master:</li>        <li><strong>( Git ) { git reset --hard }:</strong> <a href="https://stackoverflow.com/questions/15376241/why-does-git-say-my-master-branch-is-already-up-to-date-even-though-it-is-not" target="_blank" rel="noopener">Link</a>, found from top answer.</li>        <li><strong>( Git ) Pulling via Rebase:</strong> <a href="https://www.atlassian.com/git/tutorials/syncing/git-pull" target="_blank" rel="noopener">Link</a>. --{ The --rebase option can be used to ensure a linear history by preventing unnecessary merge commits. }--. Also see those graphs, they are nice.</li>        <li><strong>( Git ) { git pull x x --allow-unrelated-histories }:</strong> <a href="https://www.mkyong.com/git/git-pull-refusing-to-merge-unrelated-histories/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Git ) { git push } problem ,, "Updates were rejected because the remote contains work that you do not have locally":</strong> <a href="https://gitbook.tw/chapters/github/fail-to-push.html" target="_blank" rel="noopener">Link</a>. See the graphs, it explain the concept nicely with easy way. So there are 2 ways to solve this, pull first (and resolve conflicts), then push ; use <code>git push -f</code> (cautious on this!).</li>      </ol>    </li>    <li><strong>( CSS ) Sass/SCSS 簡明入門教學:</strong> <a href="https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/" target="_blank" rel="noopener">Link</a>. Easy to understand, still comprehensive.</li>    <li><strong>( CSS ) About { Sass } ,, ampersand (&amp):</strong> <a href="https://css-tricks.com/the-sass-ampersand/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( CSS ) { @mixin } vs { @extend }:</strong> <a href="https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/" target="_blank" rel="noopener">Link</a> ,, section 8. Also see <a href="http://thesassway.com/intermediate/understanding-placeholder-selectors" target="_blank" rel="noopener">placeholder selector</a>.</li>    <li><strong>( CSS ) { #{} }-[ string interpolation ]:</strong> <a href="https://stackoverflow.com/questions/24885582/what-does-hash-sign-do-outside-loops-in-sass" target="_blank" rel="noopener">Link1</a>, <a href="https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/" target="_blank" rel="noopener">link2</a> (<code>@each</code> part).</li>    <li><strong>( CSS ) { SCSS } 物件導向模組設計 (1):</strong> <a href="https://blog.chh.tw/posts/scss-object-oriented/#lkp" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( CSS ) CSS - 模組化 - methodology - OOCSS、SMACSS、BEM、CSS Modules、CSS in JS:</strong> <a href="https://cythilya.github.io/2018/06/05/css-methodologies/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>08:23 Wake up.</strong></li>        <li><strong>08:40 Exercising at home because raining outside:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT Ladder Workout - 20 Minute HIIT Workout at Home</a>. Very exhausted when I done this, I'm a little trembling. I barely finish it completely, pause in the middle several times, out of breath all the time. Much harder than I thought.</li>        <li><strong>09:05 ~ 11:25 Watching video, cleaning room, cooking:</strong>          <ol>            <li><strong>M觀點 - #23 - 美中貿易戰川普為何亮出王牌殺手？25% 的關稅到底會對中國經濟造成多大的打擊？:</strong> <a href="https://youtu.be/w4MYm2XAn0U" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>郭文貴 - 3rd May 2019 (3) 3rd may 2019 (2)2017年的5月3号和2018年的5月3号都发生了哪些重大事件，文贵与大家分享一些过去没有讲过的事情。:</strong> <a href="https://youtu.be/QXddVpZJKSY" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>郭文貴 - May 6, 2019文贵直播谈谈，为什么川普总统要突然间的停掉，中美贸易协定共产党必须还回属于14亿中国人民的一切财富一切权力！:</strong> <a href="https://youtu.be/iIrHro8KsxY" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>09:20 ~ 09:30 Upload blog.</strong></li>        <li><strong>11:30 Learning { git } ,, addressing merge conflict.</strong></li>        <li><strong>13:40 Still found git merge not working properly:</strong> So, now even I modified the content of README.md file, when I merge, it still didn't do conflict resolve, it shows the message <code>Already up-to-date</code>.</li>        <li><strong>16:00 Sleeping:</strong> { Git } problem <code>Already up-to-date</code> not solved yet, frustrated.</li>        <li><strong>16:40 Keep learning { git }:</strong> Problem solved, { git } just behave like this natually.</li>        <li><strong>16:41 Clean up { git } resources (final orginizing).</strong></li>        <li><strong>18:10 ~ ?? Learning { SASS }**[ object oriented ]**[ principle ]**[ mudule ].</strong></li>        <li><strong>18:30 ~ 18:50 Cooking.</strong></li>        <li><strong>18:50 Learning { SASS } vs { SCSS }:</strong> <code>SCSS</code> seems to be enhanced version of <code>SASS</code>. See <a href="https://www.sassmeister.com/" target="_blank" rel="noopener">www.sassmeister.com</a> (found from <a href="https://youtu.be/TymGwiNMlh0" target="_blank" rel="noopener">Kevin Powell's video</a>) to [ test ]-[ generate ]-[ compile ] <code>SASS</code> and <code>SCSS</code> in live.</li>        <li><strong>19:10 Learning { SCSS }.</strong></li>        <li><strong>20:40 ~ 21:00 Talking with another engineer 廣x of { LoveAndHappiness }:</strong> And <code>woody</code>, through group voice chat on <code>Line</code>. I think I will need to start to write css tomorrow, and push and pull frequently. Take it as a sepereate project, don't neee to always think too much to comply to previous styling (some root config and style), just make it up as soon as possible.</li>        <li><strong>21:15 Learning { SCSS }.</strong></li>        <li><strong>21:30 Update backend-end:</strong> From <code>woody</code>.</li>        <li><strong>21:40 Learning { CSS } methodology.</strong></li>        <li><strong>21:50 Brushing teeth.</strong></li>        <li><strong>22:00 Watching video:</strong> <a href="https://youtu.be/Hb42FoxACxc" target="_blank" rel="noopener">TWICE TV "What is Love?" EP.06</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-08<a id="id190508m064507"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">Toughness</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ Sass }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">{ Vue }</div>    <div class="itm s1">Troubleshooting</div>  </div>  <ol>    <li><strong>( CSS ) CSS 方法論與 Atomic CSS:</strong> <a href="https://blog.techbridge.cc/2017/04/29/css-methodology-atomiccss/" target="_blank" rel="noopener">Link</a>. Useful.</li>    <li><strong>( CSS ) CSS - 模組化 - methodology - OOCSS、SMACSS、BEM、CSS Modules、CSS in JS:</strong> <a href="https://cythilya.github.io/2018/06/05/css-methodologies/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( CSS ) Scss directive:</strong> <a href="https://hackmd.io/p/SywjempFW#/10" target="_blank" rel="noopener">Link</a>. Including { if, else, for, each, while }.</li>    <li><strong>( CSS ) Sass Variable in CSS calc() function don't work?:</strong> <a href="https://stackoverflow.com/questions/17982111/sass-variable-in-css-calc-function" target="_blank" rel="noopener">Link</a>. Use <code>Interpolate</code>. So you can use <code>margin: $foo</code>, but you can't use <code>margin: calc(1em + $foo)</code> you have to use <code>margin: calc(1em + #{$foo})</code> instead.</li>    <li><strong>( CSS ) ( Vue ) Why even { scoped } is ued, parent component selector will overwrite child component selector?:</strong> <a href="https://stackoverflow.com/questions/45898865/how-to-correctly-use-scoped-styles-in-vuejs-single-file-components" target="_blank" rel="noopener">Link</a>. The root element of every component is an exception. A child component's root node will be affected by both the parent's scoped CSS and the child's scoped CSS.</li>    <li><strong>( CSS ) ( Vue ) { Deep } selector:</strong> <a href="https://stackoverflow.com/questions/48032006/how-do-i-use-deep-or-in-vue-js" target="_blank" rel="noopener">How do I use /deep/ or &gt;&gt;&gt; in Vue.js?</a>. In parent comonent ,, scoped style, you can use <code>deep selector</code> to select child component ,, element, this will works.</li>    <li><strong>( Sass ) ( Vue ) How to import a { Sass } file into every vue component in an app:</strong> <a href="https://css-tricks.com/how-to-import-a-sass-file-into-every-vue-component-in-an-app/" target="_blank" rel="noopener">Link</a>. <code>npm i node-sass sass-loader</code> first, then config the <code>vue.config.js</code>.</li>    <li><strong>( NPM ) About { --save } option and derivatives family:</strong> <a href="https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install" target="_blank" rel="noopener">Link1</a> <a href="https://docs.npmjs.com/cli/install" target="_blank" rel="noopener">Link2</a>. { --save-prod ; --save-dev ; --save-optional ; --save-exact ; --save-bundle ... }.</li>    <li><strong>( Music ) { Twice } - { Likey }:</strong> <a href="https://youtu.be/V2hlQkVJZhE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:40 Wake up.</strong></li>        <li><strong>06:50 Exercising:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a>. The routine is as same as yesterday, but i make it less intense for myself, I can't fully follow the routine yet.</li>        <li><strong>07:15:</strong> Watching video.</li>        <li><strong>07:23:</strong> Taking shower.</li>        <li><strong>07:48 ~ 08:00 Uploading blog.</strong></li>        <li><strong>08:00 Misc.</strong></li>        <li><strong>08:25 Learning CSS - 模組化 - methodology.</strong></li>        <li><strong>09:10 Preparing ingredients and cooking.</strong></li>        <li><strong>09:50 Learning SCSS directive.</strong></li>        <li><strong>10:00 Eating:</strong> <a href="https://youtu.be/uO4hhYaJ1Qs" target="_blank" rel="noopener">TWICE 何為彩彩向日葵-名井南Michaeng(MinaX彩瑛)</a>. Funny.</li>        <li><strong>10:20 Brushing teeth.</strong></li>        <li><strong>10:30 Understanding { LoveAndHappiness } structure:</strong> Understanding <code>LoveAndHappiness</code> structure before I can start to design CSS.</li>        <li><strong>10:35 Working on { LoveAndHappiness }:</strong> <code>header.vue</code> ,, CSS.</li>        <li><strong>11:00 Thinking about CSS ,, using global scope or local scope, for vue component:</strong> CSS ,, maybe I will used global CSS for 10% of amount, local CSS (<code>Vue</code> ,, <code>scoped</code> attribue) for 90% of amount. So I can have some few central config, while mostly higly decoupled.</li>        <li><strong>11:15 Working on { LoveAndHappiness }:</strong> <code>header.vue</code> ,, CSS.</li>        <li><strong>12:30 Dealing with bootstrap problem:</strong> Bootstrap in { LoveAndHappiness } is not working as expect, I build a [ new ]-[ clean ]-[ dummy ] environment to do testing.</li>        <li><strong>12:55 Take a nap:</strong> Problem unsolved.</li>        <li><strong>13:30 Watching video:</strong> <a href="https://youtu.be/OBA40znhvVU" target="_blank" rel="noopener">TWICE Michaeng小劇場(MinaX彩瑛)</a>.</li>        <li><strong>13:35 Dealing with { bootstrap } installation problem:</strong> Building a [ new ]-[ clean ]-[ dummy ] environment to do testing.</li>        <li><strong>13:45 Dealing with { Sass } installation problem:</strong> Try to install <code>Sass</code> into testing vue project.</li>        <li><strong>14:45 Dealing with { bootstrap } problem in { LoveAndHappiness }:</strong> <code>Bootstrap</code> in <code>LoveAndHappiness</code> ,, some <code>bootstrap</code> style is overwrited by elsewhere, try to find the reason.</li>        <li><strong>15:05 Give up that problem, keep going on:</strong> I is probably because the global { sass } (custom) overwrite the bootstrap settins (default).</li>        <li><strong>15:30 { LoveAndHappiness } ,, problem ,, bootstrap not working as expect:</strong> My local testing project ,, the break point breaks at incorrect viewport width. // The problem disappeared itself don't know why, might be firefox <code>responsive design mode</code> own problem when <strong>zooming</strong> with <code>Ctrl + scroll wheel</code>.</li>        <li><strong>16:00 keep working on { LoveAndHappiness }.</strong></li>        <li><strong>16:40 Brushing teeth.</strong></li>        <li><strong>16:50 keep working on { LoveAndHappiness }.</strong></li>        <li><strong>19:00 { LoveAndHappiness } ,, solving { CSS } problem:</strong> Don't know why selector <code>[data-v-e5cb3380]</code> is generated by <code>Vue</code>, it overwrite my CSS even mine have a bit higher priority. // <strong>Solved</strong>, it is because when selector is put inside <code>&lt;style scoped&gt;</code>, <code>Vue</code> automatically issue a new unique data attibute for those html elements those selector concerned. But in [ my ]-[ this ] case, I'm writing selector inside <code>&lt;style&gt;</code> instead of <code>&lt;style scoped&gt;</code>, so <code>Vue</code> will not do this, then those selector [ become less aggressive ]-[ having less priority], then cause the "bug".</li>        <li><strong>19:40 keep working on { LoveAndHappiness }.</strong></li>        <li><strong>20:00 ~ ?? Preparing ingredients, cooking, eating.</strong></li>        <li><strong>21:15 ~ ?? keep working on { LoveAndHappiness }.</strong></li>        <li><strong>22:30 Brushing teeth.</strong></li>        <li><strong>22:40 Reflect.</strong></li>        <li><strong>22:48 Watching video.</strong></li>        <li><strong>23:00 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-09<a id="id190509m073023"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">{ CSS } design</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>07:10 Wake up:</strong> A bit ache and tired, don't want to excercise.</li>        <li><strong>07:20 Upload blog.</strong></li>        <li><strong>07:40 Modify blog ,, CSS:</strong> Change all <code>h2</code> to <code>position: sticky</code>, and change the structure of many responding posts. // Wow, cost so much time on this style changing.</li>        <li><strong>09:30 Cooking, eating, misc.</strong></li>        <li><strong>10:35 keep working on { LoveAndHappiness }.</strong></li>        <li><strong>11:10 Brushing teeth.</strong></li>        <li><strong>11:20 keep working on { LoveAndHappiness }.</strong></li>        <li><strong>11:55 Relax, misc.</strong></li>        <li><strong>11:30 keep working on { LoveAndHappiness }.</strong></li>        <li><strong>14:10 Working on { LoveAndHappiness } ,, color scheme:</strong> Now the site already pick <span style="background-color: #FF9300 ; color: white ; padding: 2px 8px ;">#FF9300</span> and <span style="background-color: #B51212 ; color: white ; padding: 2px 8px ;">#B51212</span> for main tone, the <u>information dimension</u> of color is "full", can't add more color (hue) inside it. Now have to figure out new different information dimension not related to color (font-size, font-style, letter-spacing ...).</li>        <li><strong>15:40 Misc.</strong></li>        <li><strong>16:30 Take a nap.</strong></li>        <li><strong>17:05 Watching video.</strong></li>        <li><strong>17:10 keep working on { LoveAndHappiness }:</strong> Styling buttons.</li>        <li><strong>20:55 Cooking.</strong></li>        <li><strong>21:50 Tracking issue of { LoveAndHappiness }:</strong> <code>Bootstrap</code> style been overwrite by <code>Sass</code>.</li>        <li><strong>21:55 Watching video:</strong> <a href="https://youtu.be/G6q_eMGFyCE" target="_blank" rel="noopener">TWICE TV "What is Love?" EP.09</a>, <a href="https://youtu.be/AGHu7dxlq8k" target="_blank" rel="noopener">TWICE TV "Pocari Sweat in Thailand"</a>.</li>        <li><strong>22:45 Sleep.</strong></li>      </ol>    </li>    <li><strong>:</strong> <a href>Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-05-10<a id="id190510m071656"></a></h2>  <div class="kwCloud">    <div class="itm s1">Upper body exercising</div>    <div class="itm s1">{ LoveAndHappiness }</div>    <div class="itm s1">{ Bootstrap }</div>  </div>  <ol>    <li><strong>Upper body exercising:</strong>      <ol>        <li><strong>"Static plank":</strong> <a href="https://youtu.be/aqqwZ_leAMA?t=169" target="_blank" rel="noopener">Link</a>. Not moving. Holding bridge-like posture. Endurance of back and maybe other muscle.</li>        <li><strong>"Pike" push up:</strong> <a href="https://youtu.be/NYL1HaT9JfU?t=885" target="_blank" rel="noopener">Link</a>. Palm and foot are much closer.</li>        <li><strong>"Staggered" push up and use knees:</strong> <a href="https://youtu.be/NYL1HaT9JfU?t=344" target="_blank" rel="noopener">Link1</a>, <a href="https://youtu.be/sYYjx_W7rUY?t=118" target="_blank" rel="noopener">link2</a>. Also see the girl, she use knees to touch the ground so the hand endure less weight, good method.</li>        <li><strong>"Dolphin" push up:</strong> <a href="https://youtu.be/NYL1HaT9JfU?t=1212" target="_blank" rel="noopener">Link</a>. Your head move forwward and backward from hands.</li>        <li><strong>"Supine" push up:</strong> <a href="https://youtu.be/sYYjx_W7rUY?t=636" target="_blank" rel="noopener">Link</a>. Totally reverse your body, hips face the ground, then push up with your elbow instead of palm.</li>        <li><strong>"Skydiver" push up:</strong> <a href="https://youtu.be/0yZDVWab_dI?t=884" target="_blank" rel="noopener">Link</a>. This can train the endurance of the back muscle, nice.</li>        <li><strong>"Bench dips" push up:</strong> <a href="https://youtu.be/QVe8KOQaHNM?t=851" target="_blank" rel="noopener">Link</a>, also see <a href="https://youtu.be/sYYjx_W7rUY?t=880" target="_blank" rel="noopener">tricep dip</a> that do on ground. Rely on a bed, or bench, then hip face to the bed and push up. Place your feet forward or backward to control the weight.</li>        <li><strong>"Sky crunch":</strong> <a href="https://youtu.be/0yZDVWab_dI?t=583" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>"Crisscross crunch":</strong> <a href="https://youtu.be/0yZDVWab_dI?t=817" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>HTML { form }:</strong>      <ol>        <li><strong>How to put two submit buttons in one form, and get different key value pair?:</strong> <a href="https://stackoverflow.com/questions/547821/two-submit-buttons-in-one-form" target="_blank" rel="noopener">Link</a>. See second answer.</li>        <li><strong>Submit form using a button outside the &lt;form&gt; tag:</strong> <a href="https://stackoverflow.com/questions/7020659/submit-form-using-a-button-outside-the-form-tag" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>Bootstrap grid examples:</strong> <a href="https://getbootstrap.com/docs/3.4/examples/grid/" target="_blank" rel="noopener">Link</a>. Few example to demonstrating flexible mixing usage of different screen level.</li>    <li><strong>Bootstrap 3.4 docs:</strong> <a href="https://getbootstrap.com/docs/3.4/css/" target="_blank" rel="noopener">Link</a>. Notice! Some feature are not support or changing in new version (4.x), like <a href="https://www.w3schools.com/bootstrap/bootstrap_forms.asp" target="_blank" rel="noopener">.form-horizontal</a>.</li>    <li><strong>Bootstrap 4.3 docs:</strong> <a href="https://getbootstrap.com/docs/4.3/layout/overview/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Bootstrap ) Is it invalid to use [ multiple ],[ nested ] bootstrap containers?:</strong> <a href="https://stackoverflow.com/questions/26469332/multiple-and-or-nested-bootstrap-containers" target="_blank" rel="noopener">Link1</a>, <a href="https://www.quora.com/Can-I-nest-containers-in-Bootstrap" target="_blank" rel="noopener">lin2</a>. You can have multiple <code>.container</code> and this is quite often, but you can't (can, but not good practice) have nested <code>.container</code>. Also see <u>Bootstrap { .no-gutters } example, no container used</u> example.</li>    <li><strong>Bootstrap { .no-gutters } example, no container used:</strong> <a href="https://codepen.io/tutweb/pen/WvLaBo?editors=1100" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Bootstrap text alignment (such as { text-sm-right}):</strong> <a href="https://stackoverflow.com/questions/29562527/twitter-bootstrap-text-center-when-in-xs-mode" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Bootstrap 4 { col-xs-* } not working?:</strong> <a href="https://stackoverflow.com/questions/41794746/col-xs-not-working-in-bootstrap-4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:50 ~ 06:50 Wake up.</strong></li>        <li><strong>07:17 Exercising at home:</strong> At first try to go outside for jogging, but my calf still feeling ache when I step outside of door, then I go back.</li>        <li><strong>07:37 Find upper body exercising video:</strong></li>        <li><strong>08:20 Upload blog.</strong></li>        <li><strong>08:35 { LoveAndHappiness }:</strong> Dealing with <code>Bootstrap</code> low efficiency again, don't know how to handle it, if I'm not familiar with <code>Bootstrap</code>, or I will need some customization instead of complete follow default <code>Bootstrap</code> theme, then I will need to pay way <strong>higher cost</strong> to deal with many special cases, totally not worth it at all, hand crafting is much <strong>easier, manageable, predictable, faster</strong> in this case.</li>        <li><strong>10:35 Grocery, cooking.</strong></li>        <li><strong>11:30 Eating, config { Atom } editor for soft tabs:</strong> <code>Woody</code> 發現我的編輯器用 space 而不是 tab 做縮排，所以我找出這幾天改過的檔案，把 space 換成 tab，然後 LF (linux 換行) 換成 CRLF (windows 換行)。</li>        <li><strong>13:10 Brushing teeth.</strong></li>        <li><strong>13:20 Understanding { Bootstrap } and forms.</strong></li>        <li><strong>14:55 Take a nap.</strong></li>        <li><strong>15:30 Watching video:</strong> <a href="https://youtu.be/FigAKQQagao" target="_blank" rel="noopener">TWICE TV "FANCY" EP.03</a>.</li>        <li><strong>15:45 Keep understanding { Bootstrap } and forms.</strong></li>        <li><strong>16:35 Finally realized:</strong> Finally realized <code>.form-horizontal</code> is old version "syntax" and no longer support by bootstrap 4.x.</li>        <li><strong>19:40 Bootstrap problem again:</strong> <code>offset-sm-1</code> don't works as expect.</li>        <li><strong>21:40 Having conversation with { Woody }:</strong> About problem of <code>Bootstrap</code> defaults keep been overwrited ; front-end and back-end design in big picture (not this project) ; <code>Token</code> and <code>API</code> ; stateless ; learning some javascript example and good practice from current project ,, code base ; <code>relational database</code> schema designing ... .</li>        <li><strong>21:50 Cooking.</strong></li>        <li><strong>22:20 Eating and muse.</strong></li>        <li><strong>22:50 Bushing teeth.</strong></li>        <li><strong>23:00 Watching video:</strong> <a href="https://youtu.be/WizylneIkXE?t=642" target="_blank" rel="noopener">TWICE TV "FANCY" EP.04</a>.</li>        <li><strong>23:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-11<a id="id190511m075146"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Bootstrap }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ Sticky footer }</div>  </div>  <ol>    <li><strong>( Music ) ( Live ) TWICE - Sleep tight good night, 20171206:</strong> <a href="https://youtu.be/M4pk0Wx372w" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( CSS ) How to make "sticky footer", in five Ways:</strong> <a href="https://css-tricks.com/couple-takes-sticky-footer/" target="_blank" rel="noopener">Link</a>. I prefer flex-box version and grid version most.</li>    <li><strong>( CSS ) Viewport vs Percentage Units:</strong> <a href="https://bitsofco.de/viewport-vs-percentage-units/" target="_blank" rel="noopener">Link</a>. Use vh over % for height , use % over vw for width.</li>    <li><strong>( CSS ) Child inside parent with min-height: 100% not inheriting height:</strong> <a href="https://stackoverflow.com/a/21836870/10607630" target="_blank" rel="noopener">Link</a>. Add <code>height: 1px;</code> to fix this "bug".  But it don't adapt to child size, which is useless.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:30 Wake up.</strong></li>        <li><strong>07:50 Upload blog.</strong></li>        <li><strong>08:00 Working on { LoveAndHappiness }:</strong> Can't found seperate project <code>lahSale</code>.</li>        <li><strong>08:50 Cooking.</strong></li>        <li><strong>09:10 Eating, watching video, brushing teeth:</strong> <a href="https://youtu.be/_G2rmNHQ3s8" target="_blank" rel="noopener">She's Danni - Weekly Vlog 40｜我的第一次冲浪体验🏄｜复仇者联盟｜台球练习</a></li>        <li><strong>09:55 Working on { lahSale }, which is subset of { LoveAndHappiness }:</strong> { lahSale } is subset of { LoveAndHappiness }, the sale part. I tried to set the style directory and path right, keep changing config, refactoring ... And when I finally can make a <code>pull request</code> to base repo, I found 2 repo without <code>fork</code> relationship, is not allowed to do this, so I have to do the <code>fork</code> again, and migrate the modified file one by one to the forked one ... So time consuming because I don't want to make anything wrong.</li>        <li><strong>13:00 Eatting apple and brushing teeth.</strong></li>        <li><strong>13:25 Keep working on { lahSale }:</strong> Refactoring main global style sheet file.</li>        <li><strong>14:20 Thinking how to make "sticky footer".</strong></li>        <li><strong>14:50 Taking a nap.</strong></li>        <li><strong>15:20 Watching video:</strong> <a href="https://youtu.be/4498U9wx5Tg" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>15:40 Thinking how to make "sticky footer".</strong></li>        <li><strong>18:50 Still can't solve "sticky footer" problem, give up right now:</strong> Will fix it in future.</li>        <li><strong>18:51 Apply bootstrap style on site:</strong> Very fast, almost no need to do anything.</li>        <li><strong>20:00 { lahSale } ,, Push to github.</strong></li>        <li><strong>20:10 Cooking and eating, and thinking:</strong> Sit back and watching what <code>woody</code> did so far, he build the entire and complex sales system in such a short period of time. Amazing. What I leaned is the efficiency can be push to this kind of degree.</li>        <li><strong>21:20 Watching video:</strong> <a href="https://youtu.be/M4pk0Wx372w" target="_blank" rel="noopener">TWICE - SLEEP TIGHT GOOD NIGHT, 20171206</a>.</li>        <li><strong>23:59 Sleep:</strong> Too late, bad old habit again.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-12<a id="id190512m080121"></a></h2>  <div class="kwCloud">    <div class="itm s2">Exercising</div>    <div class="itm s2">Lower back muscle</div>    <div class="itm s2">核心肌群</div>    <div class="itm s1">{ 深蹲 }</div>    <div class="itm s1">[ Exercising ]-{ Plank }</div>    <div class="itm s1">{ 超負荷 } 與 { 超補償 }</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s2">{ Font-awesome }</div>  </div>  <ol>    <li><strong>( Exercising ) 如何鍛鍊 "下" 背 (lower back muscle):</strong>      <ol>        <li><strong>如何鍛鍊強壯的 "下" 背 - 床上做:</strong> <a href="https://youtu.be/zoZ1pVAfoRY" target="_blank" rel="noopener">Link1</a>, <a href="https://youtu.be/bqT2mev-6U0?t=346" target="_blank" rel="noopener">link2</a>, <a href="https://youtu.be/2fgM0PYXaZk" target="_blank" rel="noopener">link3</a>.</li>        <li><strong>5分鐘強化腰部 - 站立做 - 遠離腰背痛 - 蹲膝，一腿往後伸， 手舉:</strong> <a href="https://youtu.be/Qzp3_QMJ0kY" target="_blank" rel="noopener">Link</a>. <a href="http://www.jointfit.hk/5minsbacktraining/" target="_blank" rel="noopener">His website</a>.</li>        <li><strong>單腳，彎腰，加雙手提啞鈴 - 站立做:</strong> <a href="https://youtu.be/zqvJUsg8PS4?t=92" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>腹外斜肌訓練 - side plank (or bridge) - 床上做:</strong> <a href="https://youtu.be/8VkBfE5V_0A?t=21" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>核心肌群 - 女生:</strong> <a href="https://youtu.be/3Qw5vvyibZA" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>核心肌群 - 女生2:</strong> <a href="https://youtu.be/VPydBcOBSx4?t=245" target="_blank" rel="noopener">Link</a>. <strong>深蹲</strong>，上下台階，跳繩，貓式 (<a href="https://youtu.be/tqt4IkkrnAU?t=287" target="_blank" rel="noopener">這個更好?</a>)，躺床抬腿。 不確定這些知識正不正確，但鍛鍊核心肌群很重要，常常聽到。</li>        <li><strong>Plank:</strong> So my conclusion is, <code>planks</code> can be grouped to these 3 types - face down, face up, <a href="https://youtu.be/Y458JwXPn58?t=399" target="_blank" rel="noopener">side</a>.</li>        <li><strong>仰臥起坐對你的背部不好？:</strong> <a href="https://youtu.be/xjhGVvqWjxs" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Exercising ) 了解 { 超負荷 } 與 { 超補償 }:</strong> <a href="https://www.mr-sport.com.tw/post/overload-and-supercompensation.html" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue.js ) { created() } vs { mounted() }:</strong> { created() } is before dom-rendering, { mounted() } is after.</li>    <li><strong>Install { font-awesome } on { vue.js }:</strong> To install v5, need npm package <a href="https://github.com/FortAwesome/vue-fontawesome#installation" target="_blank" rel="noopener">{ @fortawesome }</a> (v5), not <code>font-awsome</code> (v4 only). </li>    <li><strong>( Bootstrap ) What is class=“mb-0” in Bootstrap 4?:</strong> <a href="https://stackoverflow.com/questions/41574776/what-is-class-mb-0-in-bootstrap-4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:50 Wake up.</strong></li>        <li><strong>08:15 Exercising at home.</strong></li>        <li><strong>08:40 Watching video about exercising.</strong></li>        <li><strong>11:55 Take a nap.</strong></li>        <li><strong>12:25 Upload blog and tweaking keyword cloud scale size.</strong></li>        <li><strong>13:00 Find html5 date picker input module.</strong></li>        <li><strong>13:30 Found why { eureka2/ab-datepicker } date picker don't work properly:</strong> Found <a href="https://github.com/eureka2/ab-datepicker#dependencies" target="_blank" rel="noopener">{ eureka2/ab-datepicker }</a> which are good at accessibility. But however I tried, I still can't found the [ reason ]-[ problem ] the button not work properly (glitchy) on my machine. After speding one hour go through every possibility, I finally found they mentioned they are using <code>Bootstrap 3</code> instead of 4, in the not easily seen area. And I have to use extra option <code>markup: 'bootstrap4',</code> and install <code>font-awesome</code> to load it properly.</li>        <li><strong>14:40 Searching about how to load external javascript into { Vue.js }:</strong> For { eureka2/ab-datepicker }.</li>        <li><strong>15:50 Misc.</strong></li>        <li><strong>16:20 Cooking.</strong></li>        <li><strong>16:50 Understanding { font-awesome }.</strong></li>        <li><strong>17:00 Brushing teeth.</strong></li>        <li><strong>17:10 Understanding { font-awesome }.</strong></li>        <li><strong>18:00 Try to install new { font-awesome } version:</strong> V4 to v5, need npm package <a href="https://github.com/FortAwesome/vue-fontawesome#installation" target="_blank" rel="noopener">{ @fortawesome }</a> (v5), not <code>font-awsome</code> (v4 only). </li>        <li><strong>19:15 Keep working on { lahSale }:</strong> Styling using Bootstrap and Font-awesome. Tomorrow is the user feedback stage of the <u>sale system</u>, so this need to be done.</li>        <li><strong>22:10 Cooking.</strong>.</li>        <li><strong>22:30 Eating and watching video:</strong> <a href="https://youtu.be/l5wnSLq1Wqw" target="_blank" rel="noopener">TWICE - "FANCY" Dance Cover | Ellen and Brian</a>, <a href="https://youtu.be/0Hqi5DlHQKw" target="_blank" rel="noopener">【今周刊】從學渣到學霸 台灣英語教父的成妖之路</a>, <a href="https://youtu.be/v95MoOaLyFY" target="_blank" rel="noopener">袁腾飞聊996：是兄弟就来加班？加你妹！</a>.</li>        <li><strong>23:59 Sleeping.</strong>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-13<a id="id190513m084031"></a></h2>  <div class="kwCloud">    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ Accessibility }</div>  </div>  <ol>    <li><strong>( excercise ) 在家健身的【兩樣神器】4天練全身:</strong> <a href="https://youtu.be/5PBEodvSVjU" target="_blank" rel="noopener">Link</a>. I just want to keep that muscle distribution figure.</li>    <li><strong>( Javascript ) { Object Destructuring } and { Array Destructuring }:</strong> <a href="https://youtu.be/Mus_vwhTCq0?t=195" target="_blank" rel="noopener">Link1</a>, <a href="https://stackoverflow.com/questions/33524696/es6-destructuring-and-module-imports#33524809" target="_blank" rel="noopener">link2</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">MDN</a>. See MDN.</li>    <li><strong>( Javascript ) { Spread syntax }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) { reduce() }, { map() }, and { filter() }:</strong> <a href="https://youtu.be/Mus_vwhTCq0?t=608" target="_blank" rel="noopener">Link</a>. <code>reducer = (accumulator, currentValue) =&gt; accumulator + currentValue;</code>.</li>    <li><strong>( Javascript ) Why doesn't .includes() work with .classList?:</strong> <a href="https://stackoverflow.com/questions/37566597/why-doesnt-includes-work-with-classlist" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Accessibility ) - Accessibility features in Firefox - Make Firefox and web content work for all users:</strong> <a href="https://support.mozilla.org/en-US/kb/accessibility-features-firefox-make-firefox-and-we#w_screen-reader" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Accessibility ) - An overview of accessible web applications and widgets:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Accessibility ) - w3c - Using ARIA:</strong> <a href="https://w3c.github.io/using-aria/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>08:30 Wake up.</strong></li>        <li><strong>08:40 Upload blog.</strong></li>        <li><strong>08:55 Bathroom.</strong> I put "上大號" to google translate and what it give me is "Upper size" ... ok, google translate ...</li>        <li><strong>09:05 Watching video:</strong> Useful and useless stuff.</li>        <li><strong>09:35 Learning Javascript:</strong> <code>Object Destructuring</code> and <code>Array Destructuring</code>.</li>        <li><strong>10:25 Misc, grocery.</strong></li>        <li><strong>11:00 Cooking, learning Javascript.</strong></li>        <li><strong>11:00 Eating, learning Javascript.</strong></li>        <li><strong>12:00 Brushing teeth.</strong></li>        <li><strong>12:10 Solving "sticky footer" problem:</strong> Solved in my sandbox, now I can apply this to <code>lahSale</code>.</li>        <li><strong>12:40 Watching video.</strong>: <a href="https://youtu.be/KMTBm-2j1AE" target="_blank" rel="noopener">Reasons twice sana deserves happiness and success</a></li>        <li><strong>13:00 { lahSale } ,, apply "sticky footer".</strong></li>        <li><strong>14:15 { lahSale } ,, change footer style.</strong></li>        <li><strong>15:15 Take a nap.</strong></li>        <li><strong>15:40 Watching video:</strong> <a href="https://youtu.be/whfYD4J_Nhs" target="_blank" rel="noopener">台灣基進 - 再見了！中國】中天為何變這樣？中國「宣傳工具」根本不是媒體？</a>.</li>        <li><strong>16:00 Understand { css grid} ,, { auto-fill or auto-fit }.</strong></li>        <li><strong>16:00 { lahSale } ,, change footer style.</strong></li>        <li><strong>19:00 Cooking and eating.</strong></li>        <li><strong>19:50 Brushing teeth.</strong></li>        <li><strong>20:00 Watching video.</strong></li>        <li><strong>20:30 Group chat with { Woody }.</strong></li>        <li><strong>21:20 Misc.</strong></li>        <li><strong>21:25 { lahSale } ,, change footer style.</strong></li>        <li><strong>21:55 Learning about { Aria } and accessibility:</strong> Confusing, can't find helpful information.</li>        <li><strong>22:35 Watching video:</strong> <a href="https://youtu.be/0g6rP-q2Pr4" target="_blank" rel="noopener">【一席】李一諾：比爾·蓋茨怎麼花錢</a>.</li>        <li><strong>22:50 Sleep:</strong> <a href="https://youtu.be/0g6rP-q2Pr4" target="_blank" rel="noopener">【一席】李一諾：比爾·蓋茨怎麼花錢</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-14<a id="id190514m083913"></a></h2>  <div class="kwCloud">    <div class="itm s2">Purpose of life</div>    <div class="itm s1">"High art" and "low art"?</div>    <div class="itm s2">Sensibility</div>    <div class="itm s2">Rationality</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ Vue ,, slot }</div>    <div class="itm s1">{ Accessibility }</div>  </div>  <li><strong>( Philosophy ) { udn.com } - 林斯諺／什麼是 "高級藝術"？什麼是 "低級藝術"？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3637898" target="_blank" rel="noopener">Link</a>. What is "High level art" and "low level art"? My conclusion - both <code>Sensibility</code> and <code>Rationality</code> are <strong>2 pillar of humanity and form the purpose of life</strong>, none is more important than other.</li>  <li><strong>( Philosophy ) { udn.com } - 廖育廷／要活出生命意義，是自己爽就好，還是有客觀標準？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3582749" target="_blank" rel="noopener">Link</a>. Is purpose of life is decide by totally personal satisfaction? Or by totally serving others?</li>  <li><strong>( Philosophy ) { udn.com } - 廖育廷／過程比結果重要？人生的意義在於過程？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3692120" target="_blank" rel="noopener">Link</a>.</li>  <li><strong>( Philosophy ) { udn.com } - 廖育廷／人生有沒有意義？還是充滿反面意義？ - 對社會負貢獻:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3652604" target="_blank" rel="noopener">Link</a>.</li>  <li><strong>( Documentary ) CBC Docs - After growing up in a violent family, a blind martial arts teacher finds independence | Night Strike:</strong>   <a href="https://youtu.be/zSt1LFEX12Q" target="_blank" rel="noopener">Link</a>.</li>  <li><strong>( 中美貿易戰 ) 北京600億報復 美再列3250億！ - 公共電視 - 有話好說:</strong> <a href="https://youtu.be/Geb8BrYWSmY" target="_blank" rel="noopener">Link</a>.</li>  <li><strong>( Vue ) { Slot }:</strong> <a href="https://vuejs.org/v2/guide/components-slots" target="_blank" rel="noopener">Link</a>. Including <code>named slots</code> and <code>scoped slots</code>.</li>  <li><strong>( Accessibility ) Some html attibutes:</strong>    <ol>      <li><strong>{ role }:</strong> <a href="https://www.w3.org/WAI/PF/HTML/wiki/RoleAttribute" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>{ aria-* }.</strong></li>      <li><strong>{ aria-label }:</strong> <a href="https://stackoverflow.com/questions/52584424/where-and-when-to-use-aria-label" target="_blank" rel="noopener">where and when to use aria-label?</a>. It mentions, when screen reader read that element (tag), only <code>aria-label</code> will be read, the text between that element (tag) will not be read.</li>    </ol>  </li>  <li><strong>( Documentary ) { CBC Docs } - This is Meagan Duhamel & Eric Radford’s last chance to win an Olympic gold - Beyond the Limits:</strong> <a href="https://youtu.be/ZTQh3MkOQtI" target="_blank" rel="noopener">Link</a>.</li>  <li><strong>( Philosophy ) { udn.com } - 林至浩／愛是什麼？愛是一種情感嗎？:</strong> <a href="https://opinion.udn.com/opinion/story/6685/3757103" target="_blank" rel="noopener">Link</a>.</li>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>07:40 Wake up.</strong></li>        <li><strong>07:45 Try to go exercising:</strong> I feel ache of my waist and lower back on the way to the lake. When I walk to lake and just having few steps, I was feeling I'm not going to do this because this might cause more injury. Then I walk back.</li>        <li><strong>08:15 Exercising at home:</strong> Mostly <code>Plank</code>. I want to focus on my <u>lower back</u> and <u>core muscles</u>.</li>        <li><strong>08 40 Upload blog.</strong></li>        <li><strong>09:00 Cooking, eating, reading:</strong> <a href="https://w3c.github.io/using-aria/#firstrule" target="_blank" rel="noopener">W3c - Using ARIA</a>.</li>        <li><strong>09:40 Brushing teeth.</strong></li>        <li><strong>09:50 Reading { Accessibility beginners guide }:</strong> <a href="https://www.deque.com/accessibility-beginners-guide/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>10:30 Taking a nap:</strong> Too sleepy, low efficiency. Still can't get good resources for understand just basic aria attribute. Might use <code>grep</code> to grep the source code with pattern <code>aria</code> to learn something later.</li>        <li><strong>10:03 Watching video.</strong></li>        <li><strong>10:07 Trying to do { aria } and { role }attributes.</strong></li>        <li><strong>11:25 Trying to testing how { base.scss } effect { bootstrap } styling:</strong> I make 2 different enviroments, before migrating <code>sale</code> and after migrating <code>sale</code>, and see how bootstrap works, when I add diffent elements, such as <code>nav</code>.</li>        <li><strong>12:00 Change Few icon font on { lahSale }.</strong></li>        <li><strong>12:50 Understand { slot } in { vue }.</strong></li>        <li><strong>13:25 Cooking.</strong></li>        <li><strong>13:58 Eating, watching video, brushing teeth.</strong></li>        <li><strong>14:35 Changing { message.vue } of { lahSale }.</strong></li>        <li><strong>15:35 Misc:</strong> Doing nothing.</li>        <li><strong>16:35 Reading book { Brave new world - revisited }:</strong> Long time no reading. I just make skimming on the rest of this book I have not finished yet. I found I get enough concept of <code>Brave new world</code> so I don't need to have too too detail reading.</li>        <li><strong>17:10 Grocery:</strong> I even buying drinks, long time no do this, I have totally no idea why I'm doing this.</li>        <li><strong>17:40 Casually roaming on web:</strong> Including watching videos, and reading articles.</li>        <li><strong>22:50 Reading book { The One Thing }:</strong> It has been a long time since last time I read this book.</li>        <li><strong>23:00 Watching video.</strong></li>        <li><strong>23:10 Exercising:</strong> Trainning lower back, <u>reverse plank</u>.</li>        <li><strong>23:15 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-15<a id="id190515m012915"></a></h2>  <div class="kwCloud">    <div class="itm s3">{ Stoicism }</div>    <div class="itm s1">Virtue</div>    <div class="itm s1">Understand what you can/can't controls</div>    <div class="itm s1">Understand what won't/will changes</div>    <div class="itm s1">Book</div>    <div class="itm s1">Exercising</div>  </div>  <ol>    <li><strong>( Philosophy ) { Stoicism } - { Pursuit of Wonder } - The Art of Not Caring:</strong> <a href="https://youtu.be/uLOB6hj3M_Q" target="_blank" rel="noopener">Link</a>. The main idea of <code>Stoicism</code> from this video is, we don't rely on external [ materials ]-[ content ] to make us gain happiness (substitute), because these thing can change all the time, they are not predictable, stable, eternal, our expectation go up and down if we rely on those external [ materials ]-[ content ]. In other words, Stoicism is about knowing what we can't control and what we can, the internal is what we can control, i.e. our mind, [ attitue ],[ angle ] when [ looking ],[ facing ] bad things. Stoicism is about don't rely on external [ materials ]-[ content ] to gain  happiness (substitute), by living stoic, we can be calm, peace, happiness without those temporary things, too.</li>    <li><strong>( Philosophy ) { Stoicism } as a philosophy for an ordinary life - Massimo Pigliucci - { TEDxAthens }:</strong>      <ol>        <li><strong>Link:</strong><a href="https://youtu.be/Yhn1Fe8cT0Q" target="_blank" rel="noopener"> Link</a>.</li>        <li><strong>Core 2 pillars of Stoicism:</strong> <strong>virtue</strong> (Ethics, courage, wisdom ...) and <strong>knowing what you can and you can't control</strong>.</li>        <li><strong>Famous [ people ]-[ model ]:</strong> Marcus Aurelius.</li>      </ol>    </li>    <li><strong>( Philosophy ) { Stoicism } - Marcus Aurelius - lecture by professor Michael Sugrue:</strong> <a href="https://youtu.be/5897dMWJiSM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong><del>( Philosophy ) { Stoicism } - Marcus Aurelius - How to Live A Good Life:</del></strong> <a href="https://youtu.be/Uma3d83TZJQ" target="_blank" rel="noopener">Link</a>. I think this video didn't sufficiently convey the core concept of <code>Stoic</code>. I think <strong>2 pillars</strong> of <code>Stoicism</code> is: <code>virtue</code> (ethics ; courage ; wisdom ...) and knowing what you can and you can't <code>control</code> (living in "now" ; <code>Stoic Optimism</code>, the concept of you don't care if the result is good or bad in the future, even you know it is bad and it will never be changed, you still be optimistic toward the current [ situation ]-[ difficulty ].). </li>    <li><strong>( Book ) { TED-Ed } - { Crime and Punishment } (罪與罰):</strong> <a href="https://youtu.be/Vtkv3-endYc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Book ) { Suzanne's Diary for Nicholas } (蘇珊日記):</strong> <a href="https://goods.ruten.com.tw/item/show?21504361295615" target="_blank" rel="noopener">Link</a>. --{ 其中有個非經常典的指引是：「想像人生是一場同時必須耍著五顆球的雜技，這五顆球分別為工作（work）、家庭（family）、健康（health）、朋友（friends），和尊嚴（spirit）。你必須讓這五顆球都保持在半空中不能掉下。但有一天，你會突然明白，工作這顆球是橡膠做的，掉到地上，它還是會彈起來，但是另外四顆球，家庭、健康、朋友、氣節 都是玻璃做的，任何一顆球掉了，就會破了一角、甚至粉碎，無法復原。一旦真正明白了這五顆球的啟示，就會學習去平衡你的生命。」 }--. // <a href="https://www.jianshu.com/p/2ec650ed1051" target="_blank" rel="noopener">蘇珊日記 書評，和劇情大綱</a>.</li>    <li><strong>( Video ) { Ruby Granger } - Productive and Aesthetic Study With Me / Study Day (with timestamps):</strong> <a href="https://youtu.be/CmJHQNYNEr8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( News ) Sudan protests and possible revolution:</strong> <a href="https://youtu.be/c4DsLetSS_Y?t=371" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Book ) Guns, Germs, and Steel:</strong> <a href="https://youtu.be/zsXcn398iuk" target="_blank" rel="noopener">Link</a>. I don't need to read this.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:25 Insomnia:</strong> Can't sleep, don't know why, maybe too excited.</li>        <li><strong>01:26 Update blog.</strong></li>        <li><strong>01:40 Watching video:</strong> <a href="https://youtu.be/UpREQLsVFRE" target="_blank" rel="noopener">台灣基進 - 中國資訊滲透戰 - 假新聞</a>, <a href="https://youtu.be/kOHB85vDuow" target="_blank" rel="noopener">TWICE "FANCY" M/V</a>.</li>        <li><strong>02:05 Reading book { The One Thing }.</strong></li>        <li><strong>02:45 Misc.</strong></li>        <li><strong>03:40 Go to bed again:</strong></li>        <li><strong>10:45 Wake up.</strong></li>        <li><strong>10:46 Prepare ingredients.</strong></li>        <li><strong>11:00 Exercising:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">{ FitnessBlender} - Brutal HIIT Ladder Workout - 20 Minute HIIT Workout at Home</a>, <code>face-up plank</code>, and <code>side plank</code>.</li>        <li><strong>11:30 Relax.</strong></li>        <li><strong>11:35 Cooking.</strong></li>        <li><strong>11:55 Watching video.</strong></li>        <li><strong>13:35 Reading book { The One Thing }.</strong></li>        <li><strong>14:50 Taking nap.</strong></li>        <li><strong>15:50 Watching video.</strong></li>        <li><strong>16:00 Taking shower.</strong></li>        <li><strong>16:30 Watching video.</strong></li>        <li><strong>16:55 Reading book { The One Thing }:</strong> --{ What is the "one thing" you can do such that by doing it everything else will be easier or unnecessary? Ask this question to every "ball" you handles - your spiritual life ; physical health ; personal life ; relationship ; job. }-- // --{ People do not decide their futures, they decide their habits and their habits decide their futures. }-- // --{ 3 layer of iceberg from bottom to top - purpose, priority, productivity. What you see (productivity) is determined by what you don't (priority and purpose) }--.</li>        <li><strong>18:25 Misc.</strong></li>        <li><strong>19:30 Cooking.</strong></li>        <li><strong>20:00 Watching video:</strong> Mostly about <code>Stoicism</code>.</li>        <li><strong>22:40 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-16<a id="id190516m082549"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s2">Wasting time</div>    <div class="itm s1">{ lahSale }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>06:45 Wake up.</strong></li>        <li><strong>06:55 Go exercising.</strong></li>        <li><strong>07:50 Take a shower.</strong></li>        <li><strong>08:15 Prepare ingredients.</strong></li>        <li><strong>08:25 Upload blog.</strong></li>        <li><strong>08:35 Cooking:</strong> Reading code update from <code>woody</code>.</li>        <li><strong>09:05 Eating:</strong> Reading code update from <code>woody</code>.</li>        <li><strong>09:25 Brushing teeth.</strong></li>        <li><strong>09:33 Bathroom.</strong></li>        <li><strong>09:47 { lahSale }:</strong> Re-define spacing (length) variables, little visual tweaking about spacing (length) related elements, desiging <u>message.vue</u> status code visual presentation.</li>        <li><strong>12:30 Learning how to use recursive { slots } in { vue }:</strong> Recursive <code>slots</code>, and passing <code>props</code> to child component which use <code>slots</code>.</li>        <li><strong>13:30 Take a nap.</strong></li>        <li><strong>14:00 Watching video:</strong> <a href="https://youtu.be/IEUa8Wy0gSQ?t=842" target="_blank" rel="noopener">館長做人很講信用</a>。</li>        <li><strong>14:30 Keep working on { lahSale } ,, { slot } part:</strong> In the end, <code>Woody</code> help me to insert the component into <code>slot</code>.</li>        <li><strong>18:00 Finished status code component.</strong></li>        <li><strong>18:01 Prepare ingredients.</strong></li>        <li><strong>18:15 Misc:</strong> Mostly wasting time.</li>        <li><strong>19:40 Eating, watching video:</strong> Mostly wasting time.</li>        <li><strong>22:00 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-17<a id="id190517m064905"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Stoicism }</div>    <div class="itm s1">Virtue</div>    <div class="itm s1">Peace, clam, current</div>    <div class="itm s2">Wasting time</div>    <div class="itm s2">Jump to higher "energy level"</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ MongoDB }</div>  </div>  <ol>    <li><strong>About I'm keep wasting time these days:</strong> Literally. I can't reach "energy level" high enough to learning an focusing on my main project now (my <code>CMS</code>). I keep wasting time for few days already, don't want to study neiter entertainment, I was stuck at the middle and doing nothing literally. // And later, I intended to take a deep "crouch" for a while, then try again to jump to "higher energy level" to see if I can penetrate the current situation, the "reluctance", then "painful" felling. It works, my focus back in just very short time, I can highly focus now and keep moving. // This happened everytime when I was switching from a old project to a new project.</li>    <li><strong>( Book ) Staring at the sun - Overcoming the terror of death - by Irvin D. Yalom:</strong> Found at <a href="https://udn.com/news/story/12674/2284505" target="_blank" rel="noopener">{ UDN } - 《凝視太陽》：過一個「克服死亡恐懼」的充實人生</a>. // <a href="http://booksdescr.org/item/index.php?md5=D0EB8D6F251B2205EA7231B3C0312C21" target="_blank" rel="noopener">Library Genesis</a>.</li>    <li><strong>( Philosophy ) Stoicism 101 - Massimo Pigliucci:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/seLLJP3H1FU" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>00:51 Questions to which you'll begin to find an answer by the end of this talk:</strong> <a href="https://youtu.be/seLLJP3H1FU?t=51" target="_blank" rel="noopener">Link</a>. Overview of this lecture.</li>        <li><strong>12:15 "Garden system" as metaphor:</strong> <a href="https://youtu.be/seLLJP3H1FU?t=735" target="_blank" rel="noopener">Link</a>. --{ The protective fense is the **logic**, the nuturing ground is the **physics**, the precious fruits is the **ethics** }--.</li>        <li><strong>21:21 Virture including these elements:</strong> <a href="https://youtu.be/seLLJP3H1FU?t=1281" target="_blank" rel="noopener">Link</a>. Wisdom, courage, justice, temperance.</li>        <li><strong>29:03 About knowing what you control and what you don't:</strong> <a href="https://youtu.be/seLLJP3H1FU?t=1743" target="_blank" rel="noopener">Link</a>. --{ One thing Epictetus keep saying is, never think everything you have is your stuff, think of it as is you borrowed from universe, so when you lose it, well, you didn't lose it because it wasn't yours, you just give it back to universe, you enjoy it for many decades and you were lucky to do so. }--, so basically, nothing will be eternal, nothing you can cotrol, except virtue, the only thing you can control and can keeps, when you look back before you die.</li>        <li><strong>34:00 The stoicism did not seek to supress emotion:</strong> <a href="https://youtu.be/seLLJP3H1FU?t=2044" target="_blank" rel="noopener">Link</a>. What stoicism thought is you need to transform the emotion. --{ ... they are clam because out of knowledge and out of cultivating positive emotions, not out of suppressing emotions. }--.</li>        <li><strong>36:39 Stoicism ,, spiritual [ practice ]-[ exercising ]:</strong> <a href="https://youtu.be/seLLJP3H1FU?t=2199" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Philosophy ) 我的6項「斯多葛提示」 - Stoicism 101:</strong> <a href="https://www.thenewslens.com/article/94895" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Twice } - one in a million:</strong> <a href="https://youtu.be/sSeoLKeGRkI" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Webdev ) { Traversy Media } - Learn the { MERN } Stack:</strong>      <ol>        <li><strong>Express API & MongoDB:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/5yTazHkDR4o?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>13:30 Create "Models" file and setting schema:</strong> <a href="https://youtu.be/5yTazHkDR4o?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=810" target="_blank" rel="noopener">Link</a>. Define fields of documents and schema?</li>            <li><strong>26:47 The completed "Models" file:</strong> <a href="https://youtu.be/5yTazHkDR4o?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=1607" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>Keyword:</strong> req.params.id, res.json(), res.status, Item.find(), Item.findById(), newItem.save(), item.remove().</li>          </ol>        </li>        <li><strong>Client Setup & Reactstrap:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/R54neaLznFA?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>01:27 { React } is inside { client } directory and has it's own { package.json }:</strong> <a href="https://youtu.be/R54neaLznFA?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=87" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>02:39 Use { proxy } instead of full url:</strong> <a href="https://youtu.be/R54neaLznFA?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=159" target="_blank" rel="noopener">Link</a>. Not quite understand this part.</li>            <li><strong>05:44 { npm start --prefix client }:</strong> <a href="https://youtu.be/R54neaLznFA?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=343" target="_blank" rel="noopener">Link</a>. This will make <code>npm</code> (back-end part), go into the <code>client</code> directory, then run <code>npm start</code>.</li>          </ol>        </li>        <li><strong>Prepare & Deploy:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/71wSzpLyW9k?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>04:39 Set front-end ,, { client/build }, as "static folder" inside back-end ,, index.js:</strong> <a href="https://youtu.be/71wSzpLyW9k?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=279" target="_blank" rel="noopener">Link</a>. Oh! This is how I deploy my front-end with back-end, so now I only need one server instead of 2 (front-end and back-end served on same server, same domain name, same port).</li>            <li><strong>06:26 { .path.resolve() }:</strong> <a href="https://youtu.be/71wSzpLyW9k?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&t=386" target="_blank" rel="noopener">Link</a>. Don't know the purpose yet.</li>          </ol>        </li>      </ol>    </li>    <li><strong>( Database ) The Problem with MongoDB - relationship, normalization, duplication, constraint:</strong> <a href="https://hackernoon.com/the-problem-with-mongodb-d255e897b4b" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Database ) Why You Should Never Use MongoDB?:</strong> <a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/" target="_blank" rel="noopener">Link</a>. Worth reading.</li>    <li><strong>( Database) MongoDB { JOIN } equivalence to SQL:</strong> <a href="https://www.w3schools.com/nodejs/nodejs_mongodb_join.asp" target="_blank" rel="noopener">Link</a>. <code>aggregate()</code> and <code>$lookup</code>.</li>    <li><strong>( Database ) { Traversy Media } - { MongoDB } in 30 minutes:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>16:47 Use { $set } to keep the rest properties of a document:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1007" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>18:10 Use { $inc } to do increment of a property:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1090" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>19:12 Use { $unset } to remove a property:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1152" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>20:06 { upsert: true } will insert a new document if it doesn't exists:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1206" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>21:35 { $rename } will change the property **name**:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1295" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>23:05 { .remove() } and { justOne: true }:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1385" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>25:17 { .find() } and { $or }:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1517" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>26:22 { .find() } and { $lt }:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1582" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>27:24 { .find() } and "deep search":</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1644" target="_blank" rel="noopener">Link</a>. Notice, you have to use a pair of quote ("") in some MongoDB client.</li>        <li><strong>28:17 { .find() } and search inside an array:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1697" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>28:35 { .sort() }:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1715" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>31:33 { .forEach(callback) } and { print() }:</strong> <a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8&t=1893" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Webdev ) { Traversy Media } - { MEAN } Stack - making authentication and login system:</strong> <a href="https://youtu.be/1ZeDy2QI3OE?list=PLillGF-RfqbZMNtaOXJQiDebNXjVapWPZ" target="_blank" rel="noopener">Link</a>. I only read a little. when I need to do authentication then I should lean the remain.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:40 Wake up:</strong> Should wake up at 06:20.</li>        <li><strong>06:50 Upload blog.</strong></li>        <li><strong>07:00 Watching video.</strong></li>        <li><strong>07:45 Reading articles:</strong> <a href="https://www.thenewslens.com/article/118065" target="_blank" rel="noopener">《天工，諸神，機械人》：追求永生不死的內在缺陷，就在凡人英雄神話裡</a> (not understanding).</li>        <li><strong>08:45 Eating, watching video.</strong></li>        <li><strong>09:20 Reading articles:</strong> <a href="https://www.thenewslens.com/article/95166" target="_blank" rel="noopener">別人眼中的缺點，卻是斯多噶哲學從一開始就吸引我的特質</a> (too far to me).</li>        <li><strong>09:30 Wasting time:</strong> Literally. I can't reach energy level hight enough to learning an focusing on my main project now. I keep wasting time for few days already.</li>        <li><strong>10:00 Take a nap.</strong></li>        <li><strong>10:37 Learning { Express.js }:</strong> Reach energy level hight enough, and stick with it. <a href="https://youtu.be/DQ9pZ2NKXRo?list=PLillGF-RfqbZMNtaOXJQiDebNXjVapWPZ" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>11:25 Buying drinks and junk foods.</strong></li>        <li><strong>11:37 Watching video { Stoicism 101 } and exercise (body):</strong> <a href="https://youtu.be/seLLJP3H1FU" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>14:35 Watching video ,, useless stuff:</strong> <a href="https://youtu.be/ng-QpUos0Ng?t=753" target="_blank" rel="noopener">{ She's Danni } - Weekly Vlog 41 - 學日語</a>.</li>        <li><strong>14:40 Watching article ,, Technical Details on the Recent Firefox Add-on Outage:</strong> <a href="https://hacks.mozilla.org/2019/05/technical-details-on-the-recent-firefox-add-on-outage/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may16-2019&utm_content=firefox" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>15:05 Learning { Express API & MongoDB }.</strong></li>        <li><strong>15:15 Brushing teeth.</strong></li>        <li><strong>15:25 Keep learning { Express API & MongoDB }.</strong></li>        <li><strong>15:29 Watching youtube:</strong> Distracting again.</li>        <li><strong>15:31 Keep learning { Express API & MongoDB }.</strong></li>        <li><strong>15:50 Bathroom.</strong></li>        <li><strong>15:56 Keep learning { Express API & MongoDB }.</strong></li>        <li><strong>16:30 Keep learning - { Traversy Media } - { MERN } stack - client setup.</strong></li>        <li><strong>17:10 Keep learning - { Traversy Media } - { MERN } stack - fast forwarding few videos.</strong></li>        <li><strong>17:35 Dancing with music.</strong></li>        <li><strong>17:50 Download multiple { Traversy Media } video at onece:</strong> Because it is more easy to fast forward through <code>vlc</code> player.</li>        <li><strong>17:55 Watching video:</strong> Mostly useless stuff, like <a href="https://youtu.be/nFt6qMvS-cY" target="_blank" rel="noopener">{ Twice } 1</a>, <a href="https://youtu.be/vsZ90lQm9oo" target="_blank" rel="noopener">{ Twice } 2</a>, <a href="https://youtu.be/DCVTXbk8IuE" target="_blank" rel="noopener">{ Twice } 3</a>.</li>        <li><strong>19:23 Keep learning - { Traversy Media } - { MERN } stack - fast forwarding few videos.</strong></li>        <li><strong>20:00 Looking London Underground map vs Taipei Metro map ,, color usage:</strong> Observing the Inforgraphic design.</li>        <li><strong>20:18 Keep learning - { Traversy Media } - { MERN } stack - fast forwarding few videos.</strong></li>        <li><strong>20:20 Brushing teeth.</strong></li>        <li><strong>20:30 Learning - { Traversy Media } - { MongoDB } in 30 minutes.</strong></li>        <li><strong>21:50 Searching with keyword "don't use mongodb":</strong> I will use it anyway, just finding some other viewpoint.</li>        <li><strong>22:30 Misc.</strong></li>        <li><strong>22:42 Watcing video:</strong> Useless stuff.</li>        <li><strong>23:20 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-18<a id="id190518m082938"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s2">{ 下交叉綜合症 (症候群) }</div>    <div class="itm s2">{ 臀肌 }</div>    <div class="itm s2">{ 髖屈肌 }</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ MongoDB }</div>    <div class="itm s1">{ Twice }</div>  </div>  <ol>    <li><strong>( Music ) { Twice } - one in a million:</strong> <a href="https://youtu.be/235vCNz2j_4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Health ) { 下交叉綜合症 (症候群) } - 骨盆前傾 - 需訓練 { 腹肌 } 和 { 臀肌 }:</strong> <a href="https://youtu.be/_DHZfERzzKY" target="_blank" rel="noopener">Link</a>. Very useful and clear illustration! 反而不是要訓練 { 下背 } 和 { 髖屈肌 }，因為 { 下背 } 和 { 髖屈肌 } 要多做 [ 拉伸 ]-[ 舒展 ]。</li>    <li><strong>( Health ) 骨盆前傾並不能說明是不自然的 (也許某些人天生就這樣):</strong> <a href="http://www.unclesam.cc/blog/is-your-anterior-pelvic-tilt-slowly-killing-you/" target="_blank" rel="noopener">Link</a>. --{ 有些理論往往會以「X 拉 Y 導致 Z（一般指疼痛）」，像是：「您坐太多，因此髖屈肌群會變緊繃，將骨盆拉往前傾的角度，導致腰椎前凸的幅度增加，帶來背部疼痛」，但在科學上站的住腳嗎？各種疼痛，從下背疼痛、腹股溝疼痛和髖關節疼痛都指責是「不起眼的骨盆前傾」所造成？ }--.</li>    <li><strong>( Health ) 如何解決骨盆前傾 - 訓練 { 臀肌 } 和 { 髖屈肌 } - 弓箭步 和 啞鈴:</strong> <a href="https://youtu.be/gYsXOKAfxTs?t=258" target="_blank" rel="noopener">Link</a>. 原來 { 臀肌 } 和 { 髖屈肌 } 是在前後對稱的位置上的，只是一個是在前，一個在後。</li>    <li><strong>( Health ) 弓箭步:</strong> <a href="https://kknews.cc/health/z6qp9kg.html" target="_blank" rel="noopener">Link1</a>, <a href="https://youtu.be/Qzp3_QMJ0kY" target="_blank" rel="noopener">link2</a>.</li>    <li><strong>( Health ) [ 髖屈肌 ],[ 骼腰肌 ] 拉伸，弓箭步:</strong> <a href="http://patrickfang216.pixnet.net/blog/post/196573145-%E4%BC%B8%E5%B1%95%E5%BC%B7%E5%8C%96------%E6%AD%A3%E7%A2%BA%E6%9C%89%E6%95%88%E7%9A%84%E9%AB%96%E5%B1%88%E8%82%8C%E4%BC%B8%E5%B1%95" target="_blank" rel="noopener">Link</a>. --{ 長期的坐式生活，有可能會有髖屈肌緊繃的問題，當然也有可能也有髖屈肌無力的問題 }--. 注意，弓箭步的目的是伸展髖部，不是伸展腰椎，不要讓脊椎弧度過大，這樣對伸展髖部反而沒有效果而且反而是加大脊椎弧度！</li>    <li><strong>( Health ) 停止伸展您的髖屈肌，強化它！:</strong> <a href="http://www.unclesam.cc/blog/stop-stretching-your-tight-hip-flexors/" target="_blank" rel="noopener">Link</a>. 標題應該改為 "如何訓練你的髖屈肌"。不過我的 [ 久坐 ]-{ 骨盆前傾 } 問題是要訓練 { 臀肌 }，而不是 { 髖屈肌 }。</li>    <li><strong>( Health ) ( Not as important as others ) 腰痠背痛老是治不好？醫師也在做的「鍛鍊保健法」擺脫下背痛！:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/VpmqG1JoYi0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>13:26 骨盆前傾:</strong> <a href="https://youtu.be/VpmqG1JoYi0?t=806" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>14:46 { 下交叉綜合症 (症候群) } - 骨盆前傾, 核心肌肉無力, 臀大肌無力 的示意圖 :</strong> <a href="https://youtu.be/VpmqG1JoYi0?t=886" target="_blank" rel="noopener">Link</a>. 所以多深蹲，多做 plank?</li>      </ol>    </li>    <li><strong>{ She's Danni } - 铛姐采访电影导演:</strong> <a href="https://youtu.be/CiCZpuegbwo" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Twice } - { Mina }:</strong> <a href="https://youtu.be/ojRK0WgsVPI" target="_blank" rel="noopener">Link1</a>, <a href="https://youtu.be/Rz1RUW8dXfs" target="_blank" rel="noopener">link2</a>.</li>    <li><strong>( Webdev ) ( Full stack ) { Traversy media } - Full Stack Vue.js, Express & MongoDB:</strong>      <ol>        <li><strong>About:</strong> This series is very quick but complete demonstrate about to set up the simple architecture from front-end to back-end to { MongoDB }. Useful ((only)) when you have no idea how to set up full stack in the first time.</li>        <li><strong>Part 1 - Express API:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/j55fHUJqtyw?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>04:00 Install dependency for this project:</strong> <a href="https://youtu.be/j55fHUJqtyw?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=240" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>16:16 Add { async } keyword before ES6 function:</strong> <a href="https://youtu.be/j55fHUJqtyw?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=976" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>22:40 { mongodb.ObjectID() }:</strong> <a href="https://youtu.be/j55fHUJqtyw?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=1360" target="_blank" rel="noopener">Link</a>.</li>          </ol>        </li>        <li><strong>Part 2 - Vue Frontend:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/X-JZ-QPApUs?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>12:08 Convention - { localhost/api/posts }:</strong> <a href="https://youtu.be/X-JZ-QPApUs?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=728" target="_blank" rel="noopener">Link</a>. Learn that convention, that is good practice, you design your api url like this, then under this (same) { api/posts }, you can have 4 methods - GET, POST, PUT, DELETE. Now everything is organized and easy to understand.</li>          </ol>        </li>        <li><strong>Part 3 - Prepare & Deploy:</strong>          <ol>            <li><strong>Link:</strong> <a href="https://youtu.be/W-b9KGwVECs?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>04:16 Setting { proxy } and { dist } directory:</strong> <a href="https://youtu.be/W-b9KGwVECs?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=256" target="_blank" rel="noopener">Link</a>.</li>            <li><strong>08:40 { Route } handling and { static directory } (static assets):</strong> <a href="https://youtu.be/W-b9KGwVECs?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=520" target="_blank" rel="noopener">Link</a>. Notice, the order of that <code>/.*/</code> matters, it can't be placed before <code>'/api/posts'</code> since it will be "adopted" first.</li>          </ol>        </li>      </ol>    </li>    <li><strong>( Database ) SQL to MongoDB mapping chart:</strong> <a href="https://docs.mongodb.com/manual/reference/sql-comparison/" target="_blank" rel="noopener">Link</a>. For example, somethign like <code>SELECT</code> is equivalence to <code>.find()</code>.</li>    <li><strong>( Database ) Install MongoDB on Debian (v3.2):</strong> <a href="https://docs.mongodb.com/v3.2/tutorial/install-mongodb-on-debian/" target="_blank" rel="noopener">Link</a>. There is 2 options, either install <u>MongoDB community version</u>, or <u>Debian own MongoDB packages</u>, I choose latter one since it is more brainless to install, but it is very outdated (released at 2015).</li>    <li><strong>By time:</strong>      <ol>        <li><strong>08:20 Wake up:</strong> Fall asleep a bit late last night.</li>        <li><strong>08:30 Upload blog, listen to music, misc.</strong></li>        <li><strong>08:55 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">{ FitnessBlender } - Brutal HIIT Ladder Workout - 20 Minute HIIT Workout at Home</a>, and <code>plank</code>.</li>        <li><strong>09:20 Watching video and taking shower:</strong> Video about 下背痛， related to { 下交叉綜合症 (症候群) }.</li>        <li><strong>10:10 Research about { 下交叉綜合症 (症候群) } and 骨盆前傾.</strong></li>        <li><strong>12:00 Grocery, cooking, eating.</strong></li>        <li><strong>13:10 Learning how to improve { 下交叉綜合症 (症候群) } and strengthen { 腹肌 } 和 { 臀肌 }:</strong> To solve [ 久坐 ]-{ 骨盆前傾 } problem. // These few hours of time spending totally worth it, understanding the concept of body structure, understand the source of specific body problem, understand where to correctly enforce the exercising, is pretty important for health and long run, much more important than studying other things first. This will pay off in the long run I believe.</li>        <li><strong>14:05 Watching video ,, mostly useless stuff:</strong> Finally finished the research. // "Useless" video such as { Twice } - { Mina }.</li>        <li><strong>15:15 Learning - { Traversy media } - Full Stack Vue.js, Express & MongoDB.</strong></li>        <li><strong>15:30 Misc:</strong> Distracted, doing other stuff.</li>        <li><strong>15:45 Keep learning - { Traversy media } - Full Stack Vue.js, Express & MongoDB.</strong></li>        <li><strong>17:30 Take a break, eating, watching video.</strong></li>        <li><strong>17:53 Reading article { Why You Should Never Use MongoDB }:</strong> Same article (<a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/" target="_blank" rel="noopener">lazy link</a>) as yesterday.</li>        <li><strong>19:07 Watching video:</strong> "Useless" stuff like <a href="https://youtu.be/oy7CV6CNFmc" target="_blank" rel="noopener">TZUYU TV "KimTZUYU"</a>.</li>        <li><strong>19:32 Setup { MongoDB }:</strong> Installing <code>MongoDB</code>.</li>        <li><strong>20:45 Practicing { MongoDB }:</strong> Through <u>MongoDB In 30 Minutes</u> (<a href="https://youtu.be/pWbMrx5rVBE?list=PLillGF-RfqbYeckUaD1z6nviTp31GLTH8" target="_blank" rel="noopener">lazy link</a>).</li>        <li><strong>22:10 Cooking, watchin video:</strong> <a href="https://youtu.be/V4e7UYoRqHw" target="_blank" rel="noopener">TWICE play STATUES and Sana's [TAXI] dance punishment</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-19<a id="id190519m091346"></a></h2>  <div class="kwCloud">    <div class="itm s1">Stay up late</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">Back-end</div>    <div class="itm s2">{ MVC } design pattern</div>    <div class="itm s1">{ Controller }</div>    <div class="itm s1">{ Routes }</div>    <div class="itm s1">{ Model }</div>    <div class="itm s1">{ Model }</div>    <div class="itm s1">{ REST API }</div>    <div class="itm s1">{ Express.js }</div>  </div>  <ol>    <li><strong>( Music ) { Twice } - one in a million - instrumental:</strong>      <ol>        <li><strong>Version TJ Karaoke:</strong> <a href="https://youtu.be/YkyXOLXVls0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Unknown version:</strong> <a href="https://youtu.be/ZlmLIdeTbeU" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Twice ) ( Jyp ) Maknae line and Jyp singing shy,shy,shy part:</strong> <a href="https://youtu.be/pwp0FyiLmx4" target="_blank" rel="noopener">Link</a>. What a father with soft heart!</li>    <li><strong>{ 館長 } 苦苓今天打電話來! 館長想說算了，但律師心疼館長堅持走法律途徑。 館長:請問大家我該怎麼辦?:</strong> <a href="https://youtu.be/URp6s-znHgw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Back-end ) ( MVC design pattern ) { MDN } - { controller },{ model },{ route }:</strong> <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes" target="_blank" rel="noopener">MDN - Express 教學 4: 路由與控制器</a>. Very helpful demostration of { controller },{ model } (of { MVC } pattern) and other things.</li>    <li><strong>( Back-end ) ( MVC design pattern ) { Model } - Model per database table is bad idea?:</strong> <a href="https://softwareengineering.stackexchange.com/questions/139438/models-per-database-table" target="_blank" rel="noopener">Link</a>. --{ ... It is known as a anemic model and considered an anti-pattern ... If you restrict your models to a single table, where do you put the code (behaviour) that needs to deal with data and behaviour from multiple tables? }--, --{ In general you should create your models not per table or per controller but per business object. Sometimes it maybe a 1:1 relationship with your tables structure or with your controllers, but not necessary. }--, --{ ... you will want to create your models per business object - the problems that the business is trying to solve should drive how you create the model classes. }--.</li>    <li><strong>( Express.js ) Redirect a { route }:</strong> <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes#%E6%9B%B4%E6%96%B0_index_%E8%B7%AF%E7%94%B1%E6%A8%A1%E7%B5%84" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Why we don't define methods inside { constructor function }?:</strong> <a href="https://pjchender.blogspot.com/2016/06/javascriptfunction-constructorprototype.html" target="_blank" rel="noopener">Link1</a>, <a href="https://www.thecodeship.com/web-development/methods-within-constructor-vs-prototype-in-javascript/" target="_blank" rel="noopener">Methods within Constructor vs Prototype in javascript</a>. This article claims, we should use <code>Person.prototype.getFullName = function (...) {...};</code> (outside <code>constructor function</code>), instead of <code>this.getFullName = function (...) {...}</code> (directly inside <code>constructor function</code>), this is because this cost less memory usage. <strong>But</strong> I don't care, putting 2 things in different places looks more sloppy and error prone, I will not adapt that prototype practice. If necessary, I will even use <strong><code>Class</code></strong> (syntax sugar) or <code>TypeScript</code> totally.</li>    <li><strong>( Http ) REST API basic - { Traversy Media }:</strong> <a href="https://youtu.be/Q-BpqyOT3a8?t=467" target="_blank" rel="noopener">07:47 Endpoints and request methods</a>, <a href="https://youtu.be/Q-BpqyOT3a8?t=587" target="_blank" rel="noopener">09:47 common Authentication practice</a>.</li>    <li><strong>( Back-end ) Good practice of naming route rules:</strong> <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes#%E6%9C%AC%E5%9C%B0%E5%9C%96%E6%9B%B8%E9%A4%A8%E9%9C%80%E8%A6%81%E7%9A%84%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">Link</a>. This is also related to <code>REST API</code>. // This is also related to <code>model</code> (of database [ table ]-[ collections ]).</li>    <li><strong>( Express.js ) Use "virtual prefix" for your static URLs, rather than having the files added to the base URL:</strong> <a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction#Serving_static_files" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:20 Sleep:</strong> Stay up late again, bad habbit. Mostly watching video about { Twice }.</li>        <li><strong>09:15 Wake up.</strong></li>        <li><strong>09:20 Upload blog.</strong></li>        <li><strong>09:25 Bathroom.</strong></li>        <li><strong>09:30 Upload blog.</strong></li>        <li><strong>09:40 Listen to music:</strong> Mostly { Twice }.</li>        <li><strong>10:05 Eating, watching video.</strong></li>        <li><strong>10:35 Practicing - { Traversy media } - Full Stack Vue.js, Express & MongoDB:</strong> As same as yesterday.</li>        <li><strong>10:55 Brushing teeth.</strong></li>        <li><strong>11:05 Thinking about { back-end } config good practice:</strong> As well as learning javascript <code>Constructor Function</code>.</li>        <li><strong>12:20 Practicing - { Traversy media } - Full Stack Vue.js, Express & MongoDB:</strong> <a href="https://youtu.be/L72fhGm1tfE?t=2620" target="_blank" rel="noopener">Loading extra body parser feature for { express }</a>, you don't need to use { app.use(require('bodyParser').json()) } anymore.</li>        <li><strong>13:15 Listening to music and dancing:</strong> <a href="https://youtu.be/235vCNz2j_4" target="_blank" rel="noopener">TWICE - one in a million</a>.</li>        <li><strong>13:32 Understand { mongoose }-{ ODM }:</strong> From <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Server-side/Express_Nodejs/mongoose" target="_blank" rel="noopener">MDN - Express 教學 3: 使用資料庫 ( Mongoose)</a> </li>        <li><strong>14:05 Found keyword { controller }:</strong> At <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes" target="_blank" rel="noopener">MDN - Express 教學 4: 路由與控制器</a>. Very important concept, one pillar of { MVC } pattern, I don't very clearly understand { controller } before, this is good chance to learn it.</li>        <li><strong>14:15 Take a nap.</strong>.</li>        <li><strong>14:50 Go buy drinks.</strong>.</li>        <li><strong>15:10 Watching video:</strong> Mostly realated to <code>Twice</code>. <a href="https://youtu.be/k5JM4w7KaBo?t=266" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>16:15 Read articles about { mongoose }:</strong> Conclusion - So after reading some articles and some suggestions, I choose not to use Mongoose, the main reason is learning Mongoose need more time, also it need constant time to review and remember it, when my project is small and don't need complex database model, it don't worth it, I don't have time to learn and maintain new thing. I decide to build validation myself, it will be more plain stupid but also easier to understand, especially for maintenance.</li>        <li><strong>17:00 Dancing with music.</strong> </li>        <li><strong>17:20 Reading article related to { controller }.</strong></li>        <li><strong>18:30 Reading article related to { model },{ business object },{ database table }.</strong></li>        <li><strong>19:30 Cooking, eating, understading { REST API } basics.</strong></li>        <li><strong>20:30 Watching video:</strong> Mostly realated to <code>Twice</code>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-20<a id="id190520m100447"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ JYP Entertainment}</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ MVC } design pattern</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ Mongoose }</div>  </div>  <ol>    <li><strong>( Kpop ) Park Jin Young, Living as a musician rather than Chairman:</strong> <a href="https://youtu.be/iGb9iem-4B0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Kpop ) JYP, Is there a company that spends 2 billion dollars on meals?:</strong> <a href="https://youtu.be/p9vDvx7SIeE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Kpop ) JYP ,, The 3 Most Important Things JYP Looks For In His Artists, And They’re Not Talent:</strong> <a href="https://www.koreaboo.com/news/3-important-things-jyp-looks-artists-theyre-not-talent/" target="_blank" rel="noopener">Link</a>. 1. Honesty. 2. Sincerity. 3. Humility</li>    <li><strong>( Kpop ) JYP 本人 談 JYP 2.0，公司組織架構異動，管理方式異動:</strong> <a href="https://youtu.be/8yqO4hDGRF4?t=434" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Kpop ) 當TWICE與JYP一起直播時 綜藝魂大爆發:</strong> <a href="https://youtu.be/7mMdrNFs2Po" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Express.js ) Module Scope:</strong> <a href="https://stackoverflow.com/questions/15406062/in-what-scope-are-module-variables-stored-in-node-js" target="_blank" rel="noopener">Link</a>. Ok, so use <code>var</code> instead of <code>let</code> is totally fine, since each module in <code>Express.js</code> are isolated in Scope with each other.</li>    <li><strong>( MVC design pattern ) What is the model lifetime in MVC application?:</strong> <a href="https://stackoverflow.com/questions/27442835/maintain-the-model-lifetime-in-mvc-application" target="_blank" rel="noopener">Link</a>. I'm not sure ... .</li>    <li><strong>By time:</strong>      <ol>        <li><strong>01:40 Sleep:</strong> Stay up late again, bad habbit. Mostly watching video about { Twice }.</li>        <li><strong>09:50 Wake up.</strong></li>        <li><strong>10:00 Upload blog.</strong></li>        <li><strong>10:25 Watching video, cooking, eating:</strong> Mostly about <code>JYP entertainment</code>.</li>        <li><strong>12:15 Figure out how to connect to { MongoDB } in { Express.js }:</strong> Thinking about should I use <code>Mongoose</code> again.</li>        <li><strong>12:35 Learning about { ORM }:</strong> <a href="https://en.wikipedia.org/wiki/Object-relational_mapping" target="_blank" rel="noopener">{ ORM }</a>.</li>        <li><strong>12:49 Decide to use { Mongoose } again:</strong> Only because of rich resources (documnent, tutorials ...), community support.</li>        <li><strong>12:55 Take a nap.</strong></li>        <li><strong>12:27 Wake up, watching video.</strong></li>        <li><strong>12:35 Learning { Mongoose }.</strong></li>        <li><strong>14:15 Grocery, laundry, learning { Mongoose }.</strong></li>        <li><strong>15:27 Eating fruit, listening music, dance, brushing teeth.</strong></li>        <li><strong>15:47 Finding source of problem why Mongodb data don't persist, but vanish after leaving shell:</strong> Err ... I thought <code>db</code> will show all database, and I thought previous database and collections were missing. I have to use <code>show dbs</code> instead.</li>        <li><strong>16:15 Learning { Mongoose }.</strong></li>        <li><strong>17:40 Thinking about { MVC } [ class ]-[ instance ] lifespan problem.</strong></li>        <li><strong>19:20 Cooking, learn { MVC } by doing and practicing.</strong></li>        <li><strong>19:50 Eating, watching video.</strong></li>        <li><strong>22:20 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-21<a id="id190521m065645"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ Node.js } module</div>    <div class="itm s1">{ Node.js } ,, error handling</div>  </div>  <ol>    <li><strong>{ 看电影了没 } - 为什么我们害怕衰老？戛纳金棕榈 { 爱 }:</strong> <a href="https://youtu.be/BvnnMPNmfSY" target="_blank" rel="noopener">Link</a>. 美好的事情不會長久，這才是自然的常態。</li>    <li><strong>( 柯文哲 ) 20190517 雜學青講堂 - [ 非認知能力 ],[ 理解到失敗是生命中的一部分 ]:</strong> <a href="https://youtu.be/_nj0V_ncO4k?t=279" target="_blank" rel="noopener">Timeline 1</a>, <a href="https://youtu.be/_nj0V_ncO4k?t=830" target="_blank" rel="noopener">timeline 2</a>. 美好的事情不會長久，這才是自然的常態。</li>    <li><strong>Promotion Clip - J.Y. Park - hammer dance:</strong> <a href="https://youtu.be/um6lpRb3_uI" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Node.js ) Are Node.js modules singletons? - "Module Caching":</strong> <a href="https://medium.com/@lazlojuly/are-node-js-modules-singletons-764ae97519af" target="_blank" rel="noopener">Link</a>. By this article, I learned <strong>Module Caching</strong> - an important concept of how node.js modules behaive, see <u>Module Caching</u> section of the link, --{ Every call to require(‘foo’) will get exactly the same object returned, if it would resolve to the same file. }--. // This article also talks about "Circular module dependency", "Module Caching" will works as long as the version is the same.</li>    <li><strong>( Node.js ) Circular module dependency:</strong> <a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="noopener">Link</a> ,, section "Circular module dependency".</li>    <li><strong>( Node.js ) Does { require() } and { module.exports } with different [ position ]-[ order ] affects the results?:</strong> <a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="noopener">Link</a> ,, section "Circular module dependency". Yes, node.js make it works <strong>synchronous, not asynchronous</strong>, so if you put some code after <code>module.exports</code>, it will works later.</li>    <li><strong>( Node.js ) { ES6 },{ node.js } are loaded Synchronously or Asynchronously?:</strong>      <ol>        <li><strong>{ ES6 },{ node.js } modules and  are loaded Synchronously or Asynchronously?:</strong> <a href="https://stackoverflow.com/questions/31807799/es6-modules-are-loaded-synchronously-or-asynchronously" target="_blank" rel="noopener">Link</a>. --{ ES6 module loaders will be asynchronous while node.js module loaders are synchronous. }--.</li>        <li><strong>Freecodecamp - exports, module.exports, and synchronous loading of modules:</strong> <a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="noopener">Link</a>. --{ We cannot change the exports object asynchronously. We can’t, for example, do the following in any module ... }--.</li>        <li><strong>You can not delay { module.exports } in node.js:</strong> <a href="https://stackoverflow.com/questions/20315434/node-js-asynchronous-module-loading" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Node.js ) Export Module in Node.js:</strong> <a href="https://www.tutorialsteacher.com/nodejs/nodejs-module-exports" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Node.js ) 從資料夾載入modules:</strong> <a href="https://ithelp.ithome.com.tw/articles/10185083" target="_blank" rel="noopener">Link</a>, see last section.</li>    <li><strong>( Express.js ) All about middleware:</strong> <a href="https://expressjs.com/zh-tw/guide/using-middleware.html" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Http ) What header and body content you should put for { 201 } response?:</strong> <a href="https://stackoverflow.com/a/36373586/10607630" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Express.js ) User defined error handling callback function:</strong> <a href="https://medium.com/@sj82516/express-%E8%88%87-koa-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E9%8C%AF%E8%AA%A4-3d75fff604c8" target="_blank" rel="noopener">Link1</a>, <a href="https://codereview.stackexchange.com/questions/166654/node-js-error-handling-using-merely-if-else-without-try-catch" target="_blank" rel="noopener">link2</a>.</li>    <li><strong>The 80/20 Guide to Express Error Handling:</strong> <a href="https://thecodebarbarian.com/80-20-guide-to-express-error-handling" target="_blank" rel="noopener">Link</a>. Conclusion ,, I haven't fully read the article, but the most easy way to do [ error handling ]-[ error handler ] is, define a special middleware with 4 arguments, and put it at the end of index.js, and all error will come to here, like <code>app.use(function(error, req, res, next) { ... });</code>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:50 Wake up.</strong></li>        <li><strong>07:05 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">{ FitnessBlender } - Brutal HIIT Ladder Workout - 20 Minute HIIT Workout at Home</a>, and <code>plank</code>.</li>        <li><strong>07:30 Taking  break:</strong></li>        <li><strong>07:40 Upload blog.</strong></li>        <li><strong>07:45 Learn { MVC } by doing and practicing.</strong></li>        <li><strong>08:40 Finally I can fetch data from { Mongoose }!:</strong> After having long trial-and-error (from yesterday), I finally figure out right architecture and right syntax to fetch the real data from <code>mongodb</code> through <code>mongoose</code> <code>ODM</code>. THe progress is so slow because it use different (and a bit complex) system (object things) to accomplish the interaction with DB, and the syntax is specific to <code>mongoose</code> only. But the biggest reason is, I don't find a suitable [ resources ]-[ tutorial ] to lead me, I only use <code>Traversy Media</code> video and few other blogs, and reading a little official doc of <code>mongoose</code>. This waste a lot of time since having good resources will save a lot of time wasting and more efficient.</li>        <li><strong>08:53 Cooking, eating.</strong></li>        <li><strong>10:35 Testing and understanding { node.js } ,, { module.exports }:</strong> To my surprise, <code>require()</code> same module module A, in 2 other different module module B, C, will causing B and C using same reference of A.</li>        <li><strong>10:50 Understanding { node.js } ,, { module }:</strong> Module Caching.</li>        <li><strong>11:35 Watching video:</strong> Sleepy. <a href="https://youtu.be/0huSBaQPcDE" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>12:00 Understanding { node.js } ,, { module }:</strong> Module Caching things and Circular Dependency.</li>        <li><strong>13:00 Take a nap.</strong></li>        <li><strong>13:30 Wake up, watching video.</strong></li>        <li><strong>13:55 Understanding { node.js } ,, { module } ,, synchronous loading.</strong></li>        <li><strong>15:00 Solved architecture problem:</strong> My { Node.js }-{ MVC }-{ practing code }, will put { controller } and { model } into individual { node module }, and { model } will be instantiate once when someone { require() } it, the second { require() } will get same instance reference but not a new instance, so { mongoose } will not complain. In other words, { model } ,, lifespan, is infinite and as same as node.js, while { controller } ,, lifespan, is as long as one request cycle.</li>        <li><strong>15:50 Cooking, eating, watching video.</strong></li>        <li><strong>17:25 keep doing { Node.js }-{ MVC }-{ practing code }.</strong></li>        <li><strong>17:35 Bathroom.</strong></li>        <li><strong>17:50 keep doing { Node.js }-{ MVC }-{ practing code }.</strong></li>        <li><strong>19:10 Eating fruit, watching video.</strong></li>        <li><strong>19:40 { Express.js } ,, dealing with error handling.</strong></li>        <li><strong>21:30 { Express.js } ,, my error handling working now.</strong></li>        <li><strong>21:31 Cooking, eating, watching video.</strong></li>        <li><strong>22:55 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-22<a id="id190522m071152"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ REST API }</div>    <div class="itm s2">{ HTTP status code }</div>    <div class="itm s1">{ Mongoose }</div>    <div class="itm s1">{ Idempotent }</div>    <div class="itm s1">{ Express.js }</div>  </div>  <ol>    <li><strong>( Music ) Thomas Bergersen - Colors of Love - Sun:</strong> <a href="https://youtu.be/ZuGiwDQEvDc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Youtube channel ) MoMo JJang 모모짱:</strong> <a href="https://www.youtube.com/channel/UCff834xOWp8EdgR_duzEH6w/videos" target="_blank" rel="noopener">Link</a>. It's not keep updating.</li>    <li><strong>( Twice ) Sana Cute & Silliness - Twice in Switzerland:</strong> <a href="https://youtu.be/cNFgefitL_M" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Twice ) Sixteen EP1 - Sana performance cut:</strong> <a href="https://youtu.be/q6mTeOZm8kE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Twice ) Twice Evil Maknae Chou Tzu:</strong> <a href="https://youtu.be/jjP9cpbXIYI" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Mongoose ) Model.save():</strong> <a href="https://mongoosejs.com/docs/populate.html#saving-refs" target="_blank" rel="noopener">Link</a>,, section "Saving refs". This link itself is not important, I just want to note down the example of putting callback function and another inner <code>.save()</code> inside outer <code>.save()</code>.</li>    <li><strong>( Http ) What is the proper REST response code for a valid request but an empty data? - 404 vs 204?:</strong> <a href="https://stackoverflow.com/questions/11746894/what-is-the-proper-rest-response-code-for-a-valid-request-but-an-empty-data" target="_blank" rel="noopener">Link1</a>, <a href="https://stackoverflow.com/questions/34312023/http-get-request-status-204-vs-404" target="_blank" rel="noopener">link2</a>. My conclusion - <strong>I will use 404</strong>, 2 biggest reason is 1. This seems to more obey to the <a href="https://www.restapitutorial.com/httpstatuscodes.html" target="_blank" rel="noopener">standard</a>. 2. With 404, you can put response body, but with 204 you can't, you have to use 200 instead.</li>    <li><strong>( Http ) HTTP status code for update and delete?:</strong> <a href="https://stackoverflow.com/questions/2342579/http-status-code-for-update-and-delete" target="_blank" rel="noopener">Link</a>. So both 200, 204, 202 is acceptable, I prefer 200 more and put extra information in response body ,, json.</li>    <li><strong>Idempotent methods vs safe methods:</strong> <a href="http://restcookbook.com/HTTP%20Methods/idempotency/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:00 Wake up.</strong></li>        <li><strong>07:10 Upload blog.</strong></li>        <li><strong>07:25 Watching video.</strong></li>        <li><strong>08:00 Watching video.</strong></li>        <li><strong>08:33 Cooking, take deeper leaning with { mongoose }:</strong> What I did in last 2 days, when I was learning { mongoose }, is by taking shortcut, , watching video, frequently googleing, trail-and-error myself, but for this case (learning { mongoose }), it is less efficient, than learning it <strong>systematically</strong> (like reading book, docs), since it is a bit like big knowledge system, and coupled together, I can't learn it piece by piece. Now I'm going to read the official docs.</li>        <li><strong>09:00 eating, reading { mongoose } Docs, brushing teeth.</strong></li>        <li><strong>09:30 Take deeper leaning with { mongoose }.</strong></li>        <li><strong>10:15 { Mongoose } ,, figure out (seraching) how to "find then delete".</strong></li>        <li><strong>10:50 Watching video:</strong> Sleepy.</li>        <li><strong>12:00 { Mongoose } ,, figure out the { signature } of { callback } function that passed into those CRUD operation methods.</strong></li>        <li><strong>12:18 Eating fruit, watching video:</strong> Sleepy.</li>        <li><strong>12:30 { Mongoose } ,, figure out the { signature } of { callback } function that passed into those CRUD operation methods.</strong></li>        <li><strong>14:10 Found { res.send() },{ next() },{ resolve() },{ reject() } don't { return }:</strong> Found { Express.js } ,, { res.send() },{ next() }, and { Promise } ,, { resolve() },{ reject() }, they all don't <strong><code>return</code></strong> immediately after executed, so I have to put a <code>return</code> behind them to make sure places using these method will interrupted properly.</li>        <li><strong>14:15 Testing if back-end and database handles async, resolve, and reject correctly.</strong></li>        <li><strong>14:35 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">{ FitnessBlender } - Brutal HIIT Ladder Workout - 20 Minute HIIT Workout at Home</a> and <code>plank</code>.</li>        <li><strong>15:05 Taking shower.</strong></li>        <li><strong>15:35 Watching video.</strong></li>        <li><strong>15:55 Learning about right { HTTP status code }:</strong> Use 404 or 204 if a resources (like post id) is not found?</li>        <li><strong>17:05 Keep doing back-end ,, { CRUD }:</strong> Update and Delete part of Mongoose.</li>        <li><strong>17:18 Cooking.</strong></li>        <li><strong>17:43 Eating, watching video.</strong></li>        <li><strong>19:40 Keep doing back-end ,, { CRUD }:</strong> Update and Delete part of Mongoose.</li>        <li><strong>20:45 Understand { idempotent } in { HTTP method }.</strong></li>        <li><strong>21:10 Keep doing back-end ,, { CRUD }:</strong> Update and Delete part of Mongoose.</li>        <li><strong>21:40 { CRUD } ,, Delete, finished:</strong> Finished [ testing code ]-{ Mongoose }-{ CRUD } ,, { Create },{ Read },{ Delete } methods, now still remain { Update } part.</li>        <li><strong>21:45 Search for "rest api use query string or not":</strong> <a href="https://stackoverflow.com/questions/3821663/querystring-in-rest-resource-url" target="_blank" rel="noopener">Querystring in REST Resource url</a>. My conclusion - I will stick with <u>query string</u>, since url standard might be changed at any time, and if it changes, it breaks a lots of things, that is what I don't like.</li>        <li><strong>21:50 Misc.</strong></li>        <li><strong>22:03 Watching video.</strong></li>        <li><strong>22:43 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-23<a id="id190523m071357"></a></h2>  <div class="kwCloud">    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ Function arguments signature } good practice</div>    <div class="itm s1">{ Async function }</div>    <div class="itm s1">{ try ... catch block }</div>    <div class="itm s1">{ Mongoose }</div>  </div>  <ol>    <li><strong>( Music ) { Twice } - Sleep tight good night - 20171206 - live:</strong> <a href="https://youtu.be/M4pk0Wx372w" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ TWICE } - Ordering Ice Cream in English in Switzerland:</strong> <a href="https://youtu.be/SvCnzggdfMY" target="_blank" rel="noopener">Link</a>. Beautiful moments always not last long, this is how natrual works.</li>    <li><strong>( Music ) ( Dance ) ( JYP ) Honey - 20160415:</strong> <a href="https://youtu.be/71ysxeDU-Qc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Twice ) { Ohh-ahh } live singing:</strong> <a href="https://youtu.be/F5ZnKIHuKzU" target="_blank" rel="noopener">Link1</a> <a href="https://youtu.be/rS9rUesZSTY" target="_blank" rel="noopener">link2</a>.</li>    <li><strong>( Javascript ) { async function } ,, deal with { reject } with { try ... catch } block:</strong> <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/await#%E7%AF%84%E4%BE%8B" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ try ... catch block } can be looped ; async function:</strong><br>      <ol>        <li><strong>{ try ... catch block } can be looped:</strong> See <a href="https://github.com/Microsoft/TypeScript/issues/9595#issuecomment-231564390" target="_blank" rel="noopener">link</a>, I'm not sure how to describe this, but looking at this code, the { try ... catch block } is nested inside { for } loop, and guess what? This iteration will loop more than once! So I misunderstood how { try ... catch block } works, I thought if logic flow goes inside { catch } block, it will automatically jump to more even outer another { try ... catch block } somewhere, but this is not true, it will keep flowing like normal flow [ after ]-[ below ] first { catch } block. Unless you put { throw ... } in the inner { catch } block, the code flow will not jump to outer { try ... catch block }!.</li>        <li><strong>{ Await } keyword and { reject }:</strong> Also, until now I realize, you have to always put { try ... catch block } <strong>outside the { await }</strong>, because when { await } get { reject } (instead of { resolve }), the logic flow will jumpt directly to that { try ... catch block }, and if you don't have { try ... catch block } in that function, the { exception } will keep "bubble up" to parents function to try to "be catched", it still not, it will be "naked" in global scoped and causing error.</li>        <li><strong>How to throw an { reject } in an { async function }:</strong> Since async function will handle Promise in the background, you don't need to find way to "return a reject", but you use the most traditional way - throw an exception - just use { throw ... } and it will create a Promise { reject } in the background (for example it will pass it to the parent function ,, the { await } location).</li>      </ol>    </li>    <li><strong>( Webdev ) { Sitepoint } - A Beginner’s Guide to Webpack:</strong> <a href="https://www.sitepoint.com/webpack-beginner-guide/" target="_blank" rel="noopener">Link</a>. Very quality, easy to grasp, story like, deep enough, article for beginners like me! Very good. If you want to Webpack from basic, follow the steps and download that practicing code from github, and build the bundle from testing source code yourself.</li>    <li><strong>HTTP status code after successfully POST? - 201 vs 303?:</strong> <a href="https://www.blackpepper.co.uk/blog/201-created-or-post-redirect-get" target="_blank" rel="noopener">Link</a>. Use <strong>201</strong>, but append "Refresh" in header, so client will still know to refresh. Because though POST-Redirect-GET (PRG) is good [ pattern ]-[ solution ], it is not fit in RESTful. So the balanced solution is use 201, but add "Refresh" in header.</li>    <li><strong>{ PTSTalk 公視 } - 拔除大腦 ARM致命一擊！華為慘遭KO:</strong> <a href="https://youtu.be/fr5kBN0mf3c" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:10 Wake up:</strong> Over sleep for 20 minutes, should wake up at around 06:50. Feel sleepy.</li>        <li><strong>07:15 Upload blog.</strong></li>        <li><strong>07:30 Preparing ingredients.</strong></li>        <li><strong>07:35 Keep doing [ testing code ]-{ Mongoose }-{ CRUD } ,, { Update }.</strong></li>        <li><strong>08:10 Finished [ testing code ]-{ Mongoose }-{ CRUD } ,, all methods (4).</strong></li>        <li><strong>08:11 Cooking.</strong></li>        <li><strong>08:45 Eating, keep doing [ testing code ].</strong></li>        <li><strong>09:05 Learning { Mongoose }.</strong></li>        <li><strong>09:25 Found some answer is not possible to be "Googled", but have to understand systematically:</strong> This is an example, when I try to understand the { Mongodb } returned value (for example after updating), I get { ok: 1, nModified: 1, n: 1 }. But since I don't know what those { fields } mean, I kept trying many times to google it with different kind of keyword like "mongodb 'ok' field update". And to one point I realizing this not going to work, I just can't find any useful information except <a href="https://groups.google.com/forum/#!topic/mongodb-dev/ZdM1ib306dg" target="_blank" rel="noopener">some scatterd one</a>. Then I tried another approach, I found the answer is in the [ manual ]-[ docs ] ,, <a href="https://docs.mongodb.com/manual/reference/command/update/" target="_blank" rel="noopener">command update</a> ,, --{ The returned document shows that the command found and updated a single document. See <a href="https://docs.mongodb.com/manual/reference/command/update/#update-command-output" target="_blank" rel="noopener">Output</a> for details. }--.</li>        <li><strong>09:35 Brushing teeth.</strong></li>        <li><strong>09:45 Watching video.</strong></li>        <li><strong>10:30 Take a nap:</strong> Sleepy.</li>        <li><strong>10:50 Watching video.</strong></li>        <li><strong>11:03 Understanding { Mongoose } return value ,, field ,, { ok },{ n },{ nModified }:</strong> { Mongoose } API DOCS is not completed, I always can't find the whole story, for example there is no <a href="https://github.com/Automattic/mongoose/issues/1702" target="_blank" rel="noopener">options</a> documented anywhere, this is why I spend [ so much times ]-[ few days ] just on trial-and-error, this should not happens if DOCS is complete enough.</li>        <li><strong>12:30 Learning javascript function arguments signature best practice, and object Destructuring on function arguments.</strong>.</li>        <li><strong>13:35 Reading article { A Beginner’s Guide to Webpack }.</strong>.</li>        <li><strong>14:05 Grocery.</strong>.</li>        <li><strong>14:50 Cooking.</strong>.</li>        <li><strong>15:10 Testing javascript ,, { async function }:</strong> Because I see { Traversy medai }-{ Brad } write like <a href="https://youtu.be/j55fHUJqtyw?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm&t=963" target="_blank" rel="noopener">this</a>, so now I'm sure that <code>client.db('vue_express').collection('post')</code> <strong>is not</strong> a <code>Promise</code>, and because it is <strong>inside an <code>async function</code></strong>, and also <strong>invoked by another <code>async function</code></strong>, so that <code>client.db(...)</code> don't need to return immediately, which I never seen this before. // I thought we have always return a <u>pending</u> <code>Promise</code> immediately, but we don't need to, since a <strong><code>async function</code> always implicitly return a Promise to [ "who" ]-[ "where" ] invoke it, even it is blocked by itself <code>await</code> code inside!</strong>, so we don't need to do this explicitly.</li>        <li><strong>18:25 Eating apple, misc.</strong></li>        <li><strong>18:50 Testing { Mongoose } ,, nested schema.</strong> Try to understand "nested schema" vs { subdocuments }:</li>        <li><strong>20:00 Misc.</strong></li>        <li><strong>20:33 Cooking.</strong></li>        <li><strong>21:05 Eating, learning { 201 Created or POST-Redirect-GET after POST }.</strong></li>        <li><strong>21:30 Brushing teeth.</strong></li>        <li><strong>21:40 Understand what is "payload" in HTTP.</strong></li>        <li><strong>21:55 Watchig video.</strong></li>        <li><strong>23:05 Sleep.</strong></li>      </ol>    </li>    <li><strong>:</strong> <a href>Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-05-24<a id="id190524m072259"></a></h2>  <div class="kwCloud">    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Http }</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ Mongoose }</div>    <div class="itm s1">{ Javascript }</div>  </div>  <ol>    <li><strong>( SAAS ) Cat API:</strong> <a href="https://thecatapi.com/" target="_blank" rel="noopener">Link</a>. Haha, I thought Dog API is surprising enough.</li>    <li><strong>( Http ) ( REST API ) Format URI by try to make resource URI hierarchy-like:</strong> <a href="https://medium.com/hashmapinc/rest-good-practices-for-api-design-881439796dc9" target="_blank" rel="noopener">Link</a>. See section 5, <code>GET /users/123/posts/1</code>.</li>    <li><strong>( Architecture ) Stateful vs Stateless Web Services:</strong> <a href="https://nordicapis.com/defining-stateful-vs-stateless-web-services/" target="_blank" rel="noopener">Link</a>. I know I shouldn't deign server with Stateful already, but I keep need recalling these concept or I will forget. So maybe I should put state in client side? State, ultimately have to store in somewhere right? But can't find any information about something like "designing state on client". So I assume it is implemented by something like { cookie } or { web storage }. Also front-end framwork like { Vue.js } hold states already.</li>    <li><strong>( Http ) ( REST API ) Richardson Maturity Model - 3 level of REST:</strong> <a href="https://martinfowler.com/articles/richardsonMaturityModel.html" target="_blank" rel="noopener">Link</a>. Till the level 2 is the basics everyone already [ followed ]-[ doing so ].</li>    <li><strong>( Http ) REST - updating multiple resources with one request - is it standard or to be avoided?:</strong>      <ol>        <li><strong>See question from here:</strong> <a href="https://stackoverflow.com/questions/32098423/rest-updating-multiple-resources-with-one-request-is-it-standard-or-to-be-avo" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>See answer and suggestions from here:</strong> <a href="https://softwareengineering.stackexchange.com/questions/329596/what-http-status-code-to-return-if-multiple-actions-finish-with-different-status" target="_blank" rel="noopener">Link</a>. Someone said it is doable but not suggested (it can have complex issue like how you deal with some actions failed? And the status code?), but some suggested that this can improve efficiency a lot and REST is not always align with real [ scenario ]-[ case ] in [ business ]-[ real word ].</li>        <li><strong>See [ implementation ]-[ practice standard ] from here:</strong> <a href="https://docs.microsoft.com/en-us/graph/json-batching" target="_blank" rel="noopener">Link</a>. Microsoft docs.</li>      </ol>    </li>    <li><strong>( Http ) Are post requests secure without SSL?:</strong> <a href="https://security.stackexchange.com/questions/52402/are-post-requests-secure" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) How do I remove a property from a JavaScript object?:</strong> <a href="https://stackoverflow.com/questions/208105/how-do-i-remove-a-property-from-a-javascript-object" target="_blank" rel="noopener">Link</a>. Use <code>delete</code>.</li>    <li><strong>( Javascript ) How do I test for an empty JavaScript object?:</strong> <a href="https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Reserved words in JavaScript:</strong> <a href="http://www.javascripter.net/faq/reserved.htm" target="_blank" rel="noopener">Link</a>. You got to know a bit about this, using some word (example for varialble) will causing problem. So I guess this is why [ my ]-[ this ] code don't work as expect - <code>var person = {name: 'Alice'}; var name = true ? person : "stranger"; console.log(name);</code>, it should print <code>{name: 'Alice'}</code> but it print <code>[object Object]</code> instead. Cost me about 2 hours to find out the reason.</li>    <li><strong>( Mongoose ) Schema [ property ]-[ field ] [ name ]-[ key ] conflicts, my custom key conflict with Mongoose reversed key:</strong>      <ol>        <li><strong>Problem:</strong> See <a href="https://github.com/Automattic/mongoose/issues/1760" target="_blank" rel="noopener">Issues#1760</a>, <a href="https://github.com/Automattic/mongoose/issues/528" target="_blank" rel="noopener">issues#528</a>, and you will see how stupid the design was, Mongoose assume that people will never use property name like "type", "required", "options", "default", "save" in their { collection }? And if you use it, it will conflict with some Moogoose special property name. But anyway, it seems till now we don't have solution about this, If we tried to use it, Moogoose will complain about "xxx can not be used as property name".</li>        <li><strong>Solution:</strong> <a href="https://stackoverflow.com/questions/15100013/mongoose-field-with-the-name-type" target="_blank" rel="noopener">Link</a>. If your custom property name is conflict with Mongoose reversed one, such as "type", you can use like this - <code>type: {type: String}</code>. This will solve the problem (I've not test it yet). Mongoose API has bad document quality, it doesn't mention such critical thing like this.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:15 Wake up.</strong></li>        <li><strong>07:24 Upload blog.</strong></li>        <li><strong>07:30 Understand what is "payload" in HTTP:</strong> --{ You go to a restaurant and order food. Now the waiter is a web service. you tell the waiter to take your order - e.g mac and cheese. the web service aka waiter take the order to the kitchen a.k.a service end point aka server - so the payload here is “1 order of mac and cheese”. ; on Return the server responds to you request —- the Payload is the food in the plate that the waiter get you when you get food.}--. Good metaphor.</li>        <li><strong>08:05 Searching for REST API good practice.</strong></li>        <li><strong>08:45 Cooking, learning REST API good practice.</strong></li>        <li><strong>09:15 Eating, learning REST API good practice.</strong></li>        <li><strong>09:30 Brushing teeth.</strong></li>        <li><strong>09:40 Learning REST API good practice.</strong></li>        <li><strong>10:20 Searching about "http multiple request or one request for multiple resources".</strong></li>        <li><strong>11:30 Misc.</strong></li>        <li><strong>11:50 Eating apple, brushing teeth.</strong></li>        <li><strong>12:05 [ Testing code ]-{ Mongoose }-{ CRUD } ,, testing nested schema.</strong></li>        <li><strong>13:35 Cooking, misc.</strong></li>        <li><strong>14:16 Eating, reading, keep working on code.</strong></li>        <li><strong>14:35 [ Testing code ]-{ Mongoose }-{ CRUD } ,, testing nested schema.</strong></li>        <li><strong>17:30 Found a wierd unexpected problem in Javascript:</strong> Don't know why if I use ternary operator not <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#Description" target="_blank" rel="noopener">inside a function</a> it don't work as expect.</li>        <li><strong>20:30 Finished nested schema ,, POST part:</strong> Finished [ testing code ]-{ Mongoose }-{ CRUD } ,, nested schema ,, POST part.</li>        <li><strong>20:35 Grocery, cooking, misc.</strong></li>        <li><strong>21:15 Watching ,, { Traversy Media } - Node.js & Express From Scratch, eating.</strong></li>        <li><strong>22:00 Misc, chatting with mom.</strong></li>        <li><strong>23:00 Watching video.</strong></li>        <li><strong>23:20 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-25<a id="id190525m073659"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ Cookie }</div>    <div class="itm s1">{ Authentication }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ Cookie }</div>    <div class="itm s1">{ Twice }</div>    <div class="itm s1">{ Vue.js }</div>  </div>  <ol>    <li><strong>( Http ) { Cookie }:</strong> <a href="https://en.wikipedia.org/wiki/HTTP_cookie" target="_blank" rel="noopener">Web cookie</a>, including { authentication cookies }. // --{ Although cookies are usually set by the web server, they can also be set by the client using a scripting language such as JavaScript (unless the cookie's HttpOnly flag is set). }--. // JSON Web Tokens: --{ Unlike cookies, which are automatically attached to each HTTP request by the browser, JWTs must be explicitly attached to each HTTP request by the web application. }--. // Differences between cookies and localStorage: --{ Cookies are mainly be read in server-side, whereas local storage can only be read by the client-side. }--.</li>    <li><strong>( Vue.js ) { Scoped slot }:</strong> To review, just look at this <a href="https://css-tricks.com/using-scoped-slots-in-vue-js-to-abstract-functionality/" target="_blank" rel="noopener">link</a> ,, that [ yellow ]-[ overview ]-[ graph ].</li>    <li><strong>( Back-end ) ( Express.js ) { Traversy Media } - Node.js & Express From Scratch.</strong> <a href="https://youtu.be/CrAU8xTHy4M?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp" target="_blank" rel="noopener">[ Link ]-[ part 9]-[ user registration ]</a>. Not read et. This series take you down deep regarding how you can buid a authentication system, in practical standard. Brad guide you how you correctly store the password into database, before hashing.</li>    <li><strong>( Back-end ) ( Express.js ) { express-validator }-{ middleware }:</strong> <a href="https://express-validator.github.io/docs/" target="_blank" rel="noopener">Docs</a>, <a href="https://youtu.be/rBzCvbA0Dls?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp&t=781" target="_blank" rel="noopener">{ Traversy Media } Brad example</a>.</li>    <li><strong>Blood type:</strong> <a href="https://read01.com/zh-tw/Pm8MGk.html#.XOlNyZwRV0J" target="_blank" rel="noopener">血型,到底是幹嘛的?</a>, <a href="https://zh.wikipedia.org/wiki/%E8%A1%80%E5%9E%8B%E6%80%A7%E6%A0%BC%E5%AD%B8%E8%AA%AA" target="_blank" rel="noopener">血型性格學說</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:30 Wake up.</strong></li>        <li><strong>07:36 Upload blog.</strong></li>        <li><strong>07:46 Preparing ingredients.</strong></li>        <li><strong>07:55 Take a look about { lahSale }.</strong></li>        <li><strong>08:25 Cooking, reading code of { lahSale }.</strong></li>        <li><strong>09:00 Eating, reading code of { lahSale }, brushing teeth.</strong></li>        <li><strong>09:22 [ Testing ]-[ learning ] { Vue.js }-{ slot }-{ scope }.</strong></li>        <li><strong>09:45 Learn nothing from Vue docs for { scoped slot }:</strong> Why most docs are always so unfriendly, lack of example, lack of steps, lack of background story, lack of viewpoint from newcomers, hard to understand? I always have to cross reference different resources (mostly second hand, not first hand) to understand many things. // Now I need to go to find blogs teaching about { scoped slot }, this is much efficient, less time wasting, I waste a lot of time dealing with { scoped slot }, mostly not on understanding { scoped slot } itself, but on understanding that incomplete vue docs.</li>        <li><strong>10:40 Found why { Vue }-{ scoped slot } not working:</strong> I found why my code keep not working, it's typo again ... such a waste of time, I always have this stupid mistake, and those typo mistake always cost me hours to "debug".</li>        <li><strong>10:50 Go back to { lahSale }.</strong></li>        <li><strong>12:40 { lahSale } ,, working on making table cell item vertical align.</strong></li>        <li><strong>13:00 { lahSale } ,, send { Pull Request } to Woody.</strong></li>        <li><strong>13:05 Grocery.</strong></li>        <li><strong>13:25 Exercising:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a>, and <code>plank</code>.</li>        <li><strong>13:52 Taking a break.</strong></li>        <li><strong>13:55 Taking shower.</strong></li>        <li><strong>14:25 Cooking.</strong></li>        <li><strong>14:40 Watching ,, { Traversy Media } - Node.js & Express From Scratch.</strong></li>        <li><strong>14:55 Eating, understanding { cookie }:</strong> <a href="https://en.wikipedia.org/wiki/HTTP_cookie" target="_blank" rel="noopener">Web cookie</a>, including { authentication cookies }.</li>        <li><strong>16:00 Watching ,, { Traversy Media } - Node.js & Express From Scratch.</strong></li>        <li><strong>16:30 Eating apple, watching video about { Twice } TV shows.</strong></li>        <li><strong>19:25 Cooking.</strong></li>        <li><strong>19:40 Watching video, eating.</strong></li>        <li><strong>20:30 Working on { lahSale }:</strong> Talking with Woody, Woody said something more to change.</li>        <li><strong>22:30 Watching video.</strong></li>        <li><strong>22:45 Listening to music.</strong></li>        <li><strong>22:50 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-26<a id="id190526m070847"></a></h2>  <div class="kwCloud">    <div class="itm s1">{ Twice }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s2">{ JQuery }</div>    <div class="itm s1">{ Bootstrap }</div>    <div class="itm s1">Making { scrollspy }</div>  </div>  <ol>    <li><strong>( Twice ) Switzerland Schilthorn - scared looking meambers walking on the high montains:</strong> <a href="https://youtu.be/W32Rer9VRLY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) ( Library ) { Lodash }:</strong> <a href="https://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting" target="_blank" rel="noopener">Lodash - 10 javascript utility functions that you should probably stop rewriting</a>, <a href="https://lodash.com/docs/" target="_blank" rel="noopener">lodash.com/docs</a>.</li>    <li><strong>( JQuery ) You might not need jQuery:</strong> <a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">Link</a>. This article make 1-to-1 comparison about many methods that jquery syntax corresponding to native javascript syntax. Still worth to talk a quick [ glance ]-[ review ] if you need to find some tool (that using jQuery will be much faster).</li>    <li><strong>( JQuery ) Common positioning related method:</strong> <code>.offset()</code> (.top, ,left), <code>.scrollTop()</code>, <code>.height()</code>, <code>.outerHeight()</code>, <code>.innerHeight()</code> ... .</li>    <li><strong>( JQuery ) An introduction to jQuery with some examples:</strong> <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-jquery" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( JQuery ) { Selectors }:</strong> <a href="https://www.w3schools.com/JQuery/jquery_ref_selectors.asp" target="_blank" rel="noopener">Link</a></li>    <li><strong>( JQuery ) { :eq() Selector }:</strong> <a href="https://stackoverflow.com/questions/15719222/getelementsbyclassname-vs-jquery" target="_blank" rel="noopener">Link</a>. So if you want to get specific index of a elements set, you have to use jQuery specific pseudo-selector like this.</li>    <li><strong>( JQuery ) Loop through elements with the same class:</strong> <a href="https://stackoverflow.com/questions/4735342/jquery-to-loop-through-elements-with-the-same-class" target="_blank" rel="noopener">Link</a>. Use <code>.each(callbackFunc(idx, item))</code>. // Notice the differences between <code>obj</code> and <code>$(this)</code>, so in that callback function, you can use like - <code>elm.style.backgroundColor = "teal";</code>, or <code>$(elm).css("background-color", "teal");</code>, if you want change all matched elements with teal background color.</li>    <li><strong>( JQuery ) { this } vs { $(this) }:</strong> <a href="https://medium.com/js-dojo/this-vs-this-48d2122c3750" target="_blank" rel="noopener">Link</a>. --{ if this is a reference to a DOM element, the difference between this and $(this) is that the first is just the reference, the second adds the jQuery library to the reference. }--.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>06:55 Wake up.</strong></li>        <li><strong>07:10 Upload blog.</strong></li>        <li><strong>07:17 Bathroom.</strong></li>        <li><strong>07:25 Misc.</strong></li>        <li><strong>07:30 Testing { Bootstrap } ,, { scrollspy }-{ sticky nav bar }.</strong></li>        <li><strong>08:27 Cooking.</strong></li>        <li><strong>09:05 Eating, watching video, surf the web:</strong> <a href="https://youtu.be/ZegM4vx7MUo" target="_blank" rel="noopener">Why Is Adobe Flash Dying?</a> They come up with another thing called <code>Adobe Air</code>, but maybe it is not useful too.</li>        <li><strong>10:05 Dealing with problem of { Bootstrap } ,, { scrollspy }:</strong> { Scrollspy } need to add class on { body }, otherwise you have to use <a href="https://github.com/twbs/bootstrap/issues/16441" target="_blank" rel="noopener">workaround</a>, but this workaround is bad because it generate 2 scroll bar, and the behavior of when will any of them scrolling is unpredictable.</li>        <li><strong>10:05 Dealing with problem of { Bootstrap } ,, { scrollspy }:</strong> Trying other solution without bootstrap, using <a href="https://github.com/r3plica/Scrollspy" target="_blank" rel="noopener">{ r3plica }-{ scrollspy }</a> code.</li>        <li><strong>11:20 Eating apple, brushing teeth.</strong></li>        <li><strong>11:35 Figure out how to load module in { Vue.js }:</strong> <a href="https://blog.pusher.com/building-external-modules-vuejs/" target="_blank" rel="noopener">Building external modules in VueJS</a></li>        <li><strong>12:30 Understanding Javascript library { Lodash }.</strong></li>        <li><strong>12:55 Figure out how to load module in { Vue.js }.</strong></li>        <li><strong>13:00 Learning { module.exports }.</strong></li>        <li><strong>13:10 Try to implement { r3plica }-{ scrollspy } into { lahSale }.</strong></li>        <li><strong>14:50 Reading source code of { r3plica }-{ scrollspy }:</strong> However I tried, it don't work. The module and plugin seems to [ extend ]-[ register ] into { jQuery }-[ main instance ] sucessfully, but it somehow still don't work.</li>        <li><strong>15:00 Cooking:</strong> Problem still unsolved yet, but I think I roughly come out the solution now, when I am cooking, by making a child component, sub-nav block, that is reusable, and don't need to pollute parent component environment.</li>        <li><strong>15:15 Watching video, eating.</strong></li>        <li><strong>16:33 Build testing html file to test { JQuery } about scrolling operation.</strong></li>        <li><strong>21:30 Finished testing html file about { scrollspy }:</strong> Now I can implemented it into { vue }.</li>        <li><strong>21:31 Working on { lahSale }:</strong> Apply custom { scrollspy }-{ sticky nav bar } on { lahSale }.</li>        <li><strong>22:00 Cooking, eating, thinking the code:</strong> Almost fixed all bug, now only style need to improved.</li>        <li><strong>23:10 Watching video.</strong></li>        <li><strong>23:30 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-27<a id="id190527m074838"></a></h2>  <div class="kwCloud">    <div class="itm s1">Exercising</div>    <div class="itm s1">{ JQuery }</div>    <div class="itm s1">Javascript { Events }</div>    <div class="itm s2">{ lahSale }</div>    <div class="itm s1">Making { scrollspy }</div>  </div>  <ol>    <li><strong>( JQuery ) { jQuery() } method:</strong> <a href="https://api.jquery.com/jQuery/" target="_blank" rel="noopener">Link</a>. This core method can not only get DOM, but also add DOM.</li>    <li><strong>( JQuery ) { jQuery } object (returned by { jQuery() } method):</strong> <a href="http://api.jquery.com/Types/#jQuery" target="_blank" rel="noopener">Link</a>. // --{ Since jQuery methods often use CSS selectors to match elements from a document, the set of elements in a jQuery object is often called a set of "matched elements" or "selected elements". }-- // --{ Note that a jQuery object is not actually a Javascript Array object, so it does not have all the methods of a true Array object such as join(). }--. // --{ A jQuery object may also be empty if a selector doesn't select any elements ...  It is not an error; any further methods called on that jQuery object simply have no effect since they have no elements to act upon. }--.</li>    <li><strong>( JQuery ) Convert jQuery object to JavaScript native object:</strong> <a href="https://stackoverflow.com/questions/5533773/jquery-object-to-javascript-object" target="_blank" rel="noopener">Link</a>. Simply use <code>.get(index)</code> (<a href="http://api.jquery.com/get/" target="_blank" rel="noopener">docs</a>) will convert JQuery "selected elements" to javascript native object that is representation of DOM.</li>    <li><strong>( JQuery ) How to break out of jQuery each Loop:</strong> <a href="https://stackoverflow.com/questions/1784780/how-to-break-out-of-jquery-each-loop" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) { e.preventDefault() } Event Method:</strong> <a href="https://www.w3schools.com/jsref/event_preventdefault.asp" target="_blank" rel="noopener">Javascript</a>, <a href="https://bavotasan.com/2013/prevent-default-behaviour-of-hashed-anchor-tag-with-jquery/" target="_blank" rel="noopener">{ jQuery.click((e) => {e.preventDefault;}); }</a>.</li>    <li><strong>( Javascript ) { getters },{ setters }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters" target="_blank" rel="noopener">Link</a>. Also see <a href="https://stackoverflow.com/a/37403125/10607630" target="_blank" rel="noopener">this code</a>, see how other people using { getters },{ setters } and how they write beautiful code.</li>    <li><strong>( Javascript ) All { Event } type:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Checking if an element is visible (display) or not:</strong> <a href="https://davidwalsh.name/offsetheight-visibility" target="_blank" rel="noopener">Link</a>, <a href="https://makandracards.com/makandra/1339-check-whether-an-element-is-visible-or-hidden-with-javascript" target="_blank" rel="noopener">JQuery method</a>. Use <code>.offsetHeight</code>, this is the only <u>hack</u> and tricks that you can know if parent element is set to <code>display: none</code>, so <a href="https://www.w3schools.com/howto/howto_js_check_hidden.asp" target="_blank" rel="noopener">{ .display },{ .visibility }</a> will not work.</li>    <li><strong>Why we have to use { v-for }-{ key } in { vue }:</strong> <a href="https://cythilya.github.io/2017/04/27/vue-list-rendering/" target="_blank" rel="noopener">Link</a> ,, see "key" section.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:40 Wake up.</strong></li>        <li><strong>07:50 Upload blog.</strong></li>        <li><strong>13:25 Exercising at home:</strong> <a href="https://youtu.be/cZnsLVArIt8" target="_blank" rel="noopener">Brutal HIIT ladder workout - 20 minute HIIT workout at home</a>, and <code>plank</code>.</li>        <li><strong>08:30 Taking a break.</strong></li>        <li><strong>08:35 Taking shower.</strong></li>        <li><strong>09:00 Misc.</strong></li>        <li><strong>09:05 Working on { lahSale }-{ scrollspy }:</strong> Working on { lahSale }-{ scrollspy }-{ sticky nav bar } component.</li>        <li><strong>09:35 Testing { jQuery }.</strong></li>        <li><strong>09:55 Cooking.</strong></li>        <li><strong>10:25 Eating, watching video, eating fruit, brushing teeth.</strong></li>        <li><strong>11:10 [ Testing ],[ learning ] { jQuery }.</strong></li>        <li><strong>11:?? Working on { lahSale }-{ scrollspy }:</strong> Working on { lahSale }-{ scrollspy }-{ sticky nav bar } component.</li>        <li><strong>13:15 { lahSale }-{ scrollspy } component completed:</strong> Now I can apply this Vue component it to multiple pages.</li>        <li><strong>13:25 Understanding { v-for }-{ key } in { vue }.</strong></li>        <li><strong>13:25 Understanding { v-for }-{ key } in { vue }.</strong></li>        <li><strong>13:35 Reading source code of { r3plica }-{ scrollspy }:</strong> Just want to see if I can find useful thing to learn about JQUery.</li>        <li><strong>13:45 Working on { lahSale }-{ scrollspy }:</strong> More problem found.</li>        <li><strong>14:50 Cooking.</strong></li>        <li><strong>15:13 Eating, understanding { javascript }-{ Custom​Event }:</strong> <a href="https://www.sitepoint.com/javascript-custom-events/" target="_blank" rel="noopener">Link</a>. Not helpful for the problem I'm dealing with.</li>        <li><strong>15:37 Understanding { javascript }-{ getters },{ setters }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>16:30 Eating fruit, watching video, brushing teeth:</strong> Still no way to solve the problem that { lahSale }-{ scrollspy } offsetHeight value is not correct when switching tabs.</li>        <li><strong>17:00 Working on { lahSale }-{ scrollspy }:</strong> Brute forced it out with <code>setInterval()</code>.</li>        <li><strong>18:30 Finished { lahSale }-{ scrollspy }.</strong></li>        <li><strong>18:31 Working on { lahSale }-{ scrollspy }:</strong> Changed many places, but mostly minor change. All related to html structure, html class, and styling.</li>        <li><strong>21:15 Grocery, cooking.</strong></li>        <li><strong>22:00 Eating.</strong></li>        <li><strong>22:12 Brushing teeth.</strong></li>        <li><strong>22:20 Muse.</strong></li>        <li><strong>22:40 Watching video:</strong> Mostly about <code>Twice</code>.</li>        <li><strong>23:10 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-28<a id="id190528m075637"></a></h2>  <div class="kwCloud">    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">Javascript { Events }</div>    <div class="itm s1">{ Vue ,, lifecycle }</div>  </div>  <ol>    <li><strong>( Twice ) Tzuyu has no money to buy Chaeng a B'day Gift:</strong> <a href="https://youtu.be/2rXEe97n-zU?t=26" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Twice } - Sleep tight good night,:</strong> <a href="https://youtu.be/M4pk0Wx372w" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ 看电影了没 } - 同一个家庭出来的孩子，为什么贫富差距这么大？:</strong> <a href="https://youtu.be/ZxtAcqEy2Sk" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( 公共電視 - 有話好說 ) 同婚新人 小銘＆小玄 厭世姬＆簡莉穎 尊重差異 多元平權 責任與承諾 同志幸福路上:</strong> <a href="https://youtu.be/qS15JO3ifAs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) ( Webdev ) Get started with Chrome devtools ,, debugger:</strong> <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/" target="_blank" rel="noopener">Link</a>. Very important basic tools to know, since it will save a lot of unnecessary time waste using <code>console.log</code> to debug.</li>    <li><strong>( Javascript ) How to develop high performance onScroll event?:</strong> <a href="https://joji.me/en-us/blog/how-to-develop-high-performance-onscroll-event/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Optimize JavaScript execution performance - { developers.google } :</strong> <a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="noopener">Link</a>. Including <code>.requestAnimationFrame()</code> and <code>Web Workers</code>.</li>    <li><strong>( Javascript ) { .request​Animation​Frame() }:</strong> <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Window.requestAnimationFrame" target="_blank" rel="noopener">Link</a>. --{ 使用window.requestAnimationFrame()有一個很大的好處是瀏覽器可以幫我們做最佳化，瀏覽器可以綜合考量讓Javascript所產生的動畫和CSS transition或SVG SMIL一次一起刷新，甚至在動畫頁面處於不可見時，停止動畫以節省系統資源和電源的耗用。 }--.</li>    <li><strong>( Javascript ) What is { Web worker } - "multi thread":</strong> <a href="https://ithelp.ithome.com.tw/articles/10118851" target="_blank" rel="noopener">Web Worker 經驗分享(一)</a>, <a href="https://ithelp.ithome.com.tw/articles/10118891?sc=pt" target="_blank" rel="noopener">Web Worker 經驗分享(二)</a>. 白話淺顯易懂。但至少目前為止我絕對不需要鑽這麼深的東西。</li>    <li><strong>( Javascript ) How ,, make mouse pointer onto a div, page's scroll bar disable scrolling:</strong> <a href="https://stackoverflow.com/questions/14051908/mouse-wheel-scroll-event" target="_blank" rel="noopener">Link</a>. <code>e.preventDefault()</code>.</li>    <li><strong>( Javascript ) { removeEventListener() }:</strong> <a href="https://www.w3schools.com/jsref/met_element_removeeventlistener.asp" target="_blank" rel="noopener">Link</a>. Can remove specific event type used on <strong>specific <code>callback function</code> </strong>, that used to be use by <code>addEventListener()</code>.</li>    <li><strong>{ Vue ,, lifecycle }:</strong> <a href="https://alligator.io/vuejs/component-lifecycle/" target="_blank" rel="noopener">Link1</a> (more basic), <a href="https://medium.com/@yvonne11yuting/vue-%E9%81%8B%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9C%96-be7e2a5cde36" target="_blank" rel="noopener">link2</a> (more advanced). Still don't know what this is. Realated to <code>hook</code>, included <code>created()</code>, <code>mounted()</code>, <code>beforeDestroy()</code>, <code>destroyed()</code> ... .</li>    <li><strong>( Vue ) Computed properties should be based only on Vue reactive data. Otherwise, it just won’t work:</strong> <a href="https://itnext.io/how-not-to-vue-18f16fe620b5" target="_blank" rel="noopener">Link</a> ,, section <u>Thinking that non-reactive data will be reactive</u>. Other sections are not helpful to me.</li>    <li><strong>( Library ) { Axios } vs { Fetch API }:</strong> <a href="https://medium.com/@jeffrey.allen.lewis/http-requests-compared-why-axios-is-better-than-node-fetch-more-secure-can-handle-errors-better-39fde869a4a6" target="_blank" rel="noopener">Link</a>. Ok, so now I'm sure I don't need to use { Axios }, { Fetch API } is good enough for my use case.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:20 Wake up.</strong></li>        <li><strong>07:35 Bathroom, preparing ingredients.</strong></li>        <li><strong>07:55 Upload blog.</strong></li>        <li><strong>08:03 Misc, reading articles, cooking.</strong></li>        <li><strong>08:35 Eating, wasting time, understanding { Axios }.</strong></li>        <li><strong>09:15 Watching video, getting news, learning how to find first hand source:</strong> Mostly relaxing.</li>        <li><strong>12:10 Understanding how to develop high performance onScroll event.</strong></li>        <li><strong>12:20 Understanding { .request​Animation​Frame() } and javascript performance.</strong></li>        <li><strong>14:10 Learn how to use { Chrome } debugger.</strong></li>        <li><strong>15:10 [ Learn how to use ],[ playing ] { Firefox } { performance monitor }:</strong> Related to optimize onScroll event.</li>        <li><strong>15:45 Grocery, cooking, watching video.</strong></li>        <li><strong>16:20 Eating, brushing teeth, reading article about { vue }:</strong> <a href="https://itnext.io/how-not-to-vue-18f16fe620b5" target="_blank" rel="noopener">How not to Vue</a>.</li>        <li><strong>18:00 { lahSale } ,, fixing "stray" { setInterval } and { scroll event }:</strong> After reading <a href="https://itnext.io/how-not-to-vue-18f16fe620b5" target="_blank" rel="noopener">How not to Vue</a>, it prompt me I haven't destroy the <code>events</code> I used on <code>scrollspy</code> component.</li>        <li><strong>19:30 Watching video.</strong></li>        <li><strong>20:00 Talking with Woody.</strong></li>        <li><strong>20:40 Zone out.</strong></li>        <li><strong>20:50 { lahSale } ,, minor change, style update with woody.</strong></li>        <li><strong>22:33 Cooking , working on { lahSale } ,, header.</strong></li>        <li><strong>23:05 Eating.</strong></li>        <li><strong>23:20 Brushing teeth.</strong></li>        <li><strong>23:30 Watching video:</strong> <a href="https://youtu.be/YrO4ps2CWXA" target="_blank" rel="noopener">How Tzuyu loves and caring for her Unnies</a>.</li>        <li><strong>23:55 Sleep.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-29<a id="id190529m081215"></a></h2>  <div class="kwCloud">    <div class="itm s2">{ Mongoose }</div>    <div class="itm s1">{ lahSale }</div>    <div class="itm s1">{ Bootstrap }</div>  </div>  <ol>    <li><strong>( Music ) Thomas Bergersen - Colors of Love - { Sun }:</strong> <a href="https://youtu.be/ZuGiwDQEvDc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vegetarian ) { M觀點 } - 比爾蓋茲也投資的 Beyond Meat 到底是何方神聖？為什麼能夠超越 Uber 成為 2019 年最成功的 IPO？:</strong> <a href="https://youtu.be/ZQUDUsl3d8g" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Dog ) ( Touching ) { The Dodo } This Senior Pit Bull Is Proof That Love Can Heal Anything:</strong> <a href="https://youtu.be/Uc1ozqqVwQE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Database ) My current feeling about { Mongoose }:</strong> Now I start to learn more and more thing about <code>Mongoose</code>. It is such a complex thing to learn, not because it is hard but it is [ weird ],[ have many quirk rules and trait to know ],[ always works differently than first expectation ]. I thought <code>MonogDB + Mongoose</code> will be easier to learn than <code>MySQL</code> (and this is why I choose to use it with my Node.js backend), but it seems I'm wrong, it spends me more time to learn. And the complexity and "always works differently than first expectation" makes me feel like I'm going to forget everything after few months. Things "works differently than user's expectation", or require too much rules to remember, is generally a worse system and bad design. It surprised me that in default <code>Mongoose</code> don't do schema <strong>validation</strong> on <u>update</u>, but only on <u>create</u>, what?</li>    <li><strong>( AI ) { Two Minute Papers } - This Robot Throws Objects with Amazing Precision:</strong> <a href="https://youtu.be/JJlSgm9OByM" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>By time:</strong>      <ol>        <li><strong>07:55 Wake up.</strong></li>        <li><strong>08:10 Upload blog.</strong></li>        <li><strong>08:22 Checking if there is leading whitespace in { lahSale } files.</strong></li>        <li><strong>08:38 Message Woody.</strong></li>        <li><strong>08:45 Prepare ingredients.</strong></li>        <li><strong>08:50 Messaging with Woody.</strong></li>        <li><strong>09:00 Working on { lahSale } ,, { Bootstrap }-[ main navbar ]:</strong> 1. Main navbar add dropdown options 2. Main navbar add mobile menu (collapse feature).</li>        <li><strong>10:05 Cooking.</strong></li>        <li><strong>10:25 Eating, reflecting, eating fruit:</strong> Wasting time on reflecting, I should always live in "now" instead.</li>        <li><strong>11:00 Watching video, brushing teeth:</strong> <a href="https://youtu.be/tfb6aEUMC04" target="_blank" rel="noopener">OpenAI Five Beats World Champion DOTA2 Team 2-0</a>, <a href="https://youtu.be/C6nonNRoF7g" target="_blank" rel="noopener">This is How Google’s Phone Enhances Your Photos</a>.</li>        <li><strong>12:10 Listening to music:</strong> Try to [ remove ]-[ distract ] previous focus.</li>        <li><strong>12:30 [ Testing code ]-{ Mongoose }-{ CRUD } ,, nested schema ,, POST part.</strong></li>        <li><strong>15:15 [ Testing code ]-{ Mongoose }-{ CRUD } ,, nested schema ,, POST part ,, Route finished, others not.</strong></li>        <li><strong>15:16 Cooking, dancing with music.</strong></li>        <li><strong>15:44 Eating, watching video:</strong> Mostly related to <code>Twice</code>.</li>        <li><strong>17:10 Brushing teeth.</strong></li>        <li><strong>17:15 Misc.</strong></li>        <li><strong>17:38 Take a nap.</strong></li>        <li><strong>18:15 [ Testing code ]-{ Mongoose }-{ CRUD } ,, nested schema ,, POST and PUT part.</strong></li>        <li><strong>22:15 Brushing teeth.</strong></li>        <li><strong>22:25 [ Testing code ]-{ Mongoose }-{ CRUD } ,, nested schema ,, PUT part.</strong></li>        <li><strong>23:20 Finally around finished all testing and research about back-end!:</strong> Now I done the [ testing code ]-{ Mongoose }-{ CRUD } ,, all methods (4), { Traversy Media } { Mongoose } and { Express,js } tutorial. Now I have enough base to build my <code>CMS</code>!</li>        <li><strong>23:21 Watching video.</strong></li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-30<a id="id190530m001443"></a></h2>  <div class="kwCloud">    <div class="itm s1">Back-end</div>    <div class="itm s1">{ Express.js }</div>    <div class="itm s1">{ MongoDB }</div>    <div class="itm s2">{ Document-oriented database }-{ Data Modeling }</div>  </div>  <ol>    <li><strong>{ mongodb.com } - 6 Rules of Thumb for MongoDB Schema Design:</strong>      <ol>        <li>About: <strong>Informative!</strong> It shows the real [ advantage ]-[ potential ] of <code>MongoDB</code> compare to <code>Relational Database</code> - <strong>very flexible</strong> to modeling your database structure relationship to fit either <strong>One-to-Few</strong>, <strong>One-to-Many</strong>, <strong>One-to-Squillions</strong>, case. This is where <code>Document-Oriented Database</code> shine, it <strong>adapts</strong> to real word cases, and very <strong>efficient</strong> if properly designed.</li>        <li><strong>Part1:</strong> <a href="https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1" target="_blank" rel="noopener">Part1</a>. One-to-Few, One-to-Many, One-to-Squillions, case. See <a href="https://docs.mongodb.com/v4.0/tutorial/model-tree-structures-with-parent-references/" target="_blank" rel="noopener">Model Tree Structures with Parent References</a> (corresponding to One-to-Squillions case in this article), <a href="https://docs.mongodb.com/v4.0/tutorial/model-tree-structures-with-child-references/" target="_blank" rel="noopener">Model Tree Structures with Child References</a> (corresponding to One-to-Many case in this article).</li>        <li><strong>Part2:</strong> <a href="https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-2?_ga=2.19546808.1829550046.1559105225-1963199462.1558097902" target="_blank" rel="noopener">Part2</a>. <code>Two-Way Referencing</code> for optimization. <code>Denormalizing</code> for optimization. --{ Denormalization allows you to avoid some application-level joins, at the expense of having more complex and expensive updates. Denormalizing one or more fields makes sense if those fields are read much more often than they are updated. }--. // <code>Projection</code>.</li>        <li><strong>Part3:</strong> <a href="https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-3?_ga=2.19546808.1829550046.1559105225-1963199462.1558097902" target="_blank" rel="noopener">Part3</a>. Recap, and simple rules to follow every time you are designing your schema.</li>      </ol>    </li>    <li><strong>By time:</strong>      <ol>        <li><strong>00:20 Sleep.</strong></li>        <li><strong>08:25 Wake up.</strong></li>        <li><strong>08:30 Upload blog.</strong></li>        <li><strong>08:35 Planning the structure and functionality of my CMS.</strong></li>        <li><strong>09:47 Cooking, eating, learning { Mongoose } { Index },{ Unique Index }.</strong></li>        <li><strong>11:52 Misc.</strong></li>        <li><strong>13:05 Take a nap.</strong></li>        <li><strong>13:30 Taking shower</strong></li>        <li><strong>14:00 Learing { MongoDB }-{ Data Modeling }:</strong> Eye opening!</li>        <li><strong>16:20 Grocery.</strong></li>        <li><strong>16:35 Cooking.</strong></li>        <li><strong>16:55 Watching video, eating.</strong></li>        <li><strong>16:55 Playing { game }-{ Zero-k }, eating:</strong> It have been quite some time I did this last time.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-05-31<a id="id190601m111146"></a></h2>  <div class="kwCloud">    <div class="itm s2">Playing { game }-{ Zero-k }</div>  </div>  <ol>    <li><strong>By time:</strong>      <ol>        <li><strong>00:00 Playing { game }-{ Zero-k }:</strong> Playing game all day long, non-stoped, even passed midnight.</li>        <li><strong>03:45 Sleep:</strong> Stay up late again, it have been quite some time I did this last time.</li>        <li><strong>11:20 Wake up.</strong></li>        <li><strong>11:35 Playing { game }-{ Zero-k }.</strong></li>        <li><strong>11:45 Bathroom, thinking about "log table" design of my blog and next CMS:</strong> No need to create another record type called "log", along with "post", because it doesn't benifits much.</li>        <li><strong>13:00 Cooking and eating.</strong></li>        <li><strong>13:01 Playing { game }-{ Zero-k }:</strong> Playing game all day long, non-stoped, even passed midnight.</li>      </ol>    </li>  </ol></div><hr><div class="facetList">Cmm: u190501m130707 x88lost x88fs c88log log88tableCurrent: ti88crr88y19 ti88crr88y19dw6 ti88crr88y19m06 ti88crr88y19m06d01 ti88crr88y19m06dw6 ti88crr88y19q2 ti88crr88y19q2dw6 ti88crr88y19w22 ti88crr88y19w22dw6Time (d): ti88y19 ti88y19dw6 ti88y19m05 ti88y19m05d18 ti88y19m05dw6 ti88y19q2 ti88y19q2dw6 ti88y19w20 ti88y19w20dw6</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190430 ( Programming ) My first { Vue.js } project { Doggo }</title>
      <link href="/treegbBlog/19/04/30/190430m135836/"/>
      <url>/treegbBlog/19/04/30/190430m135836/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> This is my first <code>Vue.js</code> front-end project, a dog breed guessing game. The most important thing I learned by this project is, <strong>problem solving</strong> skills, and the wisdom of handling <strong>complexity</strong> of natural, with human friendly (<strong>simple</strong> for human) way.</li></ul><a id="more"></a><hr><ol><li><strong>App live website:</strong> <a href="https://treegb.github.io/doggo/" target="_blank" rel="noopener">Link</a>.<strong><br></strong></li><li><strong>Github project repository:</strong> <a href="https://github.com/treegb/doggo" target="_blank" rel="noopener">Link</a>.</li></ol><hr><div class="facetList">Cmm: u190430m135836 x88lost x88fs c88sofw programming c88programming webdev c88webdev sofw88framework vue vueww vueJs framework88vueJs javascript lang88javascript doggo dog dogww go goww doggie doggy x doggi guess guessing breed typeCurrent: ti88crr88y19 ti88crr88y19dw2 ti88crr88y19m04 ti88crr88y19m04d30 ti88crr88y19m04dw2 ti88crr88y19q2 ti88crr88y19q2dw2 ti88crr88y19w18 ti88crr88y19w18dw2Time (d): ti88y19 ti88y19dw2 ti88y19m04 ti88y19m04d30 ti88y19m04dw2 ti88y19q2 ti88y19q2dw2 ti88y19w18 ti88y19w18dw2</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190430 ( Problem solving ) How I solved { vue } deployment ,, index.html ,, src path ,, sub-domain path missing</title>
      <link href="/treegbBlog/19/04/30/190430m120918/"/>
      <url>/treegbBlog/19/04/30/190430m120918/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><ol><li><strong>Timeline from the problem start, and to the problem finally get solved:</strong><ol><li><strong>2019-04-29 I tried to deploy project { Doggo } to github.</strong></li><li><strong>I follow the Vue deployment guide:</strong> <a href="https://cli.vuejs.org/guide/deployment.html" target="_blank" rel="noopener">Link</a>. I config my <code>vue.config.js</code>, add an option - <code>publicPath</code> property. I create a shell script <code>deploy.sh</code>.</li><li><strong>The shell script { deploy.sh } abort when pushing to git:</strong> The build part is running fine (<code>npm run build</code>), so I guess the problem is not happens at vue build, but push to github.</li><li><strong>Found key info about git can push with { ssh } or { https }:</strong> I notice a article imply about git can push with either { https } (suggested?) and { ssh } (not suggested?), so I go back to my <code>deploy.sh</code> and found the address I used was <code>git push -f git@github.com:treegb/doggo.git master:gh-pages</code>, so I think Vue [ document ]-[ guide ] is using ssh method. And maybe I can't push is because I didn't haven't establish some authentication between me (client) and git server before I can use { ssh }. So I think I have to change this line to https address, but I don't know how.</li><li><strong>I tried to think about .git directory:</strong> This file always appears in every git local project directory, but since the <code>dist</code> directory generate by <code>vue-cli-service build</code> when <code>build</code>, will not have the <code>.git</code> directory in default, so how can I create that .git directory? If I can make that directory inside my dist directly, then I simply just <code>cd</code> to <code>dist</code>, then use <code>git push origin master:gh-pages</code> and it will works.</li><li><strong>I notice the { git init } in { deploy.sh } file:</strong> So I try to test what this command works. I found this command will generate <code>.git</code> directory, this is just I want.</li><li><strong>I still don't know how to push to a specific remote git address:</strong> I tried to git push origin master:gh-pages anyway, it failed, with error message - <code>Fatal: 'origin' does not appear to be a git repository</code>. I google with this message and found <a href="https://stackoverflow.com/questions/15637507/fatal-origin-does-not-appear-to-be-a-git-repository" target="_blank" rel="noopener">this article</a>, and I got a key - use <code>git remote add origin url/to/your/fork</code> to "define" what is "origin" in your <code>.git/config</code> first. Now with this command I define what is the <code>"origin"</code> mean in this git local repo.</li><li><strong>Push with { git push origin master:gh-pages } now works.</strong></li><li><strong>I go to gh-pages static website of this project, but it is blank:</strong> A blank page can mean <strong>so much things</strong> (caused by any kind of possibility)! I don't know if it is my App logic is wrong? The config of my App  is wrong? The config of my { build } is wrong? The process of my { vue } { build } is wrong? { Vue } [ guide ]-[ document ] is outdated? My { vue-cli ] global command is outdated? I push to wrong places? The push failed with some reason? My gh-pages setting is wrong and the static site wont not served by default? Git don't support specific kind of content? Other reason I haven't thought about? <strong>There is just too much possibility that makes the trouble shooting very very hard!</strong></li><li><strong>I have no clue, but I try to do random probe:</strong> This is <strong>another key</strong>, I go into <strong>diffuse mode</strong> instead of <strong>focus mode</strong>, I <strong>play around</strong> with any possibility.</li><li><strong>I open the inspector (web console, F12 in Firefox):</strong> I found in the console log, it shows 2 abnormal message - <code>... resources "https://treegb.github.io/js/chunk-vendors.b67a9d55.js" not found ...</code> . But I don't know what it means.</li><li><strong>I found a thread, and it hint me to check about the 404 status code:</strong> I made a glimpse on <a href="https://github.com/vuejs/vue-cli/issues/1955" target="_blank" rel="noopener">this thread</a>, but didn't even see the content at all, instead, I was hint by the keyword <strong>404</strong>, and I was thinking about I can check the status code of the request. I open [ web console ]-[ inspect elements ]-[ F12 ] again, go to network tab, and refresh the page. It did show some 404 request of resources. Now I start to guess the problem might be the <strong>url</strong> in my app is incorrect.</li><li><strong>I found index.html have wrong url attribute:</strong> After long struggling, I think I can go check the index.html to see if the src attribute is using abnormal domain name. And I found, every <code>src</code> attribute inside don't include <span style="text-decoration: underline;"><strong>sub-domain name</strong></span> <code>doggo</code>. I think this is further closing the source of problem. But I still don't know why.</li><li><strong>Now I exclude deployment as the problem:</strong> Github and <code>deployment</code> was eliminated outside of the problem, the problem <strong>narrow down to</strong> the <code>build</code> process itself, it have the wrong url (missing sub-domain name) at the first place.</li><li><strong>I was stuck now:</strong> I have checked <code>vue.config.js</code>, I set the <code>publicPath</code> correctly. Even I tried a lot of things, it still don't work no matter how. <strong>This is the most time I spent for this problem shooting process,</strong> I just don't know where the problem is. </li><li><strong>The problem is even narrowing down:</strong> By following <a href="https://cli.vuejs.org/guide/creating-a-project.html" target="_blank" rel="noopener">this guide</a>, I tried to create a new vue testing project, and try to <code>build</code> it immediately. Now the <strong>same symptom</strong> shows up, the <code>index.html</code> in <code>dist</code> directory have the wrong url (missing sub-domain name). I still don't know the problem, but at least I reduce the problem area. I eliminate the possibility of my apps causing the problem.</li><li><strong>Another key comes out when I was in "diffuse mode":</strong> Nothing I can do, I tried to read <a href="https://cli.vuejs.org/config/#vue-config-js" target="_blank" rel="noopener">guide of vue.config.js</a>, again, casually. At one point, I notice there is another method I can config my Vue behavior, it is through adding extra property - <code>vue</code>, in <code>package.json</code>.</li><li><strong>Another key comes out when I was in "diffuse mode":</strong> I found there is one [ option ]-[ property ] I can exploit, that is <code>outputDir</code>. At default, when you run <code>npm run build</code>, vue-cli will <code>build</code> it into <code>dist</code> directory, but we can change this behaviour by giving different <code>outputDir</code> value.</li><li><strong>I tried to test if ALL configuration at vue work at all:</strong> Now I want to make sure one thing first, does any configuration of vue works at all? tried to exploit the <code>outputDir</code> option. I add <code>outputDir: 'disttt'</code> first, and build again. I found with this [ options ]-[ property ], when it is put inside <code>vue.config.js</code> it don't work, but if it is put inside <code>package.json</code>, it works!</li><li><strong>Now the problem reduce down to, { vue.config.js } is not working:</strong> It might as well caused by many possible reason, but luckily, after looking inside this file again, I found at the <code>module.expots = {}</code> part, I was missing a <code>r</code> character, it should be <code>module.exports = {}</code> instead! Oh my god! This "bug" is so stupid.</li></ol></li><li><strong>What I'd learned in this trouble shooting:</strong><ol><li><strong>"Diffuse mode" is so important:</strong> Using <code>Diffuse mode</code> in the beginning is so much important than <code>focus mode</code>. <code>Diffuse mode</code> first, then <code>focus mode</code> later.</li><li><strong>Only obey the Rationality:</strong> Not what you want to trust, but what Rationality tells you.</li><li><strong>Only obey the Truth:</strong> Not what you want to trust, but what Rationality tells you.</li><li><strong>"Correlation does not imply causation":</strong> Keep making assumption about the where is the real source of the current problem.</li></ol></li></ol><hr><div class="facetList">Cmm: u190430m120918 x88lost x88fs c88sofw programming c88programming webdev c88webdev problem c88problem problem88problemSolving problem88solved trouble shooting troubleShooting sofw88framework vue vueww vueJs framework88vueJs deploy deploymentCurrent: ti88crr88y19 ti88crr88y19dw2 ti88crr88y19m04 ti88crr88y19m04d30 ti88crr88y19m04dw2 ti88crr88y19q2 ti88crr88y19q2dw2 ti88crr88y19w18 ti88crr88y19w18dw2Time (d): ti88y19 ti88y19dw2 ti88y19m04 ti88y19m04d30 ti88y19m04dw2 ti88y19q2 ti88y19q2dw2 ti88y19w18 ti88y19w18dw2</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190401 ( Log table ) 2019-04</title>
      <link href="/treegbBlog/19/04/01/190401m013644/"/>
      <url>/treegbBlog/19/04/01/190401m013644/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-04:</strong> <a href="#190401m022048">Section</a>.</li>    <li><strong>2019-04-01:</strong> <a href="#190401m022100">Section</a>.</li>    <li><strong>2019-04-02:</strong> <a href="#190402m010210">Section</a>.</li>    <li><strong>2019-04-03:</strong> <a href="#190403m003704">Section</a>.</li>    <li><strong>2019-04-04:</strong> <a href="#190404m005738">Section</a>.</li>    <li><strong>2019-04-05:</strong> <a href="#190404m231530">Section</a>.</li>    <li><strong>2019-04-06:</strong> <a href="#190406m003643">Section</a>.</li>    <li><strong>2019-04-07:</strong> <a href="#190407m004955">Section</a>.</li>    <li><strong>2019-04-08:</strong> <a href="#190408m001819">Section</a>.</li>    <li><strong>2019-04-09:</strong> <a href="#190409m135501">Section</a>.</li>    <li><strong>2019-04-10:</strong> <a href="#190410m142437">Section</a>.</li>    <li><strong>2019-04-11:</strong> <a href="#190411m135329">Section</a>.</li>    <li><strong>2019-04-12:</strong> <a href="#190412m151033">Section</a>.</li>    <li><strong>2019-04-13:</strong> <a href="#190413m023332">Section</a>.</li>    <li><strong>2019-04-14:</strong> <a href="#190414m163918">Section</a>.</li>    <li><strong>2019-04-15:</strong> <a href="#190415m020723">Section</a>.</li>    <li><strong>2019-04-16:</strong> <a href="#190417m020530">Section</a>.</li>    <li><strong>2019-04-17:</strong> <a href="#190417m020539">Section</a>.</li>    <li><strong>2019-04-18:</strong> <a href="#190418m005247">Section</a>.</li>    <li><strong>2019-04-19:</strong> <a href="#190419m202121">Section</a>.</li>    <li><strong>2019-04-20:</strong> <a href="#190420m081032">Section</a>.</li>    <li><strong>2019-04-21:</strong> <a href="#190420m230822">Section</a>.</li>    <li><strong>2019-04-22:</strong> <a href="#190421m232756">Section</a>.</li>    <li><strong>2019-04-23:</strong> <a href="#190422m232337">Section</a>.</li>    <li><strong>2019-04-24:</strong> <a href="#190424m003510">Section</a>.</li>    <li><strong>2019-04-25:</strong> <a href="#190425m075016">Section</a>.</li>    <li><strong>2019-04-26:</strong> <a href="#190426m005457">Section</a>.</li>    <li><strong>2019-04-27:</strong> <a href="#190426m231145">Section</a>.</li>    <li><strong>2019-04-28:</strong> <a href="#190428m000055">Section</a>.</li>    <li><strong>2019-04-29:</strong> <a href="#190428m223242">Section</a>.</li>    <li><strong>2019-04-30:</strong> <a href="#190430m082916">Section</a>.</li>    <li><strong>{ Pollash }:</strong> <a href="#190419m212225">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-04<a id="190401m022048"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04.svg" alt="2019-04">  </div></div><div class="h2">  <h2>2019-04-01<a id="190401m022100"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-01.svg" alt="2019-04-01">  </div>  <ol>    <li><strong>( Javascript ) [ Understanding { this } keyword ]-{ TylerMcGinnis }:</strong> <a href="https://youtu.be/zE9iro4r918" target="_blank" rel="noopener">Link</a>. // Notice <a href="https://youtu.be/zE9iro4r918?t=309" target="_blank" rel="noopener">05:09</a> it shows when <code>jim.mother.sayName()</code> is invoked, <code>.this</code> will represent <code>mother</code>, not <code>jim</code>.</li>    <li><strong>( Javascript ) [ A Beginner's Guide to Prototype ]-{ TylerMcGinnis }:</strong> <a href="https://youtu.be/XskMWBXNbp0" target="_blank" rel="noopener">Link</a>. // <a href="https://youtu.be/XskMWBXNbp0?list=PLqrUy7kON1meuCvGp2D6yTglZhPTT_s_f&t=1252" target="_blank" rel="noopener">20:52 --{ so why we still use { Prototype? } instead of { Class } ? }--</a>.</li>    <li><strong>( Javascript ) [ Inheritance and the Prototype Chain ]-{ TylerMcGinnis }:</strong> <a href="https://youtu.be/MiKdRJc4ooE" target="_blank" rel="noopener">Link</a>. // <a href="https://youtu.be/MiKdRJc4ooE?t=655" target="_blank" rel="noopener">10:55</a> - --{ This is why we using ES6 { Class } to get rid of all the complex steps mentioned previously in this video, the inheritance become much more easy. }--. Also see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/classes" target="_blank" rel="noopener">{ MDN }-{ Class }</a>.</li>    <li><strong>( Javascript ) [ Modules ]-[ From IIFEs to CommonJS to ES6 Modules ]-{ TylerMcGinnis }:</strong> <a href="https://youtu.be/qJWALEoGge4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Power grid of electricity use [ AGC ]-[ Automatic Generation Control] to balance the grid:</strong> <a href="https://youtu.be/83S09MX9cFE?t=113" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) Hospice - { 最後這條路｜我的人生，由我主宰｜三之一 } - { TheNewsLens }:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/LrccLx2iYog?list=TLGGyZT5oR1kgaEwMTA0MjAxOQ" target="_blank" rel="noopener">Link</a>.        </li><li><strong>The face of the "real world":</strong> We shouldn't ignore any important aspect that compose the real world (even they seems to be more unpleasant), in other words, only "knowing" and <strong>"experiencing"</strong> the most bright side and as well as the most dark side of this world, then we can tell our personality is <strong>"complete"</strong>, is <strong>"whole"</strong>. Maybe if we had experienced only the noble things but no evil things, or if we had experienced only the evil things but no noble things, we are not a <u>"complete"</u>, a <u>"whole"</u> person? This remind me a novel I had read - <code>Siddhartha</code> by Herman Hesse.</li>        <li><strong>"自然生物性" 和 "演算法":</strong> --{ 只有在最困難的時刻，才會造就英雄。風和日麗下是不會造就英雄的。 心靈上的對抗和征服，比身體上的，有時候更困難。 戰勝自己的人性，就是戰勝我們生下來時就已經寫進我們人性的的演算法，我們是在跟自然生物性對抗，我們是在修改我們自己的演算法。 }--.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-04-02<a id="190402m010210"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-02.svg" alt="2019-04-02">  </div>  <ol>    <li><strong>( Javascript ) [ Modules ]-[ From IIFEs to CommonJS to ES6 Modules ]-{ TylerMcGinnis }:</strong> <a href="https://youtu.be/qJWALEoGge4" target="_blank" rel="noopener">Link</a>. // <a href="https://youtu.be/qJWALEoGge4?t=711" target="_blank" rel="noopener">Self-invoking function link1 (11:51)</a>, <a href="https://stackoverflow.com/questions/10984652/javascript-immediately-invoked-function-patterns" target="_blank" rel="noopener">self-invoking function link2</a>. // <a href="https://youtu.be/qJWALEoGge4?t=1159" target="_blank" rel="noopener">19:19</a> - <code>Module Bundler</code> of <code>common.js</code> will intelligently collecting all module spead in all .js files, convert it into a single <code>bundle.js</code> file, that browser can understand (then keyword such as <code>require</code>, <code>export</code> ... will all be removed after this).</li>    <li><strong>(Music) {閃靈 CHTHONIC }-{ 烏牛欄大護法 }-{ Millennia's Faith Undone }:</strong> <a href="https://youtu.be/Wil6crOV6DU" target="_blank" rel="noopener">Link</a>. ... Alright ... I have no idea what this is about ... but at least any art work that convey something (concept) are (might) still a lot better than art work that only produce stimulation and convey nothing like <a href="https://youtu.be/My2FRPA3Gf8" target="_blank" rel="noopener">this shit</a>.</li>    <li><strong>{ Networking for Web Developers }-{ Coding Tech }:</strong> <a href="https://youtu.be/ek6XowzWQoM" target="_blank" rel="noopener">Link</a>. No time to read all of it. <a href="https://youtu.be/ek6XowzWQoM?t=1437" target="_blank" rel="noopener">[ 23:57 ]-[sending IP traffic to remote device ]</a>, I had this question before, if the different side (port) of a router, have same ip address and MAC address, or differnt ones? I still don't know it yet.</li>    <li><strong>The Amazon monopoly and the problem with Jeff Bezos' business model:</strong> <a href="https://youtu.be/pBffKzWECUQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Game ) { Starcraft }-[ Has vs Nice 四強賽 第一場 WCS 蒙特婁 台港澳日挑戰賽 ]:</strong> <a href="https://youtu.be/1na7YZ-QVN8" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-03<a id="190403m003704"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-03.svg" alt="2019-04-03">  </div>  <ol>    <li><strong>( Webdev ) [ Why do web developers support older browsers? ]-{ Quora }:</strong> <a href="https://www.quora.com/Why-do-web-developers-support-older-browsers?share=1" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Webdev ) Why support older browsers? Don't make assumptions for why they don't upgrade:</strong> <a href="https://dev.to/zellwk/why-support-older-browsers-5nm" target="_blank" rel="noopener">Link</a>. I keep this because I found comments are more interesting.</li>    <li><strong>( CSS ) ( PostCSS ) Some things you may think about PostCSS, and you might be wrong:</strong> <a href="http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/" target="_blank" rel="noopener">Link</a>. Also see <a href="https://cssnext.github.io/" target="_blank" rel="noopener">{ PostCSS-cssnext }</a>, a plugin for <code>PostCSS</code> that makes you can use future CSS. Still, I think not all CSS4 syntax is possible, like <code>Grid</code> layout - --{ For now cssnext doesn't have a runtime and this thing cannot be handled by a "simple" transformation. }--, from <a href="https://github.com/MoOx/postcss-cssnext/issues/133" target="_blank" rel="noopener">here</a>.</li>    <li><strong>( Javascript ) { Async function }-[ MDN ]:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">Link</a>. Please test the second example yourself (contains 5 different cases) to make sure you really understand it.</li>    <li><strong>( Javascript ) Understanding { Generator Function } in ES6:</strong> <a href="https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5" target="_blank" rel="noopener">Link</a>. You can see one of the example he convert <code>.then().then()</code> version to <code>Generator Function</code> version.</li>    <li><strong>(Music) Many times music cover version is better than original version:</strong>      <ol>        <li><strong>( Music ) [ Piano cover from DooPiano ]-{ 워너원 (Wanna One) }-{ 집 (One's Place) } :</strong> <a href="https://youtu.be/B3Nf_9bPzYw" target="_blank" rel="noopener">Link</a>. I later found how pleasant DooPiano's version is (the cover), after when I found how "terrible" <a href="https://youtu.be/bXOQ9wtQQH0" target="_blank" rel="noopener">original version</a> is, this is not the first time (I found cover is more preferable) and this link is just an example.</li>        <li><strong>( Music ) [ Cover from ThePianoGuys ]-{ Swedish House Mafia }-{ Don't You Worry Child }:</strong> <a href="https://youtu.be/1gCulUDvALM" target="_blank" rel="noopener">Link</a>, and <a href="https://youtu.be/1y6smkh6c-0" target="_blank" rel="noopener">original version</a>.</li>      </ol>    </li>    <li><strong>( Music ) [ Cover from ThePianoGuys ]-{ Phillip Phillips }-{ Home }:</strong> <a href="https://youtu.be/aF-Z1A0ujlg" target="_blank" rel="noopener">Link</a>, and <a href="https://youtu.be/HoRkntoHkIE" target="_blank" rel="noopener">original version</a>.</li>    <li><strong>( Music ) { Hans Zimmer }-[ live ]-{ Now we are free (Gladiator) }-[ Amazing Czarina Russel ]:</strong> <a href="https://youtu.be/Y1UiD2sxoWo" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Hans Zimmer }-{ Now We Are Free }-[ movie Gladiator soundtrack ]:</strong> <a href="https://youtu.be/xbHPTPUpQ1I" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Now We Are Free }-[ live in Berlin 2016 ]-[ Gregorian (feat. Amelia Brightman) ]:</strong> <a href="https://youtu.be/8Y0RZA7jUMM" target="_blank" rel="noopener">Link</a>. Sharp but soft, hard to tell why.</li>    <li><strong>( Music ) { Hans Zimmer }-[ live in Prague ]-{ The Da Vinci Code }:</strong> <a href="https://youtu.be/YMDkw9SjEFc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Drawing ) Astronaut Artwork with Adobe Illustrator and Photoshop:</strong> <a href="https://youtu.be/YXwHHF-5iUs" target="_blank" rel="noopener">Link</a>. Same conclusion - Always from rough to fine, loose to focus, normally not reversed.</li>    <li><strong>( Video ) { 郭文贵 }-[ 2019年3月21日班农先生在意大利罗马《信息算法》主题演讲（中英文字幕版） ]:</strong> <a href="https://youtu.be/6kWpAk7K5gw" target="_blank" rel="noopener">Link</a>. Have no time to watch, not today.</li>    <li><strong>( Video ) 直擊柯P台大7D病房！加護病房看透一切 從白袍力量談人生哲學 看板人物:</strong> <a href="https://youtu.be/uD_BLkZky00" target="_blank" rel="noopener">Link</a>. We are so easy to forget history, if we don't review them constantly.</li>  </ol></div><div class="h2">  <h2>2019-04-04<a id="190404m005738"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-04.svg" alt="2019-04-04">  </div>  <ol>    <li><strong>Modularized the time (of future planning) just like modularized the code:</strong>      <ol>        <li><strong>( Webdev ) [ 100 days of code frontend ]-[ curriculum ]-{ nas5w }:</strong> <a href="https://github.com/nas5w/100-days-of-code-frontend/blob/master/README.md" target="_blank" rel="noopener">Link</a>. If you have spent any amount of time in the past trying to learn web development or a similar skill, you have likely exprienced going down a <strong>rabbit hole</strong> on any one particular topic. This repository aims to assign a <strong>certain number of days</strong> to each technology and encourages you to move to the next once that number of days is up.</li>        <li><strong>The 12 Week Year:</strong> <a href="https://youtu.be/FxvdEqRJEMU" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>My conclusion is:</strong> Modularized the time (of future planning) just like modularized the code, so I can manage it.</li>      </ol>    </li>    <li><strong>I'm trying to find the first hand source about { AIT } stated that USA have Marines deployed in Taiwan:</strong>      <p><a href="https://www.thenewslens.com/article/116738" target="_blank" rel="noopener">The news</a> from <code>The News Lens</code> said { American Institute in Taiwan (AIT) } stated that "USA have Marines deployed inside AIT itself (in Taiwan)", but I don't found any <strong>first hand source</strong> about this. This is what I asked other people in the same article:</p>      <pre>        <code>請問一下，這篇關於"美國在台協會（AIT） 的發言人 孟雨荷 說 AIT 現址從2005年起就有包括美軍陸戰隊在內的現役軍人駐守"的內容的來源 (第一手資訊) (source)，在哪裡可以找到？我翻遍AIT 的 官網，Facebook, Youtubehttps://www.ait.org.tw/zhtw/https://www.facebook.com/AIT.Social.Media/https://www.youtube.com/user/AmericanInstituteTW/videos，還是都找不到第一手資訊，有誰可以告訴我關於這段話的第一手資訊在哪裡？是不是只是 "中央通訊社" 採訪 (?) 的內容而已？我其實對新聞媒體的運作方式一無所知，只是想知道怎麼在必要時候自己爬到第一手資訊而已。        </code>      </pre>      <p>The background of this news is, China military jet crossed the <a href="https://zh.wikipedia.org/wiki/%E8%87%BA%E7%81%A3%E6%B5%B7%E5%B3%BD%E4%B8%AD%E7%B7%9A" target="_blank" rel="noopener">Taiwan Strait Midline</a> just for provocation, and USA government include <a href="https://twitter.com/AmbJohnBolton" target="_blank" rel="noopener">John Bolton</a> (Assistant to the President for National Security Affairs (NSA)) state that they opposes this kind of military provocations.</p>      </li>    <li><strong>{ TED Talks }-[ Don't neglect your emotions. Express them — constructively! ]-{ Artūrs Miksons }:</strong> <a href="https://youtu.be/iWlcAylOVNU" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ TED Talks }-[ How I'm making bricks out of ashes and rubble in Gaza ]-{ Majd Mashharawi }:</strong> <a href="https://youtu.be/TdZTvzMPa6s" target="_blank" rel="noopener">Link</a>. Keyword - women, building blocks, electricity. Also see <a href="https://youtu.be/ssoZUSOgELk?t=623" target="_blank" rel="noopener">[ video ]-[ Nowhere Safe in Gaza: Rockets and Revenge (Dispatch 2) ]</a> and more "Dispatch" of <code>Vice News</code> from <a href="https://www.youtube.com/playlist?list=PLw613M86o5o4p6n-M6A_3PU0OQbB4Hgwp" target="_blank" rel="noopener">this play list</a>.</li>    <li><strong>( Video ) { 黃國昌 }-[ 馬自達爆漿熄火 也需要戰神質詢？ ]-{ 國會調查兵團 }:</strong> <a href="https://youtu.be/tjyAxEzd-kg" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( CSS ) [ A couple of cool things you can do with CSS position sticky ]-{ Kevin Powell }:</strong> <a href="https://youtu.be/8TyoihVGErI" target="_blank" rel="noopener">Link</a>. Maybe I can apply this design on my blog? Since my blog,, <code>log table</code> is "long", I can use this design to make my h2 headings more readable?</li>    <li><strong>( Javascript ) ( Discussion ) Javascript had it's bad part and good part, make it do what is suppose to do:</strong> This is my comment from <a href="https://newtoypia.blogspot.com/2019/02/puppeteer.html?showComment=1554368302100#c4875717660352917856" target="_blank" rel="noopener">{ 玩具烏托邦  }-[ 網頁爬蟲終極武器 puppeteer ]:</a>      <blockquote>        <p>我什麼都不懂，愚人一個，不過我的一些小小看法是，如果嘗試某些方式試圖解決某個問題很多次後，還是無解，或是有解但是仍然覺得路很崎嶇難行，可能就是代表此路本來就不應該走 (一開始就走錯了)，而要改走別的路，不要硬闖 (即使硬要這麼走還是可以)。</p>        <p>讀本地檔 (比如讀 .json) 之所以不行，是因為 http 本來就是設計運作在 server-client 這樣的架構上的，所以無論如何一定要有一個 server, 手機上要用 Javascript 讀檔就裝一個 web server 在手機上。我之前也是在想這個問題，後來放棄了，直接接受 javascirpt 就是要運作在網路的環境下的語言，所以即使是這麼基本的讀檔，還是要架一個 webserver，request from webserver.</p>        <p>非同步 (Async) 就不講了，前面有人講過，這也是基於 http/網路環境 本來就是一個 async 的環境，所以用 async 理所當然 (Event Loop 也是？)。之前我想要用 php 寫出一個 script，可以產生對話的效果 (程式跑起來後會問一些問題，我回答它，然後他會根據此回答做出不同的結果) (這常常應用在 bash script 上)，但是我不想要它跑在 command line 的介面上，而是 browser (web page) 上，而我一直想不出方法可以讓程式 (server) 在問出一個問題後中斷，等待我回答問題 (client)，然後再繼續 resume 執行 (server)，我怎麼想就是想不到怎麼做出這麼簡單的效果。後來我明白了，我當初的思維一直停留在 Block-IO 上，而 http 是 async 的，而且是 Stateless 的，Block-IO 基本上不可行，而 Stateful 本身是很糟糕的 design pattern (在 website scale up 後)。所以可能要用 javascript 的 async 解這個問題。這就是一該始思路就走錯了。</p>        <p>不過 Javascript 難學是真的，任何產品 UX/UI 設計的不好用起來就很不直覺，如果產品的 UX/UI 在設計時，沒有很努力的考量到一般人的習慣和常規，那用起來就不直覺 (使用者沒辦法不看說明書，用猜就猜出來下一步要幹麻)，然後就會感覺很複雜。所謂要讓某件事 "簡單" 有個要素，就是不能 "出乎意料"。 就好像我們看到常見的播放按鈕比如 O &lt;&lt; &lt; || &gt; &gt;&gt; 口   ，這些符號已經被一般人接受，習慣，內化及直覺化。如果產品的界面按照這些符號設計，用起來就很直覺因為使用者想都不用想，按下去的結果跟他們 "猜測" 的一模一樣，他們潛意識就會覺得 "好用"。但 Javascript 就不是這樣，當太多 "出乎意料" 的規則，語法，pitfall, nuance, quirk, special cases ... 要記時，就會感覺很複雜，難學，因為不符合直覺，不符合直覺有辦法推理的概念，沒幾次就忘了，然後又要再複習一遍 (應該是好幾遍，因為永遠記不起來)，所以 javascript 在這點上設計得很糟糕，非常非常糟糕，python 相比之下好多了，看了 1 2 3，就大概猜得出 4 5 6 要幹麻。</p>        <p>所以結論就是，我會認清 Javascript 的優勢在哪，劣勢在哪。優勢多加利用，劣勢就避免 (包括那糟糕的邏輯運算子)。之前好像有人說 Javascript 上可以跑 deep learning 之類的東西，我就想，也許吧，但這好像是 python 或其他低階語言擅長的，我不認為有 silver bullet 可以適用於所有領域.</p>      </blockquote>    </li>    <li><strong>( Video ) { 爸媽囧很大 } - 棄高薪和高位,孩子你在想什麼?:</strong> <a href="https://youtu.be/UKYHomuYeHA" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-05<a id="190404m231530"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-05.svg" alt="2019-04-05">  </div>  <ol>    <li><strong>Lean Production, and "what is Engineering?":</strong>      <ol>        <li><strong>{ Coding Tech } - Taking Back "Software Engineering", Craftsmanship is not Enough:</strong> <a href="https://youtu.be/SkUyE0Z4pow?t=338" target="_blank" rel="noopener">Link</a>. Comparing <code>Mass Production</code> and <code>Lean Production</code>, and talking about <a href="https://youtu.be/SkUyE0Z4pow?t=879" target="_blank" rel="noopener">what is Engineering?</a>.</li>        <li><strong>[ Wikipedia ]-{ Lean Production }:</strong> <a href="https://en.wikipedia.org/wiki/Lean_manufacturing" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Slideshare } - lean-production vs mass-production:</strong> <a href="https://www.slideshare.net/smichelot/lean-production-vs-mass-production" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>My conclusion:</strong> So the rule of <u>collaboration between workers</u> and <u>adapting</u> in the concept,, Lean Production, is so much against the rule of <u>one responsibility</u> and <u>do one thing (only) and do one (that) thing well</u> in the concept,, keep [ low couple]-[ high cohesion ]. Make me think that maybe not a good idea to always 100% follow that rule (keep [ low couple]-[ high cohesion ]), it might not be a good idea always 100% follow <code>MVC design pattern</code>. // And one more benefit about Lean production is, it solves the problem of <a href="https://en.wikipedia.org/wiki/Marx%27s_theory_of_alienation" target="_blank" rel="noopener">alienation</a> that Marx's theory talks about, we are human, we are not machine or a component of a module.</li>      </ol>    </li>    <li><strong>( Javascript ) { Modules }:</strong> A was so confused about the usage of <code>default</code>, <code>*</code>, <code>... as ...</code>, even <code>import ... from ...</code>. After read <a href="https://stackoverflow.com/questions/45697628/es6-import-as-alias-vs-import-alias#45697718" target="_blank" rel="noopener">this helpful article</a>, <a href="https://stackoverflow.com/questions/39282253/how-can-i-alias-a-default-import-in-javascript" target="_blank" rel="noopener">this article</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">{ MDN }-{ import }</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noopener">{ MDN }-{ export }</a> and many try and error, I finally get the rules to use it. (The concept itself is not hard to understand, but the quirk of rules is hard to guess). // So something like <code>import {default as bar, foo} from "../fooBar.js";</code> (invoke with <code>bar.smth</code> and <code>foo.smth</code>)<strong>, or</strong> <code>import * as foobarrr from "../fooBar.js";</code> (invoke with <code>foobarrr.default.smth</code> and <code>foobarrr.foo.smth</code>)<strong>, or</strong> <code>import foobarrr from "../fooBar.js";</code> (invoke with <code>foobarrr.smth</code>) is all doable.</li>    <li><strong>( Javascript ) { for (... in ...) } vs { for (... of ...) }:</strong> Notice the last example of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) Real ATC, Southwest 1380 engine failure at 2018-04-17:</strong> <a href="https://youtu.be/FkVTdvcghHc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) Real ATC, Southwest B737 MAX engine failure during takeoff:</strong> <a href="https://youtu.be/frHk1TBRWK4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) 館長, 4/9號確定"賴清德"要來與館長做直播:</strong> <a href="https://youtu.be/k8MnJE2RRxI" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Norwegian cruise engine failure accident and rescue, 1373 passengers:</strong> <a href="https://youtu.be/vH9l_ezKAfk" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Game ) { Hearts of Iron 4 }-[ 荷蘭篇(part03)最後一戰 END ]:</strong> <a href="https://youtu.be/4_jS3mzLd9M" target="_blank" rel="noopener">Link</a>. I had play HOI2 long time before, but now I don't have much time to play any game again, what a pitty.</li>    <li><strong>( Music ) { Baba Yetu }-{ Christopher Tin }:</strong>      <ol>        <li><strong>( Music ) { Baba Yetu }-[ United States Navy Band ]:</strong> <a href="https://youtu.be/rKWQQQjAEBU" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) { Baba Yetu }-{ Christopher Tin }-[ official music video ]:</strong> <a href="https://youtu.be/IJiHDmyhE1A" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Music ) { Baba Yetu }-{ Alex Boye }:</strong> <a href="https://youtu.be/vsINANZ6Riw" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Music ) { Paradise (Peponi) } - { ThePianoGuys } cover - ft. { Alex Boye }:</strong> <a href="https://youtu.be/AWfoI5cwXMs?t=243" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Elektronomia }-{ Sky High } [ NCS Release ]:</strong> <a href="https://youtu.be/TW9d8vYrVFQ" target="_blank" rel="noopener">Link</a>. Focused, help for study.</li>    <li><strong>( Music ) { Girls Generation }-{ Catch Me If You Can }:</strong> <a href="https://youtu.be/sSCmafwLKE4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Weki Meki  }-{ I don't like your Girlfriend }:</strong> <a href="https://youtu.be/z6_FTiF0pk8" target="_blank" rel="noopener">Link</a>. The rhythm is so strong and special, it is <strong>firm</strong> where it needs to be <strong>firm</strong> and is <strong>soft</strong> where it needs to be <strong>soft</strong>, <strong>short detail</strong> rythm and <strong>long background</strong> rythm <strong>mixing together</strong> [ perfectly ]-[ seamlessly ], I like the dance. Also see <a href="https://youtu.be/RXOpH8bCFfs" target="_blank" rel="noopener">Yoojung cute & dance cover moment</a>, the dance can tell something, the feeling and rythm is "accurate" and in good direction.</li>    <li><strong>( Music ) { f(x) }-{ 4 Walls }:</strong> <a href="https://youtu.be/eSpokjDB3cQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Girl's Day }-{ Oh! My God }:</strong> <a href="https://youtu.be/04FdisNU3vw" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-06<a id="190406m003643"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-06.svg" alt="2019-04-06">  </div>  <ol>    <li><strong>( Video ) Hospice - { 最後這條路｜與其等死，我選擇付出｜三之二 } - { TheNewsLens }:</strong> <a href="https://youtu.be/i193RDpRy30" target="_blank" rel="noopener">Link</a>. Keep watching the remaining part.</li>    <li><strong>Building A Creative Career - { Coding Tech }:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/byYDuC8lWqY" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>15:54:</strong> <a href="https://youtu.be/byYDuC8lWqY?t=954" target="_blank" rel="noopener">Link</a>. Be <u>good</u> first then be <u>original</u>. For example play covers of you favorite music before writing your own song.</li>        <li><strong>21:13:</strong> <a href="https://youtu.be/byYDuC8lWqY?t=1273" target="_blank" rel="noopener">Link</a>. If you are stuck, you are probably missing a person (that can make a huge improve for you in a very short time). It's often a person that unlocks the next door, a next relationship, for you. Sometimes it's just the right book to pickup.</li>        <li><strong>26:11:</strong> <a href="https://youtu.be/byYDuC8lWqY?t=1571" target="_blank" rel="noopener">Link</a>. Your career will have many doors (many entries, instead of just typical one people thinks). Keep an eye open for them.</li>      </ol>    </li>    <li><strong>( Video ) { TED Talks } - Your brain hallucinates your conscious reality - { Anil Seth }:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/lyu7v7nWzfo" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>08:24:</strong> <a href="https://youtu.be/lyu7v7nWzfo?t=504" target="_blank" rel="noopener">Link</a>. <code>Hallucination</code> is uncontrolled <code>perception</code>, <code>perception</code> is controlled <code>hallucination</code>.</li>        <li><strong>08:44:</strong> <a href="https://youtu.be/lyu7v7nWzfo?t=524" target="_blank" rel="noopener">Link</a>. If we agree with our <code>hallucination</code>, we call it "reality".</li>        <li><strong>10:56:</strong> <a href="https://youtu.be/lyu7v7nWzfo?t=656" target="_blank" rel="noopener">Link</a>. ... is enough evidence for the brain to make it's best guess the <strong>fake hand</strong> is in fact a part of the body.</li>      </ol>    </li>    <li><strong>( Javascript ) The Evolution of Async JavaScript: From Callbacks, to Promises, to Async/Await:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/gB-OmN1egV8" target="_blank" rel="noopener">Link</a>. The text (article) version of this video is <a href="https://tylermcginnis.com/async-javascript-from-callbacks-to-promises-to-async-await/?no-cache=1" target="_blank" rel="noopener">here</a>.</li>        <li><strong>35:17:</strong> <a href="https://youtu.be/gB-OmN1egV8?t=2117" target="_blank" rel="noopener">Link</a>. Notice the <code>resolve()</code> callback (inside Promise constructor),, you can not only pass a string to it, but also an object. So with this you can pass some result you get in "first stage" (first Promise), to be the "fuel" to feed the "second stage" (second Promise).</li>        <li><strong>38:39:</strong> <a href="https://youtu.be/gB-OmN1egV8?t=2319" target="_blank" rel="noopener">Link</a>. From <code>Promise</code> to <code>Async function</code>. Notice, <code>Async function</code> itself (not the resolved value retrieve from <code>await</code>) will return a <strong><code>promise</code> object</strong>, and if any <code>await</code> code inside this <code>async function</code> been rejected, the <code>async function</code> will immediately stop the execution of remaining code (remaining code of this <code>async function</code>) and <strong>return a <code>promise</code> object</strong> that could be catch by <code>catch()</code>, put it simple with example code - <code>anAsyncFunction().catch(doSomethingElseAfterAnyAwaitFoundRejected);</code>.</li>        <li><strong>My conclusion about chainning:</strong> So chained <code>promiseObj.then().catch() ...</code> is possible, like this <code>returnANewPromiseObj().then(ifResolve1).catch(ifReject1).then(ifResolve2).catch(ifReject2);</code> (which <u>ifResolve1</u>, <u>ifReject1</u>, <u>ifResolve2</u>, <u>ifReject2</u>) is all callback function, and <u>ifResolve1</u>, <u>ifReject1</u> will always return a second (new) Promise object. Or you can use like this - <code>returnANewPromiseObj().then(ifResolve1).then(ifResolve2).catch(ifReject1And2);</code>, to merge all rejected actions together.</li>      </ol>    </li>    <li><strong>( Javascript ) Why I have to use { finally } block when I can just put these codes behind { catch }?:</strong> <a href="https://stackoverflow.com/questions/18251156/uses-of-the-finally-statement" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) { Fetch API }:</strong>      <ol>        <li><strong>{ Fetch() } - { MDN } - "The Can Store" example:</strong> <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data#A_more_complex_example" target="_blank" rel="noopener">Link</a>. A nice, simple, but yet complete example, to run through not only Fetch API, but how to write a more elegant and easy-to-manage code.</li>        <li><strong>{ Fetch() } - { MDN } - using Fetch:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Fetch() } { resolves } even if http status code is 404?:</strong> <a href="https://stackoverflow.com/questions/39297345/fetch-resolves-even-if-404#39297738" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Fetch() } request timeout?:</strong> <a href="https://stackoverflow.com/questions/46946380/fetch-api-request-timeout#46946573" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ URL.createObjectURL() } - 不用後端，前端便能產生獲取指定物件的網址:</strong> <a href="https://medium.com/@kf99916/html5-%E7%A5%9E%E5%A5%87%E7%9A%84-object-url-%E4%B8%8D%E7%94%A8%E5%BE%8C%E7%AB%AF-%E5%89%8D%E7%AB%AF%E4%BE%BF%E8%83%BD%E7%94%A2%E7%94%9F%E7%8D%B2%E5%8F%96%E6%8C%87%E5%AE%9A%E7%89%A9%E4%BB%B6%E7%9A%84%E7%B6%B2%E5%9D%80-6df283d58505" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Javascript ) Check if an element is present in an array:</strong> <a href="https://stackoverflow.com/questions/7378228/check-if-an-element-is-present-in-an-array" target="_blank" rel="noopener">Link</a>. Use <code>indexOf()</code>, or <code>includes()</code>. If your array have object elements (instead of string elements), and you want to further find inside that object (see <a href="https://stackoverflow.com/questions/39206522/find-if-an-element-exists-in-javascript-array" target="_blank" rel="noopener">this data structure example</a>), you can use <code>myArray.find((o) => o.hasOwnProperty("targetFindingProperty"))</code>.</li>    <li><strong>( Video ) { She's Danni } - Weekly Vlog 36 一个艰难的决定:</strong> <a href="https://youtu.be/OccI8CK4G7I" target="_blank" rel="noopener">Link</a>. I'm a bit like this kind of personality, the rationality and principle side.</li>    <li><strong>( Video ) { The Academy Irish Dance Company } - Dublin Irish Festival 2016:</strong> <a href="https://youtu.be/tEJeaC5x76I" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-07<a id="190407m004955"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-07.svg" alt="2019-04-07">  </div>  <ol>    <li><strong>( Video ) 大腕、高官、演員全揪出！南韓性侵 #MeToo 火在燒 (multiple influential sexual scandal in South Korea):</strong> <a href="https://youtu.be/xGMGZHl8bMY" target="_blank" rel="noopener">Link</a>. This make me think about the story of <strong><a href="https://en.wikipedia.org/wiki/Elizabeth_Holmes" target="_blank" rel="noopener">Elizabeth Holmes</a></strong>, founder and former CEO of company <strong>Theranos</strong>. I learn this again and again - when we (I) believe something, we should <strong>always believe by objective evidence and logic, not how "trusty" the story, speech, feelings seems like.</strong> latter one often been exploited by vicious and high intelligent people who know (how to play) psychology very well, they can build a long <strong>vivid</strong> story, while no any word is true, in front of you in real time. But after the scandal been revealed, you will <strong>stunned</strong> not by the bad thing itself, <strong>but</strong> about how these people are able to tell (and mantain, evolve) such a story that totally different and <strong>conflict and contrary</strong> to their behavior and their real personality (perhaps these story are too real that even the liar themselves start to believe these lies too). These kind of case extend even to <strong>religious, charities, judiciary, medical</strong> ... (yeah, unbelievable isn't it?) and they are not rare case in these field, and it is too hard to believe it is ture because the place it happens, the roles they are, the story they made, are so conflicting.</li>    <li><strong>( Video ) ( Gamming ) 外掛種類大全, 你知道遊戲外掛都有哪些嗎? (Game cheat plugin):</strong> <a href="https://youtu.be/5v77U5qKQfI" target="_blank" rel="noopener">Link</a>. Not talking the ethics issue here, but the creativity of problem solving of these nerd (who design the cheat plugin) is indeed somehow hilarious.</li>    <li><strong>( Javascript ) ( Pitfall ) Example of a Javascript Closure: { setTimeout() } Inside a { For Loop } :</strong> <a href="http://brackets.clementng.me/post/24150213014/example-of-a-javascript-closure-settimeout-inside" target="_blank" rel="noopener">Link</a>. OMG, I step on the pitfall stupid like this, even I learned this before.</li>    <li><strong>( Javascript ) { Vue JS } crash course - 2019 - { Traversy Media }:</strong> <a href="https://youtu.be/Wy9q22isx3U" target="_blank" rel="noopener">Link</a>. Almost finished it. Now I'm start to plan to keep moving to learn new things.</li>    <li><strong>( Javascript ) { FormData } object:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) Putting trailing commas behind last object, function argument ...:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Elektronomia }-{ Sky High } [ NCS Release ]:</strong> <a href="https://youtu.be/TW9d8vYrVFQ" target="_blank" rel="noopener">Link</a>. Focused, help for study.</li>    <li><strong>( Video ) ( Game ) { Age of empire 2 } - { Viper } vs China:</strong> <a href="https://youtu.be/Z1u4yC_xbOw" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-08<a id="190408m001819"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-08.svg" alt="2019-04-08">  </div>  <ol>    <li><strong>Thinking about "incremental learning" vs "iterative learning". Thinking about stick with a "curriculum" for learning webdev:</strong>      <ol>        <li><strong>"Incremental" vs "iterative":</strong> <a href="https://duckduckgo.com/?q=incremental+vs+iterative&t=ffab&ia=images&iax=images" "" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>( Webdev ) Welcome to the { freeCodeCamp } curriculum:</strong> <a href="https://learn.freecodecamp.org/" target="_blank" rel="noopener">Link</a>. Ok, I decide I will stick with curriculum of freecodecamp.org start from today, it is a complete roadmap/planning even including Coding Interview Preparation course. But I don't have 1,600 Hour, I just have 3 month, so I will pick the most crucial topic I really should know first, and learning iterative instead of incremental. If I have time later I will come back to learn something more advanced like data structure, algorithm, security ... </li>        <li><strong>( Webdev ) [ 100 days of code frontend ]-[ curriculum ]-{ nas5w }:</strong> <a href="https://github.com/nas5w/100-days-of-code-frontend/blob/master/README.md" target="_blank" rel="noopener">Link</a>. If you have spent any amount of time in the past trying to learn web development or a similar skill, you have likely exprienced going down a <strong>rabbit hole</strong> on any one particular topic. This repository aims to assign a <strong>certain number of days</strong> to each technology and encourages you to move to the next once that number of days is up.</li>        <li><strong>( Webdev ) { DevelopIntelligence } - curriculum - { Vue.js }:</strong> <a href="https://www.developintelligence.com/catalog/web-development-training/vue/introduction-to-vuejs" target="_blank" rel="noopener">Link</a>. Might be useful to find out more content <strong>not only Vue</strong>. </li>      </ol>    </li>    <li><strong>My rough schedule and estimation (keep changing):</strong>      <ol>        <li><strong>Total available time:</strong> 90 days.</li>        <li><strong>Javascript fundamental:</strong> ?? days.</li>        <li><strong>JQuery:</strong> ?? days.</li>        <li><strong>Vue.js:</strong> ?? days.</li>        <li><strong>Nodejs:</strong> ?? days.</li>        <li><strong>Express.js:</strong> ?? days.</li>        <li><strong>Git and deployment:</strong> ?? days.</li>        <li><strong>Database:</strong> ?? days.</li>        <li><strong>Algorithm and data structure:</strong> ?? days.</li>        <li><strong>Webpack:</strong> ?? days.</li>        <li><strong>{ Less } ( CSS pre-processor ):</strong> ?? days.</li>        <li><strong>Side project 1:</strong> ?? days.</li>        <li><strong>Side project 2:</strong> ?? days.</li>        <li><strong>Side project 3:</strong> ?? days.</li>        <li><strong>Side project with Woody for visually impaired people:</strong> ?? days.</li>        <li><strong>Resume:</strong> ?? days.</li>      </ol>    </li>    <li><strong>( Politic ) President { Barack Obama } went to Africa, and make first strong criticism about { Trump }:</strong> <a href="https://youtu.be/Khq13Nf6NI4" target="_blank" rel="noopener">Link</a>. Barack Obama went to Kenya after retired from president. He said (imply) Trump is a lier, nowadays politician lies and they don't get shame, this didin't happens before. Yeah this is so true, something like Trump "don't believe" the <strong>Global Warning</strong> is the [ biggest ]-[ most reliable ] [ evidence ]-[ clue ]-[ thread ] I can tell if a politician like him is lying. Global Warning is a fact baced by science, it is undoubtable fact, it is objective.</li>    <li><strong>( Video ) { 四端紅人會 } - 敏實集團董事長 - 秦榮華 - 20180406:</strong> <a href="https://youtu.be/vmvYtcJoyks" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Coldplay } - { Something Just Like This } - piano cover - by Ray Ma:</strong> <a href="https://youtu.be/o8PSEluYCzA" target="_blank" rel="noopener">Link</a>. Very steady and predictable feeling, suit for studying.</li>  </ol></div><div class="h2">  <h2>2019-04-09<a id="190409m135501"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-09.svg" alt="2019-04-09">  </div></div><div class="h2">  <h2>2019-04-10<a id="190410m142437"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-10.svg" alt="2019-04-10">  </div></div><div class="h2">  <h2>2019-04-11<a id="190411m135329"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-11.svg" alt="2019-04-11">  </div></div><div class="h2">  <h2>2019-04-12<a id="190412m151033"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-12.svg" alt="2019-04-12">  </div>  <ol>    <li><strong>( Video ) 【不止遊戲】遊戲中騎士的板甲真的那麼靈活和堅實嗎？ (Plate armour of knight):</strong> <a href="https://youtu.be/CmSBJywWlqI" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-13<a id="190413m023332"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-13.svg" alt="2019-04-13">  </div>  <ol>    <li><strong>( Vue.js ) { Vuemastery } - style and class binding:</strong> <a href="https://www.vuemastery.com/courses/intro-to-vue-js/class-&-style-binding" target="_blank" rel="noopener">Link</a>. So style and class attribute in html element, can not only bind to a value, but also an <strong>object</strong> (or multiple object). Also, you can apply multiple bindings on same style and class attribute, for example give a div element class <u>apple</u> and class <u>bear</u> at the same time.</li>    <li><strong>( Vue.js ) { Vuemastery } - Computed Property:</strong> <a href="https://www.vuemastery.com/courses/intro-to-vue-js/computed-properties" target="_blank" rel="noopener">Link</a>. Property that you use it as same as other normal property, but it is more efficient, so browser don't have to start over to exectue method everytime something changed. // I think I get what Vue ,, Computed Property, is for, you want to define a property, but the value of that property is not fixed, but based on some calculation or return of some codes.</li>    <li><strong>( Vue.js ) { Vuemastery } - { v-model }:</strong> <a href="https://www.vuemastery.com/courses/intro-to-vue-js/forms" target="_blank" rel="noopener">Link</a>. Unlike <code>v-bind</code> is one-way data binding (from parent component to child component), <code>v-model</code> is two-way data binding. (Not sure if <code>v-model</code> = <code>v-bind</code> + <code>emit</code>).</li>    <li><strong>( Vue.js ) { v-if }, { v-else }, { v-else-if }, nested { v-if }, { v-is }, { v-show }:</strong> <a href="https://flaviocopes.com/vue-dynamically-show-components/" target="_blank" rel="noopener">Link1</a>, <a href="https://vuejs.org/v2/guide/conditional.html" target="_blank" rel="noopener">Link2</a>.  Those are very important basic functionality.</li>    <li><strong>( Vue.js ) Object changed detection caveat:</strong> <a href="https://vuejs.org/v2/guide/list.html#Object-Change-Detection-Caveats" target="_blank" rel="noopener">Link</a>. --{ Due to limitations in JavaScript, Vue cannot detect the following changes to an array ... }--, --{ Again due to limitations of modern JavaScript, Vue cannot detect property addition or deletion ... }--.</li>  </ol></div><div class="h2">  <h2>2019-04-14<a id="190414m163918"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-14.svg" alt="2019-04-14">  </div>  <ol>    <li><strong>( Music ) ( Classical ) { Tiffany Poon } - Bach Partita No.2 in C Minor, BWV 826:</strong> <a href="https://youtu.be/wdN6mLJUTig" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) 【不止遊戲】「不準後退一步！」二戰蘇聯第227號命令真相 (how Soviet Union deal with deserter):</strong> <a href="https://youtu.be/lJ7mwgEX8hU" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-15<a id="190415m020723"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-15.svg" alt="2019-04-15">  </div>  <ol>    <li><strong>( Vue.js ) { Watcher }:</strong> <a href="https://youtu.be/OEitxLemE_g" target="_blank" rel="noopener">Link</a>. This is how you monitor the data (any variable), and do something. You monitor the data (any variable) and if they changed, it invoke a function immediately. // Also see { Computed Property }.</li>    <li><strong>( Vue.js ) { Created } hook:</strong> See <a href="https://youtu.be/OEitxLemE_g?t=450" target="_blank" rel="noopener">this time point</a>. A function will executed when component is rendered?</li>    <li><strong>( Javascript ) Does Javascript Passing by value or passing by reference?:</strong> See <a href="https://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language" target="_blank" rel="noopener">Link1</a>, <a href="https://medium.com/@naveenkarippai/learning-how-references-work-in-javascript-a066a4e15600" target="_blank" rel="noopener">link2</a>, it is a bit complex in background of how it really works, but there is only 3 ruels you need to remember, the primitive types (number, string, etc.) case, object case, redeclare object structure case. Also notice array is object too.</li>    <li><strong>( Javascript ) ( Fetch API) ( http ) { Cross Origin Resource Sharing (CORS) } problem:</strong>      <ol>        <li><strong>Cross Origin Resource Sharing (CORS) - { MDN }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">Link</a>. <code>Same Origin Policy</code>. This is why you see error message <code>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://images.dog.ceo/breeds/hound-basset/n02088238_1731.jpg. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).</code> in <code>web console</code> when you access blob data from different Origin in front-end. // So the source problem is <code>Same Origin Policy</code>, if the server didn't have set up <code>CORS</code> response header, then your client side can't request this kind of <code>Origin</code> with <code>fetch(myUrl, {mode: "cors"})</code>.</li>        <li><strong>{ Access-Control-Request-Headers } and { Preflight request }:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers" target="_blank" rel="noopener">Link1</a>, <a href="https://developer.mozilla.org/en-US/docs/Glossary/preflight_request" target="_blank" rel="noopener">lin2</a>.</li>        <li><strong>{ Access-Control-Allow-Origin } header and { JSON padding (JSONP) } :</strong> <a href="https://medium.freecodecamp.org/use-jsonp-and-other-alternatives-to-bypass-the-same-origin-policy-17114a5f2016" target="_blank" rel="noopener">Link</a>. Bypass the <code>Same Origin Policy</code>.</li>        <li><strong>Add Content-Type in header will cause a OPTION request:</strong> <a href="https://github.com/github/fetch/issues/143" target="_blank" rel="noopener">Link</a>. So the source problem is still <code>Same Origin Policy</code>, if the server didn't have set up <code>CORS</code> response header, then your client side can't request this kind of <code>Origin</code> with <code>fetch(myUrl, {mode: "cors"})</code>..</li>        <li><strong>( Javascript ) { imageObject.onload = callbackFunc } and { imageDomElement.onload = callbackFunc }:</strong> <a href="https://stackoverflow.com/questions/12354865/image-onload-event-and-browser-cache#12355031" target="_blank" rel="noopener">Link</a>. Do something after make sure an image is fully loaded.</li>        <li><strong>( Javascript ) Stop using { console.log() } for debugging, it's broken:</strong> <a href="https://hackernoon.com/please-stop-using-console-log-its-broken-b5d7d396cf15" target="_blank" rel="noopener">Link</a>. Oh, so this is the first time I know there is extrak debugger, are they special software need to installed seperately? Still have no clue about it yet.</li>        <li><strong>( Javascript ) How to clear all { console.log() } with just few lines of code:</strong> <a href="https://www.codementor.io/brijmcq/angular-clear-all-of-your-console-logs-in-production-build-with-just-a-few-lines-of-code-cxcw30yqs" target="_blank" rel="noopener">Link1</a>, <a href="https://stackoverflow.com/questions/8002116/should-i-be-removing-console-log-from-production-code/8002527#8002527" target="_blank" rel="noopener">link2</a>.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-04-16<a id="190417m020530"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-16.svg" alt="2019-04-16">  </div>  <ol>    <li><strong>( Video ) Hospice - { 最後這條路｜留住每一個當下的美好｜三之三 } - { TheNewsLens }:</strong>  Keep watching the remaining part.</li>    <li><strong>( Video ) { She's Danni } - Weekly Vlog 37 - 去华大看樱花🌸只有女生可以参加的会议 - DIY青团:</strong> <a href="https://youtu.be/XLnKK3iNL4k" target="_blank" rel="noopener"></a></li>  </ol></div><div class="h2">  <h2>2019-04-17<a id="190417m020539"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-17.svg" alt="2019-04-17">  </div>  <ol>    <li><strong>( Music ) ( Classical ) Beethoven - Concerto pour piano n°3 - Alice Sara Ott / Orchestre philharmonique de Radio France:</strong> <a href="https://youtu.be/PM0HqmptYlY" target="_blank" rel="noopener">Link</a>. That pianist is highly focused (and hihgly diffuse at the same time). // Disease - In February 2019, <code>Alice Sara Ott</code> announced on Instagram that she had been diagnosed with <a href="https://en.wikipedia.org/wiki/Multiple_sclerosis" target="_blank" rel="noopener">{ multiple sclerosis }</a>.</li>    <li><strong>( Music ) ( Classical ) Tiffany Poon cover - Bach - Partita No.2 in C Minor, BWV 826:</strong> <a href="https://youtu.be/wdN6mLJUTig" target="_blank" rel="noopener">Link</a>. This girl is highly focused too.</li>  </ol></div><div class="h2">  <h2>2019-04-18<a id="190418m005247"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-18.svg" alt="2019-04-18">  </div></div><div class="h2">  <h2>2019-04-19<a id="190419m202121"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-19.svg" alt="2019-04-19">  </div>  <ol>    <li><strong>What is the most lightweight browser?:</strong> <a href="https://www.quora.com/What-is-the-most-lightweight-browser?share=1" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Midori } browser:</strong> <a href="https://www.midori-browser.org/" target="_blank" rel="noopener">Link</a>. Yeah, very light weight, not using noticeable memory at all.</li>    <li><strong>Installing { snap } (snapd) and using { snap }:</strong> <a href="https://docs.snapcraft.io/getting-started/3876" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Julian Assange been arrested in United Kingdom:</strong> <a href="https://en.wikipedia.org/wiki/Julian_Assange" target="_blank" rel="noopener">Julian Assange</a>.</li>    <li><strong>( Programming ) ( Javascript ) Data Structure and Algorithms in Javascript:</strong> <a href="https://github.com/amejiarosario/dsa.js" target="_blank" rel="noopener">Link</a>. Suggested by <code>Jahirul Islam</code>, not research on it yet.</li>    <li><strong>( Music ) ( Game ) { Hearts of Iron 2 }:</strong>      <ol>        <li><strong>{ Andreas Waldetoft } - { Overture }:</strong> <a href="https://youtu.be/sHsOasp0LAo?list=RDFpPGsCfJFWQ" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Andreas Waldetoft } - { The Front }:</strong> <a href="https://youtu.be/FpPGsCfJFWQ" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Andreas Waldetoft } - { Kriegsgewitter }:</strong> <a href="https://youtu.be/dkq1G4LhIbo" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Andreas Waldetoft } - { The R.A.F. }:</strong> <a href="https://youtu.be/epxc9qtRQJM" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Andreas Waldetoft } - { Airborne }:</strong> <a href="https://youtu.be/CEvZdxqmdDM" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Andreas Waldetoft } - { Leaving Shore }:</strong> <a href="https://youtu.be/OLTAFOpZm7k" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Game ) { Stardew Valley } :</strong> <a href="https://en.wikipedia.org/wiki/Stardew_Valley" target="_blank" rel="noopener">Link</a>. I'm just curious about what different type of game look like.</li>  </ol></div><div class="h2">  <h2>2019-04-20<a id="190420m081032"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-20.svg" alt="2019-04-20">  </div>  <ol>    <li><strong>( Javascript ) Check if an element is present in an array:</strong> <a href="https://stackoverflow.com/questions/7378228/check-if-an-element-is-present-in-an-array" target="_blank" rel="noopener">Link</a>. Use <code>includes()</code> (<a href="https://stackoverflow.com/a/38073833/10607630" target="_blank" rel="noopener">link</a>) ([ ECMAScript 2016 ]-[ ES7 ]), or <code>indexOf()</code>, or . If your array have object elements (instead of string elements), and you want to further find inside that object (see <a href="https://stackoverflow.com/questions/39206522/find-if-an-element-exists-in-javascript-array" target="_blank" rel="noopener">this data structure example</a>), you can use <code>myArray.find((o) => o.hasOwnProperty("targetFindingProperty"))</code>.</li>    <li><strong>Cleaning my keyboard:</strong>      <ol>        <li><strong>Before:</strong>          <div class="imgBlock">            <img src="/treegbBlog/fs/m/19/04/20/190420m163522/190420m163430.jpg" alt>          </div>        </li>        <li><strong>After:</strong>          <div class="imgBlock">            <img src="/treegbBlog/fs/m/19/04/20/190420m163522/190420m163431.jpg" alt>          </div>        </li>        <li><strong>What I learned:</strong> Porblem solving experience, and how to trouble shooting by logic and resoning. I tried to put back all the keyboard buttons without reference the photo I took before I took them off, the keyboard buttons are in fact a bit different (height, with or without scissor foot ...), by [ guessing ]-[ making asumption ], resoning, narrow down the possibility, I can gradually put all 100 keyboard buttons back, even I'm not familiar with them very well.</li>      <ol>    </ol></ol></li>    <li><strong>( Video ) { TedTalks } - { 曾博恩 } - 興趣沒有目的地 :</strong> <a href="https://youtu.be/CJd1Qiz8QDQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { 周杰倫 } - { 七里香 }:</strong> <a href="https://youtu.be/Bbp9ZaJD_eA" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { She's Danni } - Weekly Vlog 38:</strong> <a href="https://youtu.be/Zgsdm6RVasw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { She's Danni } - 一波三折的拉斯维加斯两天三夜 - 周杰伦演唱会:</strong> <a href="https://youtu.be/tbBs6uId3qc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Diagram ) Causal Loop Diagrams:</strong> <a href="https://youtu.be/L1bJnyjK-UU" target="_blank" rel="noopener">Link</a>. A bit similar to cocept map. The basic elements are the same.</li>  </ol></div><div class="h2">  <h2>2019-04-21<a id="190420m230822"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-21.svg" alt="2019-04-21">  </div>  <ol>    <li><strong>{ The News Lens } - 巴黎聖母院大火與大整修計畫 - (Notre-Dame de Paris on fire):</strong> <a href="https://youtu.be/4X6UCFcvwXY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Media ) { 新唐人亞太電視 }:</strong> <a href="https://youtu.be/Dq5RlAUUBcs?t=435" target="_blank" rel="noopener">Link</a>. I keep this because they mentioned about democracy, media unfreedom of China , 1989 Tiananmen Square protests (64 天安門事件) and "president" (of Taiwan), it imply this media is somehow worthy to trust, though I still not doing further research about this media. // They offer more world overview, not focused on local news.</li>    <li><strong>( Video ) Miles Guo and Steve Bannon, a dialogue on Terry Gou’s presidential bid - (2019年4月20日班农先生与文贵谈郭台铭选台湾总统):</strong> <a href="https://youtu.be/Uh8Ourx9kRw" target="_blank" rel="noopener">Link</a>. Miles Guo successfully predicted Terry Gou’s (郭台銘) (Foxconn founder and CEO) will candidate the 2020 Taiwan’s presidential election. // <a href="https://youtu.be/Uh8Ourx9kRw?t=934" target="_blank" rel="noopener">15:34</a>, what is the clue Miles Guo based on at that time, to predict this possibility?</li>    <li><strong>( Video ) Corgi (dog) races in Canterbury Park in 2016:</strong> <a href="https://youtu.be/tPuKyeVsfZY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Game ) 踩地雷 - (Minesweeper):</strong> <a href="https://youtu.be/ZOoXpoHpFHo" target="_blank" rel="noopener">Link</a>. I'm not interesting the game itself, I'm just thinking other things like, in every field, people could dive as deep as possible. And there is always some people that is highly focus on thsoe field, they never give up. And such "simple" looking game like <code>Tetris</code> and <code>Minesweepercan</code> could be very hard to [ design ]-[ programming ], I might had just heavily underestimate the logic and complexity it tooks for these "stupid simple" game, before I have some degree of self awareness of how stupid I'm was, about the real coding and complexity behind.</li>    <li><strong>( Javascript ) Several standard way to deep clone an object:</strong> <a href="http://larry850806.github.io/2016/09/20/shallow-vs-deep-copy/" target="_blank" rel="noopener">Link</a>. So ES6 ,, <code>Object.assign()</code> is useless for me since it only do "shallow clone". And using <code>JSON.stringify()</code> then <code>JSON.parse()</code>, "hack", has intrinsic drawback that don't support some javascript object. So I think I will do this stuff with <code>jquery</code> library ,, <code>$.extend()</code>, or <code>lodash</code> library.</li>    <li><strong>( Vue.js ) How to use JQuery (or other library) inside Vue:</strong> <a href="https://medium.com/code4mk-org/how-to-use-jquery-inside-vue-add-other-js-library-inside-vue-9eea8fbd0416" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { 館長 } - 中壢館，工程中:</strong> <a href="https://youtu.be/aHmM6Q9VnnI" target="_blank" rel="noopener">Link</a>. 只有一個字，大。</li>  </ol></div><div class="h2">  <h2>2019-04-22<a id="190421m232756"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-22.svg" alt="2019-04-22">  </div>  <ol>    <li><strong>( Dog ) { Tracking dogs } and { trailing dogs }:</strong> <a href="https://youtu.be/bFVckg9ra7o" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Dog ) { Guide dog } puppies personality test:</strong> <a href="https://youtu.be/LgbyG6XHTpI" target="_blank" rel="noopener">Link</a>. An ideal guide dog, has personality in the middle of extrem introvert and extrem extrovert.</li>    <li><strong>( Game ) { 隻狼 }:</strong> <a href="https://youtu.be/7MHHOHSl3pQ" target="_blank" rel="noopener">Link</a>. I'm trying to extend my view about different type of game (any game) (even I won't play it at all), instead of just what I was used to.</li>    <li><strong>( Music ) { relaxdaily } - calming piano - #1907:</strong> <a href="https://youtu.be/hOgMI3QbZUk" target="_blank" rel="noopener">Link</a>. Not distracting, suit for studying and focusing, because I will not notice the music is playing.</li>    <li><strong>( Music ) { DooPiano } - piano cover - { Blackpink } - don't know what to do:</strong> <a href="https://youtu.be/YOQ-Y_2A7HM" target="_blank" rel="noopener">Link</a>. Not distracting, suit for studying and focusing, because I will not notice the music is playing.</li>    <li><strong>( SpaceX )Why does the SpaceX droneship camera cut out?:</strong> <a href="https://youtu.be/hH75bVG7HBo" target="_blank" rel="noopener">Link</a>. I doubt any supporting [ statement ]-[reason ] for this, because this kind of technology and solution (any solution) should already be so stupid dead easy, for a company that can remote control vehicle that is way far from earth in the space, still this had happened many times (the live video cut off in the crucial moment). I trust with nobody, I trust with the truth and reasoning.</li>    <li><strong>( Politics ) { 館長 } - 20190421 - 郭台銘選總統也不投他 - 富士康竟設共產黨支部完全不像個台灣人，也不適合當總統:</strong> <a href="https://youtu.be/EDeHdCm1jF8" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-23<a id="190422m232337"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-23.svg" alt="2019-04-23">  </div>  <ol>    <li><strong>( Music ) ( Classical ) Tiffany Poon plays Chopin Concerto No. 1 in E Minor Op. 11:</strong> <a href="https://youtu.be/K3GVzOR0DO0" target="_blank" rel="noopener">Link</a>. Highly diffuse.</li>    <li><strong>( Music ) ( Electronic ) { Elektronomia } - Sky High - NoCopyrightSounds:</strong> <a href="https://youtu.be/TW9d8vYrVFQ" target="_blank" rel="noopener">Link</a>. Highly focus.</li>    <li><strong>( Music ) ( Electronic ) Tobu - Colors:</strong> <a href="https://youtu.be/eyLml-zzXzw" target="_blank" rel="noopener">Link</a>. Highly focus.</li>    <li><strong>( Music ) ( Pop ) 蔡依林 (Jolin Tsai) - 迷幻 (Fantasy):</strong> <a href="https://youtu.be/KhHfi7jYZa4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Girls Generation } - { Catch Me If You Can }:</strong> <a href="https://youtu.be/sSCmafwLKE4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Symphony ) { Thomas Bergersen } - Colors of Love - album Sun:</strong> <a href="https://youtu.be/ZuGiwDQEvDc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Cabling ) { Technimove } doing cabling - before & after:</strong> <a href="https://youtu.be/gI2XA_4H04A" target="_blank" rel="noopener">Link</a>. Maybe it is similar to <code>refactoring</code> in programming, human eyes and mind just can't understand the visually complex or unpredictable things, sysmtem, structure, make anything predictable and conventional and reduce the elements number happens at the same time, might helps the understanding of complex code base.</li>  </ol></div><div class="h2">  <h2>2019-04-24<a id="190424m003510"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-24.svg" alt="2019-04-24">  </div>  <ol>    <li><strong>( Music ) ( Electronic ) Tobu - Colors:</strong> <a href="https://youtu.be/eyLml-zzXzw" target="_blank" rel="noopener">Link</a>. Excellent piece.</li>    <li><strong>( Music ) ( Electronic ) Tobu - Colors - Fl Studio { Remake } - orchestration:</strong> <a href="https://youtu.be/BNXmOUa5ddU" target="_blank" rel="noopener">Link</a>, <a href="https://youtu.be/QE0KS-gV97M" target="_blank" rel="noopener">link2</a>. <code>Electronic music</code> is stupid simple? This is as hard as "engineering". Maybe I'm too <strong>underestimating</strong> everything that "looks simple", just as same as how long it takes to write dead simple web apps like my current project <code>Doggo</code>, the apps looks like so dead simple at first (guess the breed of dog image, how hard could it be?), but when I dive deep down, I found it is a complex system to design and have to consider so much <u>components</u>, <u>states</u>, and <u>logics</u> working behind it, in one component it reach 1000 lines of code, not to mention the keep delaying due time. Simple things could be not simple at all.</li>    <li><strong>( Music ) ( Electronic ) Tobu - Life - NCS Release:</strong> <a href="https://youtu.be/OBwl2glmqC0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Tobu - Sound of Goodbye:</strong> <a href="https://youtu.be/goRGKll_zE0" target="_blank" rel="noopener">Link</a>. More peaceful, and monotone, idea for study.</li>    <li><strong>( Music ) ( Electronic ) Tobu - Seven - NCS Release:</strong> <a href="https://youtu.be/2sUupgjZ58E" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Kovan & Electro-Light - Skyline - NCS Release:</strong> <a href="https://youtu.be/FseAiTb8Se0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Elektronomia - Sky High - NCS Release:</strong> <a href="https://youtu.be/TW9d8vYrVFQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Jim Yosef - Firefly - NCS Release:</strong> <a href="https://youtu.be/x_OwcYTNbHs" target="_blank" rel="noopener">Link</a>. Can focused.</li>    <li><strong>( Music ) ( Electronic ) Jim Yosef - Lights - NCS Release:</strong> <a href="https://youtu.be/vb3ks4WllXA" target="_blank" rel="noopener">Link</a>. Can focused, ideal.</li>    <li><strong>( Music ) ( Electronic ) Janji - Heroes Tonight (feat. Johnning) - NCS Release:</strong> <a href="https://youtu.be/3nQNiWdeH2Q" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Ahrix - Nova:</strong> <a href="https://youtu.be/X5mcY8ecs8I" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Electronic ) Disfigure - Blank VIP (feat. Tara Louise) - NCS Release:</strong> <a href="https://youtu.be/j5DCb1ycXyA" target="_blank" rel="noopener">Link</a>. Distracting.</li>    <li><strong>( Music ) ( Electronic ) Sia - Move Your Body - Alan Walker Remix:</strong> <a href="https://youtu.be/jSSGgj8mxSc" target="_blank" rel="noopener">Link</a>. Higly distracting.</li>    <li><strong>( Music ) ( Electronic ) Coldplay - Hymn For The Weekend - Alan Walker Remix:</strong> <a href="https://youtu.be/mOivOlP9GRk" target="_blank" rel="noopener">Link</a>. Higly distracting.</li>    <li><strong>( Javascript ) { Number() } and { parseInt() } :</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener">{ Number() }</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">{ parseInt() }</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-25<a id="190425m075016"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-25.svg" alt="2019-04-25">  </div>  <ol>      <li><strong>( Music ) ( Electronic ) Tobu - Colors:</strong> <a href="https://youtu.be/eyLml-zzXzw" target="_blank" rel="noopener">Link</a>. Excellent piece.</li>      <li><strong>( Music ) ( Electronic ) Tobu - Colors - Fl Studio { Remake } - orchestration:</strong> <a href="https://youtu.be/QE0KS-gV97M" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>( Music ) { IZ*ONE } - La Vie en Rose:</strong> <a href="https://youtu.be/WZwr2a_lFWY" target="_blank" rel="noopener">Link</a>. <a href="https://youtu.be/xhdW-GceM6g" target="_blank" rel="noopener">Dance practice</a>. The dance is natural, loose (diffuse) but in control. And this is <a href="https://youtu.be/1JojMj_5KY8" target="_blank" rel="noopener">when you control too much</a>, and have no enough loose part, it becomes too tense. Balance between predictable and unpredictable is hard.</li>      <li><strong>( Music ) { IZ*ONE } - Violeta:</strong> <a href="https://youtu.be/0ncVyYpsPHk" target="_blank" rel="noopener">Link</a>. Loose but in control.</li>      <li><strong>( Music ) { IZ*ONE } - Rumor:</strong> <a href="https://youtu.be/G8TWEmTSGRw" target="_blank" rel="noopener">Link</a>. Loose but in control. Also see <a href="https://youtu.be/CqkNb1i94c0" target="_blank" rel="noopener">{ IZ*ONE } - Rumor - Sub-Unit - Line Distribution</a> to see how complicated the orchestration is, behind this kind of "natural". And here only counts 5 units (members), not to mention the complexity of orchestration when <a href="https://youtu.be/PDAi2w9LRR8" target="_blank" rel="noopener">full units (members) (12) join together</a>.</li>      <li><strong>( Music ) { TWICE } - FANCY:</strong> <a href="https://youtu.be/kOHB85vDuow" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Network is off at my renting room:</strong>      <ol>        <li><strong>About:</strong> 網路斷線，時間從昨天 22:00 到今天早上 09:00 一樓數據機重新啟動為止。問題： 停電 (不確定哪裡停)，導致 1F 數據機跳掉？導致整棟樓都沒網路，但因為只有少數人上網，且是在離峰使用時段，所以沒有人 complain。房東兒子 09:00 時到店裡把 1F 數據機重啟後，我這邊的網路馬上正常。代表不是我電腦的問題。</li>        <li><strong>但可能不只一個問題點:</strong> 有可能不只一個問題點，這次是跳電問題 (也不知道他們的跳電是那裡跳？是整個電力系統跳？)，因為 6F 的 HUB 那裡也可能有不定期問題。將來再看，但至少這次不是 6F HUB 的問題。</li>        <li><strong>這次我電腦的網路設定:</strong> DHCP, 根本沒做任何設定就自動可以連上，電腦直接插房間來源網路。</li>        <li><strong>測試連線 - PC 到 Gateway:</strong> PC ,, network setting ,, IPv4 ,, Address 的地方由 DHCP 改成 Manual, 填入 Adress 192.168.21.1, Netmask 255.255.255.0, Gateway 192.168.0.1, 然後 DNS 和 Routes 那裡不用填，保留 { Automatic } to { ON }. // 完成後，用 browser request 192.168.0.1, 會出現 [ D-Link ]-[ WBR-2200 ] router 的界面 (1F 的， maybe)。但是此時不能 request www.example.com, 即使 DNS 的 { Automatic } 以切換成 { OFF }，然後填入 8.8.8.8 也還是不行，即使 Netmask 由 255.255.255.0 改成 255.255.0.0 也還是不行，不知道為什麼，真奇怪，如果說 IP address 設錯了，不能 access www.example.com 可以理解，但為什麼還可以 access 192.168.0.1？真奇怪，不解。</li>        <li><strong>測試連線 - PC 到 Internet (with Domain Name):</strong> PC ,, network setting ,, IPv4 ,, Address 的地方由 DHCP 改成 Manual, 填入 Adress 192.168.0.122 (隨便填的網址) (至少試過了 192.168.0.21 ~ 192.168.0.245 都可以，但是 192.168.21.1 不行), Netmask 255.255.255.0, Gateway 192.168.0.1, 然後 DNS 和 Routes 那裡不用填，保留 { Automatic } to { ON }. // 完成後，用 browser request 192.168.0.1, 會出現 [ D-Link ]-[ WBR-2200 ] router 的界面 (1F 的， maybe)。但是此時不管是 1. 把 DNS 的 { Automatic } 以切換成 { ON }, 2. 把 DNS 的 { Automatic } 切換成 { OFF }，然後填入 8.8.8.8, 3. 把 DNS 的 { Automatic } 切換成 { OFF }，然後填入 192.168.0.1，皆可 request 到 www.example.com。</li>        <li><strong>測試連線 - 房間的網路線，硬體本身:</strong> 房間只有給 source 網路孔，裡面的網路線都是我買的，其中一條確定有一個端口 (防呆彈片斷掉的那端)，某一個角度下會 100% 導致斷線，所以 100% 確定那端在某種角度是會接觸不良，不過另外一端良好。 // 另外一條短的網路線，接頭上只有 4 個 pin, 而不是 8 個，但還可以上網! 不知道是什麼巫術。 // PC 端 ,, 網路線的頭插上後，不管怎麼搖晃，始終亮綠燈，代表 PC 的網路 (母) 接頭沒有問題。</li>        <li><strong>跟房東溝通，與主動解決問題的經驗:</strong> 早上 07:30 時，打電話給房東 3 次，最後一次問他大概什麼時候會來 (店裡) 看的時候，他很情緒化 (大概是主觀的認為是認為網路斷線問題是我這邊自己產生的)。於是我跟他解釋，我們兩方都不知道問題在哪裡，但是我們都不想浪費時間，而比較好的方式是一段一段分析，把問題找出來，不然將來我們都會需要再浪費時間在這個問題上。而且未來住進來同一間房間的房客一樣會有這個問題。 // 不過這次確定是 1F router 因為 "跳電" 而導致異常。不確定未來會不會再出現問題，然後不知道問題點是否是數個。這種 bug 最難找，沒有條件式的復發性，而且一次有數個問題而不是只有一個，在整個線路上，這種相當難偵錯。// 這次房東處理態度 "一開始" 是消極的，如果沒有我自己 trouble shooting and reasoning and find the [ truth ]-[ fact ]， 不斷考慮著最不浪費時間的解法還有當機立斷跟房東 make suggestion 而不是等到其他人下班回來再問他們是否都可以上網 (然後再來解決)，我想這個問題可能一拖就是好幾天，好幾天的生產力！問題不會自己解決，不主動解決問題，問題就會解決你。</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>2019-04-26<a id="190426m005457"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-26.svg" alt="2019-04-26">  </div>  <ol>    <li><strong>( Music ) { IZ*ONE } - Rumor:</strong> <a href="https://youtu.be/uTcZ3IizpLE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Dance ) { IZ*ONE } - Jo Yuri (조유리) - Violeta:</strong> <a href="https://youtu.be/Nqe2xPRIdW8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( KPop ) ( Funny videos ) 韓國愛豆們 舞台失誤後的可愛反應！超好笑 - DenQ:</strong> <a href="https://youtu.be/DEUj6hkkSoo" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music) ( Math ) 音樂也有科學道理？Do、Re、Mi...都是如何確定的？李永樂老師講音律:</strong> <a href="https://youtu.be/cTDi7gfynUc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { 看电影了没 } - { 徒手攀岩 } - 要么登顶，要么死 - 酋長岩:</strong> <a href="https://youtu.be/aGGL-LPo99s" target="_blank" rel="noopener">Link</a>. 生命的意義是主觀的，客觀上是不存在的，你認為是什麼它就是什麼。而且應該是反過來，是你去 "定義" 生命的意義，而不是 "尋找" 生命的意義，因為它是主觀的。</li>    <li><strong>( Video ) { She's Danni } - 攀岩:</strong> <a href="https://youtu.be/DuFBmDJUPE4" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-27<a id="190426m231145"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-27.svg" alt="2019-04-27">  </div>  <ol>    <li><strong> - How do you eat an elephant:</strong> I have this thought coming out after watching the talk <a href="https://youtu.be/4FJEbzPhqq8" target="_blank" rel="noopener">王佑哲 Eugene Wang - { Inside } 共同創辦人 - TEDxNTUST</a>. You eat an elephant bit by bit. Only through modularization and components then you can design and manage a complex system. Only through fragment the time schedule then you can finished the project before dead line. Only through lower down the cognitive load of every habits, then you can deal with procrastination and overcome the reluctance. // Natural is always <strong>complex</strong> (not simple) in natural, and human perfer <strong>simple</strong> all the time. When human have to face complex natural, they often figure out some tips, design pattern, solution, to deal with complex (is in all natural) problem, with simple (human friendly) way. This is why the wisdom "Less is More" is so true in many aspects. But I think we need to understand, simple is <strong>by designed (by human)</strong>, it is <strong>not how natural works</strong>. Natural tends to be complex and <strong>multiple dimensional</strong> inherently, and human tends to like simple things inherently. When we can find out a specific simple solution to deal with a specific complex natural, they <strong>"matched"</strong> excellently and that solution will be considered as a good solution.</li>    <li><strong>( Video ) { Tiffany Poon } - Vlog - How to Balance School + Piano - #07:</strong> <a href="https://youtu.be/BM-JfaGxKFY" target="_blank" rel="noopener">Link</a>. Time management, discipline and rationality, always planning ahead, setting priority and only focus on the important thing.</li>    <li><strong>( Music ) ( Classical ) { Tiffany Poon } - Beethoven Sonata Op.10 No.3:</strong> <a href="https://youtu.be/uWBABv4XeLk" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Traversy Media } - Quality youtube channel about web development:</strong> <a href="https://youtu.be/raoOoWU7DI0?t=431" target="_blank" rel="noopener">Link</a> (original title: <u>My Top 10 Learning Methods For Self Taught Developers</u>). Including <a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg/featured" target="_blank" rel="noopener">The Net Ninja</a>, <a href="https://www.youtube.com/user/DevTipsForDesigners/featured" target="_blank" rel="noopener">DevTips</a>, <a href="https://www.youtube.com/user/LevelUpTuts/featured" target="_blank" rel="noopener">LevelUpTuts</a>, <a href="https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w/videos" target="_blank" rel="noopener">Academind</a>, <a href="https://www.youtube.com/user/DesignCourse/videos" target="_blank" rel="noopener">DesignCourse</a> (art, graphic design), <a href="https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ" target="_blank" rel="noopener">Coding Tech</a> (conferences, talks), <a href="https://www.youtube.com/user/pizzapokerguy87/featured" target="_blank" rel="noopener">Dylan Israel</a>.</li>    <li><strong>( Webdev ) A road map (mind map) of Front-End, Back-End, Dev Ops:</strong> <a href="https://youtu.be/gVXcqO9A1vo" target="_blank" rel="noopener">Link</a>. I keep this not to know everything, but to have enough vision to know what to learn (few) an what not to learn (most).</li>    <li><strong>My rough schedule and estimation about front-end job (keep changing):</strong>      <ol>        <li><strong>Due time:</strong> 2019-06-30.</li>        <li><strong>Javascript fundamental:</strong> ?? days.</li>        <li><strong>JQuery:</strong> ?? days. Don't need to know it well, just learn when in need.</li>        <li><strong>Vue.js:</strong>          <ol>            <li><strong>Estimate it takes:</strong> ?? days</li>            <li><strong>Current state:</strong> Have understand fundamental. Now try to learn { Vuex } ("maybe" this is a must-leanted), { vue-router } if needed.</li>          </ol>        </li>        <li><strong>Nodejs:</strong> ?? days. Must know.</li>        <li><strong>Express.js:</strong> ?? days. Must know.</li>        <li><strong>Git and deployment:</strong> ?? days. Could be practice when collaborating with Pollash and Woody.</li>        <li><strong>Webpack:</strong> ?? days. Must know.</li>        <li><strong>Database:</strong> ?? days. Use mysql, and find the way to do object programming with database, instead of low level SQL language.</li>        <li><strong>Algorithm and data structure:</strong> ?? days. Maybe no time to learn this at all. But if I need to learn, learn <a href="https://github.com/amejiarosario/dsa.js" target="_blank" rel="noopener">Data Structure and Algorithms in Javascript - dsa.js - suggested by Pollash</a> first.</li>        <li><strong>{ Less } ( CSS pre-processor ):</strong> ?? days. Optional.</li>        <li><strong>Side project { Doggo }:</strong> Estimate finished in 2019-05-03, and freeze it without doing huge improvement, without doing iteration (v2, v3 ...). I should spend time on new projects, multiple projects, instead of polishing the same one to excellent.</li>        <li><strong>Side project 2:</strong> ?? days.</li>        <li><strong>Side project 3:</strong> ?? days.</li>        <li><strong>Redesign my own CMS:</strong> ?? days. Wow, this might cost me a month, at least (might even a lot more than this).</li>        <li><strong>Side project with Woody for visually impaired people:</strong> ?? days. Must done, to put commitment and obligation to practice.</li>        <li><strong>Resume:</strong> ?? days.</li>      </ol>    </li>    <li><strong>My next goal:</strong> <code>Node.js</code> and <code>Express.js</code>, they will help my next project - rewrite my own CMS.</li>    <li><strong>( Music ) ( Game ) Relaxing { Stardew Valley } music:</strong> <a href="https://youtu.be/JJCFQtTPq_8" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Javascript ) How to { bind } { this } to a setTimeout ,, callback function:</strong> Very simple, just <code>setTimeout(function () { ... }.bind(this), 2000);</code>. // I don't know I can write syntax like <code>}.bind</code> before (I thought I have to use self-invoking tricks, making 2 functions, outer function return inner function, then use <code>.bind()</code>). // It seems you can't use ES6 arrow function to replace that <code>function () ...</code> part for this one, this kind of syntax don't work on ES6 arrow function (at least for this one). // Another tricks is use like this - <code>var that = this; setTimeout( function() { that.foo(); }, 1000);</code>.</li>    <li><strong>( Vue.js ) Why mutating { props } is anti-pattern, and what is the solution?:</strong> <a href="https://michaelnthiessen.com/avoid-mutating-prop-directly/" target="_blank" rel="noopener">Link</a>. This is by designed (intended), because if one property is allowed to be changed by multiple potential components (sync, like <code>v-model</code>), if something going wierd and you want to find the source of problem, you will found you can't find it! That property have been written everywhere (by so much components). You need to use <code>event</code> (<code>emit</code>?) to update child component data to parent component, and the real update will happens in parent component.</li>    <li><strong>( Vue.js ) { v-model }:</strong> <a href="https://cythilya.github.io/2017/04/14/vue-data-v-model/" target="_blank" rel="noopener">Link</a>. Very good, simple, clear explanation!</li>    <li><strong>( Vue.js ) { Events }:</strong> <a href="https://vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-04-28<a id="190428m000055"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-28.svg" alt="2019-04-28">  </div>  <ol>    <li><strong>( Philosophy ) The narrow "Zone" of lifestyle:</strong> 看完 <a href="https://youtu.be/EtisR5GY-n0?t=442" target="_blank" rel="noopener">館長的壓力不是大家能了解的，一年工作365天，賺再多錢其實一點也不快樂!</a> 後，我開始思考一個問題。 // 人生的規則處處充滿悖論和矛盾，很多規則並不是順著邏輯在運作的 (所以你會一直抓不到人生的正確的規則是什麼)。另外，快樂和幸福可以用 "曖昧" 這個概念來比喻，你愈想主動追求它 (快樂)，它就會消失，你如果放棄追求它，它又跑過來主動靠近你，但如果你又想靠近，它又開始跑遠 ... 。這樣的情況是不能靠邏輯推理出來的，人生的規則根本是一場謎，難以理解。// 我的猜測和假設是這樣 - 大約知道的通用規則是，作為一個 "人" 這樣的一個奇怪的物種，我們只能讓自己維持在一個非常特定狹小的區域，狀態，生活模式 (我簡稱 "Zone")，這樣我們就可以獲得快樂和幸福。而如果我們的生活方式超出這個 Zone，我們只會在人生裡面感受到更多的痛苦。這個 Zone 通常包含 - <strong>在追求一個目標，永遠高度專注在某事 (活在當下)，在做的事情有挑戰性，在做的事情是有意義的，有跟社群 (其他人) 有某種連結關係，不主動追求快樂 (而是被動的讓快樂來找你) ...</strong> 所以，錢多不多就不太是重點了，因為錢多，不代表就會進到這個 Zone 裡面。不過我們在自然情況下是不會刻意的讓自己保持在這個 Zone 裡面的 (享樂是人的天性之一)，只有當我們意識到 (並且有足夠的人生經驗，以及教育)，人生要得到幸福，唯一辦法只能讓自己進到這個 Zone，我們才會刻意 (非自然) 的每天讓自己保持在這個 Zone 裡面。</li>    <li><strong>( Science ) Why porn changes the brain:</strong> <a href="https://youtu.be/DclqE-9vFgY" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Classical ) Kate Liu - Andante Spianato and Grande Polonaise Brillante in E flat major Op. 22 (second stage):</strong> <a href="https://youtu.be/AO6k_ipgEsI" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Classical ) Tiffany Poon - Bach Partita No.2 in C Minor, BWV 826:</strong> <a href="https://youtu.be/wdN6mLJUTig" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) ( Classical ) Beethoven - Concerto pour piano n°3 - Alice Sara Ott / Orchestre philharmonique de Radio France:</strong> <a href="https://youtu.be/PM0HqmptYlY" target="_blank" rel="noopener">Link</a>. // Disease - In February 2019, <code>Alice Sara Ott</code> announced on Instagram that she had been diagnosed with <a href="https://en.wikipedia.org/wiki/Multiple_sclerosis" target="_blank" rel="noopener">{ multiple sclerosis }</a>.</li>    <li><strong>( Music ) ( Electronic ) Tobu - Colors:</strong> <a href="https://youtu.be/eyLml-zzXzw" target="_blank" rel="noopener">Link</a>. Highly focus and dedicated.</li>    <li><strong>( Vue.js ) Pitfall of thinking you have to keep parent and child component ,, data ,, syncing:</strong>      <ol>        <li><strong>I finally accept:</strong> I finally accept and understand that we don't need to sync between parent and child compoent ,, data.</li>        <li><strong>By reading material:</strong> After reading <a href="https://www.cnblogs.com/penghuwan/p/7473375.html" target="_blank" rel="noopener">三種子組件向父組件中傳遞數據的方式</a>, <a href="https://forum.vuejs.org/t/pass-object-via-props-reference-vs-emit-value-best-practices/45683" target="_blank" rel="noopener">Pass object via props: Reference vs. emit value best practices</a>, and <a href="https://vuejs.org/v2/guide/components-custom-events.html" target="_blank" rel="noopener">vue ,, .sync Modifier</a>, I get this conclusion.</li>        <li><strong>Experiment:</strong> I tried to make a <code>for</code> loop in child component, inside this for loop, I keep updating props that come from parent with <code>emit</code> event, I also have a emit handler in parent component to update this data (to what child feeds) when the emit is triggered. // The result of this experiment is, unless I use Async and Await to make a little delay after each emit, it will not sync in real time (for loop is running too fast)</li>        <li><strong>Final solution:</strong> You don't need to update child data to parent data in real time (for example, you don't need to <code>emit</code> in every loop of <code>for</code> loop, this will be async since emit is event based, not io-block based), you do some calculation in child component, and when all calculation is finished, you push it to parent once.</li>        <li><strong>Pitfall of passing reference to child component using props:</strong> In the link, they mentioned you can pass parent component object to child component using <code>props</code> (since it is object, it is passing <u>reference</u>, instead of <u>value</u>), if you try to modify (mutate) that <code>props</code>, <strong>it works and vue don't complain about this!</strong> (vue can't detect this)! In fact because of <u>passing reference</u>, this make the data <strong>sync</strong> in real time (since they are same object at all), but this is very bad idea, it causing anylysis very hard, so don't do this. I wrote my Doggo project like this at first, it works but it is bad practice, don't use like this.</li>      </ol>    </li>    <li><strong>( Vue.js ) Differences between { Computed } and { Watch }:</strong> <a href="https://cythilya.github.io/2017/04/15/vue-computed/#%E6%AF%94%E8%BC%83-computed-%E8%88%87-watch" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue.js ) { Computed } ,, { getter } and { setter }:</strong> <a href="https://cythilya.github.io/2017/04/15/vue-computed/" target="_blank" rel="noopener">Link1</a>, <a href="https://pjchender.blogspot.com/2017/05/vue-computed-getter-setter.html" target="_blank" rel="noopener">link2</a>. I'm little surprised about { Computed } property can be set (by { setter }), and this will be two way binding.</li>    <li><strong>( Vue.js ) { Reactivity } in Vue (and its pitfalls):</strong> <a href="https://medium.com/js-dojo/reactivity-in-vue-js-and-its-pitfalls-de07a29c9407" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue.js ) { Reactivity } and { Vue.set() }:</strong> <a href="https://vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">Link1</a>, <a href="https://vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">link2</a>. Still don't know much, and the real use case, about this. Just keep it saved for in case I need this. // It mentioned about you can use the shorthand <code>this.$set()</code>.</li>    <li><strong>( Vue.js ) { Reactivity }, array methods that Vue's { reactivity } supports:</strong> <a href="https://pjchender.blogspot.com/2017/05/vue-vue-reactivity.html" target="_blank" rel="noopener">[那些關於 Vue 的小細節 ] 為什麼畫面沒有隨資料更新 - Vue 響應式原理（Reactivity）</a>。裡面提到 - "陣列部分：利用陣列索引直接設值時 ...", "使用 Vue 可觀察到的陣列方法 ...", "push()、pop()、shift()、unshift()、splice()、sort()、reverse() ...".</li>  </ol></div><div class="h2">  <h2>2019-04-29<a id="190428m223242"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-29.svg" alt="2019-04-29">  </div>  <ol>    <li><strong>( Music ) TWICE - LIKEY - { Smyang Piano } cover - mist version:</strong> <a href="https://youtu.be/_rERHbhcIB4" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) TWICE - LIKEY - { DooPiano } cover:</strong> <a href="https://youtu.be/70Gm350zA9U" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) TWICE - LIKEY - [ orchestration ]**[ re-arrange ]**[ remake ]:</strong>      <ol>        <li><strong>{ JunMan } remake:</strong> <a href="https://youtu.be/K13vW-sRtJA" target="_blank" rel="noopener">Link1</a>, <a href="https://youtu.be/iunrE9GQxa8" target="_blank" rel="noopener">link2</a>.</li>        <li><strong>{ 556pm } remake:</strong> <a href="https://youtu.be/g057RicqiEk" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Nomimuhi } remake:</strong> <a href="https://youtu.be/3tCahcd-ykY" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ Inulloid } remake:</strong> <a href="https://youtu.be/LBUXtdGVq78?t=5081" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>( Music ) Twice - Heart Shaker - { AZWZ } remake:</strong> <a href="https://youtu.be/ycZCEvnl9d0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { TED-Ed } - How do dogs "see" with their noses? - Alexandra Horowitz :</strong> <a href="https://youtu.be/p7fXa2Occ_U" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Node.js ) Node equivalent of { python -m SimpleHTTPServer }?:</strong> <a href="https://stackoverflow.com/questions/22513544/node-equivalent-of-python-m-simplehttpserver" target="_blank" rel="noopener">Link</a>. <code>npm install http-server -g</code>, then <code>http-server</code>.</li>    <li><strong>( Vue.js ) Deployment of Vue apps:</strong> <a href="https://cli.vuejs.org/guide/deployment.html" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Vue.js ) { vue.config.js } ,, common properties and description:</strong> <a href="https://cli.vuejs.org/config/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Git ) ( Problem solving ) Fatal: 'origin' does not appear to be a git repository:</strong> <a href="https://stackoverflow.com/questions/15637507/fatal-origin-does-not-appear-to-be-a-git-repository" target="_blank" rel="noopener">Link</a>. Use <code>git remote add origin url/to/your/fork</code> to "define" what is "origin" in your <code>.git/config</code> first.</li>    <li><strong>( Git ) { git init }:</strong> After <code>git init</code>, you will found <code>current working directory</code> have an extra <code>.git</code> file added.</li>    <li><strong>( Git ) { git add -A }:</strong> I don't know the use case.</li>    <li><strong>( Git ) { git push -f }:</strong> <a href="https://gitbook.tw/chapters/github/using-force-push.html" target="_blank" rel="noopener">Link</a>. <code>-f</code> means "force", it overwrite remote repo <strong>even without warn you to pull first</strong>. This is useful when you deploy to gh-pages (because it is one way), but you got to be careful don't do anything wrong with this option.</li>    <li><strong>( Git ) Push commits to another branch:</strong> <a href="https://stackoverflow.com/questions/13897717/push-commits-to-another-branch/13897766" target="_blank" rel="noopener">Link</a>. The key is that <code>master:gh-ages</code> syntax.</li>  </ol></div><div class="h2">  <h2>2019-04-30<a id="190430m082916"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/2019-04-30.svg" alt="2019-04-30">  </div>    <li><strong>190430 ( Programming ) My first { Vue.js } project { Doggo } # 190430m135836:</strong> <a href="/treegbBlog/19/04/30/190430m135836/">Link</a>. The project is initially done and <code>Deployed</code>.</li>    <li><strong>190430 ( Problem solving ) How I solved { vue } deployment ,, index.html ,, src path ,, sub-domain path missing #190430m120918:</strong> <a href="/treegbBlog/19/04/30/190430m120918/">Link</a>.</li>    <li><strong>( KPop ) { TWICE } TV - { SIXTEEN } - Episode 3 - Part 9</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/VonTf_LNN3A" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>About this series:</strong> This is actually very long full series, all the way through Episode 10.</li>        <li><strong>What I'v learned:</strong> At first, I thought, all [ music group ]-[ stars ]-[ celebrity ] are "artificial created" and could be "hyped", [ faked ]-[ make up ]. But I think I'm wrong, from this series, I start to know <code>JYP</code> are looking very specific type of inherently personality during selection, those personality <strong>could not be [ faked ]-[ make up ]</strong>, they have to be natually inherited, because things that is by [ faked ]-[ make up ] could not last long and could be recognized by audience in final no matter how. // So yes, they are stars and every member in 9 is unreplaceable and important, none is the best and could cover the whole game, they have their own ((different)) role for the bigger image. We can't have a team which members are all having "strong" image, we need "soft" part too, otherwise it is not good balanced. Few members in <code>Twice</code> was placed at that "soft" part (role) and that is import.</li>      </ol>    </li>    <li><strong>( KPop ) Becoming TWICE is not easy - { Mina }:</strong> <a href="https://youtu.be/170Hr7ckZQs" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( KPop ) Becoming TWICE is not easy - { Jihyo }:</strong> <a href="https://youtu.be/qgFITlSMFLQ" target="_blank" rel="noopener">Link</a>. Personality is sometimes more important than what he/she currently owns and inherits.</li>    <li><strong>( KPop ) { Mina } - Rhythmic Gymnastics hoof - 2016 Idol Star Championship:</strong> <a href="https://youtu.be/q-QCWbyLNe0" target="_blank" rel="noopener">Link</a>. You Try to Throw something, but you don't Catch it later ... and it Bugs you so much ... ok, I'm too deep into programming ... .</li>    <li><strong>( KPop ) TWICE Mina - ballet</strong> <a href="https://youtu.be/AFTg6o-wP_k" target="_blank" rel="noopener">Link</a>.</li>  </div><div class="h2">  <h2>{ Pollash }<a id="190419m212225"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/04/01/190401m013644/pollash.svg" alt="Pollash">  </div></div><hr><div class="facetList">Cmm: u190401m013644 x88lost x88fs c88log log88tableCurrent: ti88crr88y19 ti88crr88y19dw3 ti88crr88y19m05 ti88crr88y19m05d01 ti88crr88y19m05dw3 ti88crr88y19q2 ti88crr88y19q2dw3 ti88crr88y19w18 ti88crr88y19w18dw3Time (d): ti88y19 ti88y19dw3 ti88y19m05 ti88y19m05d01 ti88y19m05dw3 ti88y19q2 ti88y19q2dw3 ti88y19w18 ti88y19w18dw3</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190319 [The lions of Sabi Sand]-[survival of the fittest]</title>
      <link href="/treegbBlog/19/03/19/190319m152128/"/>
      <url>/treegbBlog/19/03/19/190319m152128/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> This documentary shows, there is very brutal, cruel in pure natural land, survival of the fittest, or law of the jungle, or natural selection, is the only law never changed.</li></ul><a id="more"></a><hr><ol>  <li><strong>動物星球頻道,, 獅王之路:</strong> <a href="https://youtu.be/vmnuj5SoG-o" target="_blank" rel="noopener">LInk1</a>, <a href="https://youtu.be/ebV5Go4x194" target="_blank" rel="noopener">link2</a>.</li>  <li><strong>Conclusion:</strong> This documentary shows, there is very brutal, cruel in pure natural land, <strong>survival of the fittest, or law of the jungle, or natural selection</strong>, is the only law never changed. And as human being, we should learn from this and avoid to be placed in such situation, at any cost. Similar thing could also happens even on human ourselves, if we don't <strong>prevent it "artificially"</strong>, they happens "naturally". // By <strong>education and building civilization</strong>, we prevent this in some degree, but about capitalism, it seems to be "freedom", when they actually has some degree of "brutal" and "survival of the fittest" dark side that we forget.</li></ol><hr><div class="facetList">Cmm: u190319m152128 x88lost x88fs animal animals video presentation88video animal planet taiwan place88taiwan africa place88africa lion lions king lionKing brutal cruel survival of ofww the theww fittest survivalOf ofThe theFittest ofFittest law lawww jungle natural selection naturalSelection blood bloody violent violence thought c88thought inspiration c88inspirationCurrent: ti88crr88y19 ti88crr88y19dw2 ti88crr88y19m03 ti88crr88y19m03d19 ti88crr88y19m03dw2 ti88crr88y19q1 ti88crr88y19q1dw2 ti88crr88y19w12 ti88crr88y19w12dw2Time (d): ti88y19 ti88y19dw2 ti88y19m03 ti88y19m03d19 ti88y19m03dw2 ti88y19q1 ti88y19q1dw2 ti88y19w12 ti88y19w12dw2</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190318 ( Log table ) 2019-03</title>
      <link href="/treegbBlog/19/03/18/190318m150030/"/>
      <url>/treegbBlog/19/03/18/190318m150030/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> -</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>2019-03:</strong> <a href="#190324m174523">Section</a>.</li>    <li><strong>2019-03-07 ~ 2019-03-19 ( old format ) ( text only ):</strong> <a href="#190324m175109">Section</a>.</li>    <li><strong>2019-03-07:</strong> <a href="#190324m175454">Section</a>.</li>    <li><strong>2019-03-20:</strong> <a href="#190324m175230">Section</a>.</li>    <li><strong>2019-03-21:</strong> <a href="#190324m175231">Section</a>.</li>    <li><strong>2019-03-22:</strong> <a href="#190324m175232">Section</a>.</li>    <li><strong>2019-03-23:</strong> <a href="#190324m175233">Section</a>.</li>    <li><strong>2019-03-24:</strong> <a href="#190324m175234">Section</a>.</li>    <li><strong>2019-03-25:</strong> <a href="#190325m180646">Section</a>.</li>    <li><strong>2019-03-26:</strong> <a href="#190326m040924">Section</a>.</li>    <li><strong>2019-03-27:</strong> <a href="#190327m022711">Section</a>.</li>    <li><strong>2019-03-28:</strong> <a href="#190328m012519">Section</a>.</li>    <li><strong>2019-03-29:</strong> <a href="#190329m013850">Section</a>.</li>    <li><strong>2019-03-30:</strong> <a href="#190330m003231">Section</a>.</li>    <li><strong>2019-03-31:</strong> <a href="#190331m004604">Section</a>.</li>  </ol></div><div class="h2">  <h2>2019-03<a id="190324m174523"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03.svg" alt="2019-03">  </div></div><div class="h2">  <h2>2019-03-07 ~ 2019-03-19 ( old format ) ( text only )<a id="190324m175109"></a></h2>  <ol>    <li><strong>19-03-07 19:08 Defining "log::table" and "log::detail". Create first log table.</strong></li>    <li><strong>19-03-07 19:13 Inspiration of "log table" come from:</strong> I think something give me inspiration to make <span style="text-decoration: underline;"> log table</span> is this <a href="https://youtu.be/olUVti4oyUA" target="_blank" rel="noopener">link</a>, she mentioned she has no time to organize the content she type in here onenote, she just keep typing. It give me inspiration about I should do this with my log system too.</li>    <li><strong>19-03-07 19:23 Playing with Draw.io:</strong> I started to read <span style="text-decoration: underline;">Brave New World</span> again, then I was playing with concept map, then I started to build concept map for chapter 3, then I was comparing if I should use Inkscape or Draw.io to draw concept map. After carefully comparison, I chose Draw.io. Moving nodes (shapes) in inkscape is too damn time consuming compare with Draw.io. // (kw: drawIo).</li>    <li><strong>19-03-07 20:13 Watching youtube:</strong> Keep watching youtube, like <a href="https://youtu.be/zntmeAs99-s" target="_blank" rel="noopener">啾啾鞋</a>. <a href="https://youtu.be/z37SIZ3Q3rY" target="_blank" rel="noopener">What Could Go Wrong - Instant regret Compilatio</a>.</li>    <li><strong>19-03-07 20:55 Feeling sleepy now:</strong> I'm feeling sleepy, really nothing I can do, I don't want to watch youtube again. I go buy some drinks. I'm sleepy because I messed up my body sleep routine recently, I go to sleep around 06:00 yesterday.</li>    <li><strong>19-03-07 21:04 Decide I have to keep moving:</strong> I have to keep reading the book (<span style="text-decoration: underline;">Brave New World</span>), the time is passing, I just have to overcome this tired what ever, otherwise basically do nothing today.</li>    <li><strong>19-03-07 21:53 Watching youtube:</strong> Feeling very low productivity when reading the book, I just don't have enough energy to read, too sleepy.</li>    <li><strong>19-03-07 23:54 Searching online svg editor:</strong> Searching if there is any useful online svg editor, <strong>with no good reason</strong> (just because watched youtube video about online drawing tools). And finally I found there is nothing better then inkscape, inkscape is the most robust tool in the all, research done, no need to do further research in the future (unless you can't install inkscape in some special working place).</li>    <li><strong>19-03-08 01:33 Designing concept map:</strong> When I'm in shower, I was thinking about the problem concept map has, in natural. A concept map is build by multiple pieces of [ concept ]-[ node ], and connected by connect phase. Sometimes this is fine, if distanced 2 [ concept ]-[ node ] that is not neighbor to each other, are not in same context, but if those [ concept ]-[ node ] are in same context, it cause a bit confusing, and more worse, if you have multiple context rely on same [ concept ]-[ node ], they fight together, and causing reader confused about the context. To solve this, I bring the context id (number) into the connector (connect phase), so reader can easily distinguish 2 things: 1. When reader see the number, they know there must be the bigger context, across multiple [ concepts ]-[ node ], only when reader pass through multiple [ concepts ]-[ node ] then they could <strong>understand the whole context</strong>. 2. Reader can distinguish different context even the [ concept ]-[ node ] are <strong>shared</strong> (same [ concept ]-[ node ] are used multiple times for different context), and close to each other.</li>    <li><strong>19-03-08 03:02 Found subReddit "/r/ICanDrawThat":</strong> Cool, I hope same thing could happens on programming, where people enthusiastic for offering their programming skills, can meet people request someone can use programming to solve their problem. // (Kw: reddit).</li>    <li><strong>19-03-08 12:40 Waking up.</strong></li>    <li><strong>19-03-08 13:54 Watch video:</strong> <a href="https://youtu.be/d_24Tgsc0vo" target="_blank" rel="noopener">【科普】“视频”是怎么来的？H.264、码率这些词又是什么意思？</a>.</li>    <li><strong>19-03-08 14:31 Cooking and eating.</strong></li>    <li><strong>19-03-08 19:45 Playing with concept map:</strong> <a href="https://treegb.github.io/lts/19/03/08/190308m220249/visa.svg" target="_blank" rel="noopener">Link</a>. Totally killing time.</li>    <li><strong>19-03-08 23:12 Keep reading book:</strong> After the boring and unsatisfied (of finding the chance to "offer something" to people) for 1 to 2 days (wasting 1 to 2 days entirely), I finally in the mood of ready of keep reading book. I have no choice, I have to be in the [ moment ]-[ now ].</li>    <li><strong>19-03-09 00:23 Finish chapter 4, cooking:</strong> Still reading very slow, part of because of making concept map.</li>    <li><strong>19-03-09 13:40 Waking up.</strong></li>    <li><strong>19-03-09 21:46 Keep reading book:</strong> In the past few hours, I basically did nothing except watching youtube. Now I'm reading chapter 5.</li>    <li><strong>19-03-10 09:30 Waking up.</strong></li>    <li><strong>19-03-10 10:14 Cooking:</strong> Cooking (noodle and carrot) and watching youtube.</li>    <li><strong>19-03-10 11:13 Keep reading book:</strong> Brave New World, chapter 6.</li>    <li><strong>19-03-10 13:30 Take a nap:</strong> 33 minutes.</li>    <li><strong>19-03-10 14:32 Watching youtube:</strong> Nothing useful.</li>    <li><strong>19-03-10 15:20 Designing concept map style:</strong> Tweaking font size, font color, line [ width ]-[ thickness ] ... .</li>    <li><strong>19-03-10 16:30 Watching youtube:</strong> Today I keep feel sleepy, don't have energy to do something useful that need brain. I'm not tired, I'm just sleepy. Watching drug (methamphetamine) <span class="tlid-translation translation"><span class title>epidemic</span></span> documentary.</li>    <li><strong>19-03-10 17:49 </strong><strong>Keep reading book:</strong> Brave New World, chapter 6.</li>    <li><strong>19-03-10 19:55 </strong><strong>Finish chapter 6:</strong> And cooking, and watching youtube.</li>    <li><strong>19-03-10 20:30 Update blog</strong><strong>:</strong> Add concept map SVG image of Brave New World to blog, and update to github.</li>    <li><strong>19-03-11 00:01 </strong><strong>Keep reading book:</strong> Brave New World, chapter 7. And keep writing concept map.</li>    <li><strong>19-03-11 00:40 Watching youtube</strong><strong>:</strong> About to sleep.</li>    <li><strong>19-03-11 01:25 Sleep</strong><strong>.</strong></li>    <li><strong>19-03-11 07:20 Awake</strong><strong>:</strong> Struggle to fall to sleep after pee, so I wake up and do something. Watching youtube, nothing useful.</li>    <li><strong>19-03-11 07:30 Cooking</strong><strong>:</strong> Cooking and dance to music ([ Coldplay ]-[ Something Just Like This ]-[ CALGOS Remix ]).</li>    <li><strong>19-03-11 07:50 Researching social media alternative</strong><strong>:</strong> Try to find [ facebook ]-[ social media ] alternative. Current conclusion is, there is no good alternative, the biggest good alternative (but even though they are still having relative small user base) is <span style="text-decoration: underline;">Diaspora</span> and <span style="text-decoration: underline;">minds.com</span>, which both care about privacy. // Reddit is good, but reddit is not good for putting self content, it is community based, not personal based, this is why I'm finding social media alternative, other than Reddit.</li>    <li><strong>19-03-11 12:00 Sleep</strong><strong>:</strong> Sleep for 3 hours and 30 minutes.</li>    <li><strong>19-03-11 16:30 </strong><strong>Keep reading book:</strong> Brave New World, chapter 7. Actually, I'm still changing concept map style when I'm reading, so I didn't push much.</li>    <li><strong>19-03-11 18:40 Cooking</strong><strong>.</strong></li>    <li><strong>19-03-11 19:00 Watching youtube</strong><strong>:</strong> Video about prison life - <a href="https://youtu.be/91Ca5xagj04" target="_blank" rel="noopener">Hard Time S2 E8: Worst of the Worst</a>. After watching this documentary, I even have stronger feel this about this (I thought this before) - everything is meaningless, it all up to you how you give the meaning to anything, <strong>people can chose to feel bored or fun in the jail</strong>. If you feel like something is meaningful, it is, vice versa. We can create meaning, <strong>out from empty</strong>, we can create our own game in our lifetime.</li>    <li><strong>19-03-11 22:00 </strong><strong>Keep reading book:</strong> Brave New World, chapter 7.</li>    <li><strong>19-03-11 22:51 </strong><strong>Keep reading book:</strong> Brave New World, chapter 8.</li>    <li><strong>19-03-12 01:30 Sleep:</strong> Watching youtube before sleep.</li>    <li><strong>19-03-12 07:29 Morning w</strong><strong>aking up:</strong> Only 6 hours of sleep, not energetic I think, and I think I still need to finish 2 hour of sleep later.</li>    <li><strong>19-03-12 08:00 What is Web Socket</strong><strong>:</strong> <a href="https://youtu.be/FmaBZcQzL-Y" target="_blank" rel="noopener">Link</a>. Why we need web socket? What is it different than Ajax? WS is bidirectional, and it don't close connection (only send header once, then after this connection is not closed)?</li>    <li><strong>19-03-12 08:20 Watching youtube "高學歷不務正業不行嗎"</strong><strong>:</strong> <a href="https://youtu.be/aQBOQGyipKM" target="_blank" rel="noopener">Link</a>. Title - "【完整版】高學歷不務正業不行嗎? 20190306【李家同、宋耿郎、陳光中、柯明賢】". Conclusion - 1. All type of people and occupation are required and equally important. 2. Cross-field skills are important to survive in this age. 3. [ Meaning ]-[ meaninful ] is subjective ... have just proved again.</li>    <li><strong>19-03-12 10:30 Found { Minds}</strong><strong>:</strong> <a href="http://yourlearnpak.com/joe-rogan-is-driving-thousands-of-users-to-a-new-social-media-platform-called-minds/?preview=true&amp;_thumbnail_id=3101" target="_blank" rel="noopener">Joe Rogan is driving thousands of users to a new social media platform called Minds</a>.</li>    <li><strong>19-03-12 12:00 Sleep</strong><strong>:</strong> 2 hour.</li>    <li><strong>19-03-12 14:20 Wake up.</strong></li>    <li><strong>19-03-12 15:10 Designing concept map, is [ html ]-[ text ] version possible?:</strong> I'm thinking about use html webpage (pure text) to implement concept map. I will try to exploit the "ul,,li" elements.</li>    <li><strong>19-03-12 19:50 Finished designing concept map,, node,, reverse indexing system?:</strong> Ok, problem solved, now I extract those "heavy nodes", outside to new svg image, and use "inverse indexing" to make some [ "backlink" ]-[ connection ] back to original nodes, so both "linking" direction works (there is no any [ html ]-[ href ] linking, the linking I mention here is visually only, so even export to jpg, it works too), and with [ reverse indexing ]-[ backlink ], now I have build stronger connection in my brain of these related concepts, in any [ direction ]**[ viewpoint ].</li>    <li><strong>19-03-12 19:51 Dancing:</strong> What th fuck, I'm dancing (casually, I don't know how to dance) with <a href="https://youtu.be/7XjhD-Eo8jo" target="_blank" rel="noopener">this song</a>. So engaging, when the rhythm (dance) is sync with music, the feeling is so right and good.</li>    <li><strong>19-03-13 09:00 Making concept map on { Minds }:</strong> <a href="https://youtu.be/mJowz_-pj4U" target="_blank" rel="noopener">Joe Rogan Experience #1248 - Bill Ottman</a>. At first I just want to do concept map for fun, but out of my expect, it consume me more than 1 day and I feel like the content don't worth the detail concept map like this (rich concept map). But at least, with this <strong>"real data"</strong>, I now have better system (concept map) to handle complex data, and my style change a lot.</li>    <li><strong>19-03-14 14:20 Morning wake up.</strong></li>    <li><strong>19-03-14 20:20 Finished { Minds },, concept map.</strong></li>    <li><strong>19-03-15 16:35 Keep reading book:</strong> Brave New World, chapter 9. Listen to <a href="https://youtu.be/eceHIDmO28o" target="_blank" rel="noopener">music</a> in background, though I know this is bad idea, because I can't really focus on story.</li>    <li><strong>19-03-15 20:35 Dinner:</strong> Brave New World, reading process to half of chapter 10. I spent some time on tweaking concept map again. Taking shower and cooking dinner.</li>    <li><strong>19-03-16 12:15 Morning wake up.</strong></li>    <li><strong>19-03-16 12:40 Keep reading book:</strong> Brave New World, chapter 10. Including carefully and slowly designing "context scope numbering" system in concept map (e.g. <code>{ node under context 7} -- 7: connecting text --&gt; { node under context 7 and 8 } -- (7)8: connecting text --&gt; { node under context 8 } -- 8: connecting text --&gt; { node under context 8 }</code> ).</li>    <li><strong>19-03-16 15:00 Cooking lunch:</strong> After eating, I post a new blog <a href="https://treegb.github.io/treegbBlog/19/03/16/190316m162051/" target="_blank" rel="noopener">190316 [ Testing abstract concept map ]-[ we don't own our partner ever ]</a>. At first I wast just challenging myself to convert that text to concept map, but later I found I want to took it more serious and it became a blog.</li>    <li><strong>19-03-16 21:10 Keep reading book:</strong> Brave New World, chapter 11.</li>    <li><strong>19-03-16 22:30 Cooking dinner:</strong> Finished Brave New World, chapter 11, but still not taking note yet.</li>    <li><strong>19-03-17 00:30 Sleep.</strong></li>    <li><strong>19-03-17 08:00 Morning wake up:</strong> Wake up and watching youtube.</li>    <li><strong>19-03-17 08:25 Making note:</strong> Brave New World, chapter 11. I feel like I've spent too much time on drawing concept map, I spent too much time adjusting unimportant visual stuff. Typing text is way faster than organizing the concept map. But at least, for reader standpoint, concept map is a lot easier than text to read, especially the first time, they don't know the huge story at before, then in this circumstances, concept map will have more advantage.</li>    <li><strong>19-03-17 12:00 Cooking lunch.</strong></li>    <li><strong>19-03-17 16:50 Making note:</strong> Brave New World, chapter 11.</li>    <li><strong>19-03-17 18:00 Relax.</strong></li>    <li><strong>19-03-17 21:50 Found high quality youtube channel { CBC Docs }:</strong> From <a href="https://youtu.be/ZVlZMOB-Sq0" target="_blank" rel="noopener">this video</a>.</li>    <li><strong>19-03-17 21:51 Keep reading book:</strong> Brave New World, chapter 12.</li>    <li><strong>19-03-17 23:00 Watching youtube:</strong> Too sleepy to read. About to sleep. Watching <a href="https://youtu.be/Dn09m3WOa_w" target="_blank" rel="noopener">世紀帝國</a> and eating junk food.</li>    <li><strong>19-03-17 23:55 Sleep.</strong></li>    <li><strong>19-03-18 06:50 Morning wake up:</strong> Lacking 2 hours of sleeping, I wake up earlier. After getting up I watching youtube until nothing to do.</li>    <li><strong>19-03-18 07:40 Making note:</strong> Brave New World, chapter 12.</li>    <li><strong>19-03-18 09:00 Cooking and breakfast:</strong> Watching youtube <a href="https://youtu.be/dlIaPWkFwJc" target="_blank" rel="noopener">[ 大雲時堂 ]-[ 特殊行業 ]-[ 命案清理、微縮模型、代客排隊 ]</a>.</li>    <li><strong>19-03-18 10:30 Making note:</strong> Brave New World, chapter 12.</li>    <li><strong>19-03-18 11:45 Sleep:</strong> Finished the note of Brave New World, chapter 12. The reason I spent so much time is because I always try to condense the story into small piece of concept map structure, though this is not necessary. It is playful and challenging (when the logic is sophisticated and works in all direction, but only few nodes and connections needed), honestly, this is one of the reason why I doing this, instead of story itself.</li>    <li><strong>19-03-18 13:40 Wake up.</strong></li>    <li><strong>19-03-18 13:41 Watching youtube:</strong> <a href="https://youtu.be/xXaIjvRazMQ" target="_blank" rel="noopener">爸媽囧很大 第435集 談戀愛變了調　女兒報復前男友</a>. Junk video.</li>    <li><strong>19-03-18 14:40 Public the { Log Table } to web:</strong> This log table, is now public to web, my activities will be exposed under the sun :D.</li>    <li><strong>19-03-18 16:10 Keep reading book:</strong> Brave New World, chapter 13.</li>    <li><strong>19-03-18 19:10 Finished Brave New World,, chapter 13,, concept map.</strong></li>    <li><strong>19-03-18 20:20 Cooking dinner.</strong></li>    <li><strong>19-03-18 21:00 Feeling very sleepy:</strong> Even watching video, still being at very low efficiency.</li>    <li><strong>19-03-18 22:10 Sleep:</strong> Too sleepy, totally not productive to do anything even watching video.</li>    <li><strong>19-03-19 02:20 Insomnia:</strong> Only sleep for 4 hours, will need another 4 hours sleeping later. Very weird, I get insomnia recently, always because I get up to pee.</li>    <li><strong>19-03-19 02:21 Cleaning concept map:</strong> Since have no idea what to do first, I  do some [ clean up ]-[ organizing ] of Brave New World,, concept map.</li>    <li><strong>19-03-19 04:50 Sleep again:</strong> To 11:14.</li>    <li><strong>19-03-19 11:15 Watching youtube</strong>: <a href="https://youtu.be/vmnuj5SoG-o" target="_blank" rel="noopener">動物星球頻道 《獅王之路(上)》</a>.</li>    <li><strong>19-03-19 12:00 Do the laundry.</strong></li>    <li><strong>19-03-19 12:50 Buying food:</strong> Buying foods like tofu and water. Also drinks, I found sugar can provide some energy, when necessary, but I think I should avoid this as possible as I could, only use them "in necessary".</li>    <li><strong>19-03-19 13:00 Re-organizing concept map:</strong> Split the overview.svg,, chapters to individual image.</li>    <li><strong>19-03-19 13:20 Cooking lunch:</strong> And <a href="https://www.hopenglish.com/thing-asian-parents-do-2" target="_blank" rel="noopener">hang out the laundry</a>.</li>    <li><strong>19-03-19 13:50 Watching video { The lions of Sabi Sand }:</strong> Having lunch. Watching video <code>The lions of Sabi Sand</code>, and write a post about it.</li>    <li><strong>19-03-19 15:55 Keep reading book:</strong> To 18:44. Brave New World, chapter 14 ~ 18, not taking note yet because I think I need to organizing the big concept the author want to give us.</li>    <li><strong>19-03-19 18:45 Watching youtube:</strong> Nothing useful.</li>    <li><strong>19-03-19 20:35 Keep reading book:</strong> Brave New World, chapter 18.</li>    <li><strong>19-03-19 22:25 Cooking dinner:</strong> Finally I finished reading Brave New World, but still don't get the metaphor author want to give us. So I continue reading <code>Brave New World Revisited</code>.</li>    <li><strong>19-03-20 01:33 Sleeping.</strong></li>    <li><strong>19-03-20 10:10 Morning wake up:</strong> I fall asleep very late, so I get up late too. I was thinking about if I can turn all <span style="text-decoration: underline;">log table</span> into concept map form.</li>    <li><strong>19-03-20 10:25 Experimenting with "visual" log table:</strong> I fall asleep very late last night, because I was thinking about if I can turn all <span style="text-decoration: underline;">log table</span> into concept map form, like a clock, split 360 degree with 24 slices, each slice  represent a hour. And I draw concept map (to express a log record) based on what I was doing with those individual hours ... After a month, I draw another map, split 360 degree with 30 (or 31) slices, each slice represent a day, [ log down ]-[ showing ] the important things I done in these 30 (or 31) days.</li>    <li><strong>19-03-20 14:45 Convert { log table },, text form to { concept map }, no longer update it in Joomla side:</strong> I take serious about should I convert my { log table } to { concept map }? It is so hard to decide, since I don't know if it is realistic in long run. Concept Map is easiy to grasp concepts and find keywords, but very time consuming to make. Hard to navigate with mobile devices that only has tiny screen. You have to open each image one by one individually. You can't search on concept map, the hyper links don't work (svg do support hyper line, but for compatibility reason I better not use it). // The biggest advantage of concept map is, normal text on webpage is too "enegy consuming" to read, in the end my log table will have records in full month (amount), that might be around 30 ~ 150 records, and who (including me) will every want to read that? Visually form presentation (concept map) solve this problem, it reduce cognitive load and those logs will still have value (to look back) in the future, simply because it is easier and more enjoyable to read. // Another advantage is, it is mor fun to make concept map, and I think it will subconsciously influence how you [ value ]-[ spend ] your time (instead of wasting it), if you represent it with visual form.</li>  </ol></div><div class="h2">  <h2>2019-03-07<a id="190324m175454"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-07.svg" alt="2019-03-07">  </div></div><div class="h2">  <h2>2019-03-20<a id="190324m175230"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-20.svg" alt="2019-03-20">  </div>  <ol>    <li><strong>{ 2019文贵看春晚3 采访达赖喇叭 } video:</strong> <a href="https://youtu.be/bbC6pgebPJE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>[ 骨盆傾斜練習 ]-[ 縮小腹時的脊椎姿勢 ]-[ 鄭雲龍 ]-[ video ]:</strong> <a href="https://youtu.be/zT6crqiha9E" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-21<a id="190324m175231"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-21.svg" alt="2019-03-21">  </div>  <ol>    <li><strong>{ Semantic Network }:</strong> <a href="https://en.wikipedia.org/wiki/Semantic_network" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ Concept Map } "context" problem:</strong> <a href="http://www.jfsowa.com/pubs/semnet.htm" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ List of hobbies }-[ wikipedia page ]:</strong> <a href="https://en.wikipedia.org/wiki/List_of_hobbies" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ How can you see the 4th dimension } video:</strong> <a href="https://youtu.be/0t4aKJuKP0Q" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>How not to be bored:</strong> <a href="https://www.quora.com/What-should-we-do-if-our-life-is-boring" target="_blank" rel="noopener">Link1</a>, <a href="https://www.huffpost.com/entry/the-science-of-happiness_n_5a73398ae4b0146e594513e1" target="_blank" rel="noopener">Link2</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-22<a id="190324m175232"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-22.svg" alt="2019-03-22">  </div>  <ol>    <li><strong>{ Jahirul Islam }:</strong>      <ol>        <li><strong>Reddit id:</strong> <a href="https://www.reddit.com/user/Still_Technician" target="_blank" rel="noopener">Still_Technician</a>.</li>        <li><strong>[ Reddit ]-{ looking for personal website portfolio developing }:</strong> <a href="https://www.reddit.com/r/ProgrammingBuddies/comments/aukuec/looking_for_personal_website_portfolio_developing/" target="_blank" rel="noopener">Link</a>.</li>      </ol>  </li></ol></div><div class="h2">  <h2>2019-03-23<a id="190324m175233"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-23.svg" alt="2019-03-23">  </div>  <ol>    <li><strong>{ A Journey into the 4th Dimension } video:</strong> <a href="https://youtu.be/4URVJ3D8e8k" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-24<a id="190324m175234"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-24.svg" alt="2019-03-24">  </div>  <ol>    <li><strong>{ VeganHacktivists.org is looking for volunteer Developers and Designers! }:</strong> <a href="https://www.reddit.com/r/vegan/comments/b47m7m/veganhacktivistsorg_is_looking_for_volunteer/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Applying:</strong>      <p>Please make a post in #apply-here with the following information:</p>      <blockquote>      <pre>  FOR DEVELOPERS APPLYING:  Name:  Age:  How long Vegan?:  Code Languages?:  Portfolio? (not required):  Frameworks? (list any familiar):  Familiar with Github? Trello?:  Hours per week can help (flexible):  Reddit username:  Timezone:  Extra notes?:  FOR DESIGNERS APPLYING:  Name:  Age:  How long Vegan?:  Experience with what programs? (ex: photoshop):  Portfolio? (not required):  Hours per week can help (flexible):  Reddit username:  Timezone:  Extra notes?:      </pre>      </blockquote>      <p>Note: it may take us an hour or a few days to get back to you, please make sure you keep discord installed/open for notifications and check back!</p>    </li>    <li><strong>{ 台灣社會缺乏的道德觀念-貴族風範 }:</strong> <a href="https://youtu.be/CAgVZk8sp6Q" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-25<a id="190325m180646"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-25.svg" alt="2019-03-25">  </div></div><div class="h2">  <h2>2019-03-26<a id="190326m040924"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-26.svg" alt="2019-03-26">  </div>  <ol>    <li><strong>{ Joseph Goebbels } (約瑟夫·戈培爾):</strong> <a href="https://zh.wikipedia.org/zh-tw/%E7%B4%84%E7%91%9F%E5%A4%AB%C2%B7%E6%88%88%E5%9F%B9%E7%88%BE" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-27<a id="190327m022711"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-27.svg" alt="2019-03-27">  </div>  <ol>    <li><strong>[ Vue JS Crash Course - 2019 ]-{ Traversy Media }:</strong> <a href="https://youtu.be/Wy9q22isx3U" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>[ Owl sketching ]-[ dense and loose focusing distribution ]:</strong> <a href="https://citizensketcher.com/2015/10/20/sketching-birds-from-life-video-demonstration/" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>[ 10 Beginner Drawing Tips ]-{ entertainment design }:</strong> <a href="https://youtu.be/r5nvzsslajk?t=110" target="_blank" rel="noopener">Link</a>. He is professional working for cinema industry, also see <a href="https://youtu.be/mvWgfYFLk9Q" target="_blank" rel="noopener">Design Cinema - EP 94 - Form Follows Function</a> (<code>environment concept design</code>) for glimpse about the skills level he have.</li>  </ol></div><div class="h2">  <h2>2019-03-28<a id="190328m012519"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-28.svg" alt="2019-03-28">  </div>  <ol>    <li><strong>( Music ) { Hans Zimmer }-{ Now We Are Free }-[ movie Gladiator soundtrack ]:</strong> <a href="https://youtu.be/xbHPTPUpQ1I" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Thomas Bergersen }-{ New Life }-{ Sun }:</strong> <a href="https://youtu.be/m9N9MewJde0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { Thomas Bergersen }-{ Autumn Love }:</strong> <a href="https://youtu.be/8ukHSu3vvrc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Game ) AoE2 Pro vs Noobs! "This Is Not Supposed To Happen":</strong> <a href="https://youtu.be/u6_Gh7CWqaw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>[ Vue Doc ]-[ introduction ]-[ getting started ]:</strong> <a href="https://vuejs.org/v2/guide/" target="_blank" rel="noopener">Link</a>. Including the concept of <code>directive</code> and <code>component</code>.</li>    <li><strong>( Music ) { Jim Yosef }-{ Firefly }:</strong> <a href="https://youtu.be/kpUYxQzbMe0" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ 抖音 }-[ 小姐姐你觉得一斤铁和一斤棉花那个重？用你的身体感受一下 ]:</strong> <a href="https://youtu.be/uxNouRocxSM" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-29<a id="190329m013850"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-29.svg" alt="2019-03-29">  </div>  <ol>    <li><strong>[ Video ]-[ flight simulator ]-[ kaohsiung to taipei ]:</strong>      <ol>        <li><strong>Link:</strong> <a href="https://youtu.be/2JsqCOHAc9I" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Personality and skills require of being a pilot (or astronauts? leader?):</strong>          <ol>            <li><strong>Mental quality (this is most important I think)</strong>, include very good rational ability (to follow all SOP), able to resist over many times of failure, able to endure pressure, able to endure long term boring learning, practice, training before any real flight.</li>            <li>Smart and can grasp everything in real time all in head (leader, commander).</li>            <li>English.</li>            <li>Physical strength (only jet pilot require this).</li>            <li>Memorizing all cockpit position (blindfolded test) and code name (abbreviation) without any error, any error is intolerable.</li>            <li>Have very well understanding of all procedures, takeoff plans, communication with tower, numbers and calculation, geography, climate, plane itself (including landing technique) ... just know every detal of <strong>every aspect</strong> of the whole system related to flight. Same again, any error is intolerable.</li>            <li>When it comes to safty, any error is intolerable. The testing score of a pilot is always with either 100 or 0, never something in between, this is due to the absolute safty require of flight.</li>            <li><strong>Only</strong> all previous requirement are fulfilled, than a pilot can <strong>starts to enjoy the real joy</strong> of flight, otherwise, they don't get it. This might be the same in every fields, the real joy only comes after ones reach certain hight of bar.</li>          </ol>        </li>        <li><strong>SOP and modularized everything:</strong> For safty and efficiency reason, they SOP and modularized everything, even include very small detail like <a href="https://youtu.be/2JsqCOHAc9I?t=2132" target="_blank" rel="noopener">turning the direction on the air</a> (They request the <code>ATC</code> (air traffic control) twice, not once, for the minor flight direction (orientation) change, I guess it is because the ATC have to control many plane at the same time, the most safe system is, by breaking each movement of a plane, to pieces, every movement is irrelevance, so they <strong>can predict</strong> (and have control)). This makes me think about <code>coherence</code> and <code>couple</code> in <strong>programming</strong>, we always make components <a href="http://www.tonymarston.net/php-mysql/dependency-injection-is-evil.html#cohesion" target="_blank" rel="noopener">have high coherence and low couple as possible</a>, to deal with very complex system that even we can only understand a small piece at a time.</li>      </ol>    </li>    <li><strong>{ 抖音 }-[ funny videos ] :</strong> <a href="https://youtu.be/TTPSTyQPj7o" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>[ Book ]-{ 向下扎根！德國教育的公民思辨課 1 ~ 6 } :</strong> <a href="https://www.twreporter.org/a/bookreview-civic-education" target="_blank" rel="noopener">[ 報導者 ]-{ Miru／公民，不只是投票跟滑手機 }</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-30<a id="190330m003231"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-30.svg" alt="2019-03-30">  </div>  <ol>    <li><strong>{ MDN }-[ Fetching data from the server ]:</strong> <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data" target="_blank" rel="noopener">Link</a>. Including <code>AJAX</code>, <code>Fetch API</code> and <code>XMLHttpRequest (XHR)</code>.</li>    <li><strong>Why I think use native file system,, directory structure to manage files is bad idea:</strong> See <a href="https://youtu.be/86FiUbbRxaw" target="_blank" rel="noopener">Link1</a> and <a href="https://youtu.be/uSnpAnhV2Jo" target="_blank" rel="noopener">link2</a>, I already thought about this problem long time ago, the traditional file system,, directory structure just can't solve this problem, they are terrible solution, because those file always have <strong>multi-dimension</strong> information, not one dimension (e.g. date, subject, author, file type, event, location, importance has 7 dimension already). The correct solution is just build up a Web App, and use <strong>tags</strong> (or even better <strong><code>facets</code></strong>) to store, organize files and search with specific dimension inside these multi-dimension information files.</li>    <li><strong>{ Energy Level } in art:</strong>      <ol>      <li><strong>I think I start to learn somthing:</strong> I think I start to learn somthing from content related to art, it seems all <strong>art</strong> (music, <a href="https://youtu.be/7jKGRg2mlXo?t=2122" target="_blank" rel="noopener">dance</a>, drawing, animation ...) has at least these 2 <strong>essence</strong> - { 1. Balance between unpredictable and predictable. 2. In every individual specific case there are only specific "level" you can (should) use, just like <a href="https://en.wikipedia.org/wiki/Energy_level" target="_blank" rel="noopener">Energy Level</a> in chemistry (though I know nothing about it). Example such as <code>Note Value</code> in music, spacing and font size in typography, color using in graphic design ... }.</li>      <li><strong>When { Energy Level } rise and drops:</strong> I often found in every art piece, when "lower level" rise to "higher level", it rise <strong>fast and crisp</strong>, the level <strong>never stays in between, or slow and mild</strong>, otherwise it will ruin the art piece very fast. When "higher level" drops to "lower level", it also drops fast and crisp and the level never stays in between.</li>      <li><strong>Some example:</strong> For example, the <code>Note Value</code> (or <code>Note Duration</code>) in <a href="https://youtu.be/x_OwcYTNbHs?t=43" target="_blank" rel="noopener">music</a>, the Note Value raise from "1/2" to "1/4" to "1/8" to "1/16" ... (in reality something like "3/8" is possible, but that is not my point here). For example in <code>typography</code>, the font size (or spacing) in lower level might be 0.0625em, 0.125em, when it rise to higher level, it rise directly up to 0.9em, 1em, 1.2em, when it rise again, it might be something like 4.6em, 5em, never something in between. For example <code>color theory</code> in web design, in theory you can use as many color as you want, there is 6,000,000 of colors you can pick freely for your webpage, but in reality, you shouldn't use too much color, you should only use like 3 ~ 4 of them for most, you might use <span style="background-color: #e1d199ff ; color: rgba(0, 0, 0, 0.1)">this color</span>, or <span style="background-color: #bbd68b ; color: rgba(0, 0, 0, 0.1)">this color</span>, or <span style="background-color: #461b1b ; color: rgba(0, 0, 0, 0.1)">this color</span>, but never <span style="background-color: #4762f7 ; color: rgba(0, 0, 0, 0.1)">this color</span>. There is just many "Energy Level" can't be used.</li>      </ol>    </li>    <li><strong>( Music ) { Thomas Bergersen }-{ Colors of Love }-{ Sun }:</strong> <a href="https://youtu.be/ZuGiwDQEvDc" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { 閃靈 }-{ Chthonic }-{ 千歲 }-[ 民謠版 ]:</strong> <a href="https://youtu.be/0G6aRIwrxdQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { 閃靈 }-{ Chthonic }-{ 千歲 }-[ 搖滾版 ]:</strong> <a href="https://youtu.be/Za8_2D_dmrQ" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Music ) { 全家 }-[ 廣告 ]-[ 30周年 ]-{ 未來，時時刻刻都在家 }:</strong> <a href="https://youtu.be/8JI-8pBft1w" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( video ) { She's Danni }-[ vlog ]-[ Vlog 35｜电影院起火了🔥雪山徒步｜给喵刷牙｜卖车 ]:</strong> <a href="https://youtu.be/5gEua5gh9uo" target="_blank" rel="noopener">Link</a>. She and he is both programmer.</li>    <li><strong>( Video ) { 抖音 }-[dance]-[ 中国各个民族小姐姐大合集 ]:</strong> <a href="https://youtu.be/7jKGRg2mlXo" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { 館長 }-[ 所有運動員都在用禁藥 ]:</strong> <a href="https://youtu.be/s7pnB3ym10o" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>( Video ) { 爸媽囧很大 }-{ 第433集 爸媽！我和老師戀愛了？ }:</strong> <a href="https://youtu.be/V5AREoFWomg" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><div class="h2">  <h2>2019-03-31<a id="190331m004604"></a></h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/18/190318m150030/2019-03-31.svg" alt="2019-03-31">  </div>  <ol>    <li><strong>[ Music composition ]-[ Fundamental Rhythm Explained for Beginners ]:</strong> <a href="https://youtu.be/bAK5-pUxSDE" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>[ Music composition ] -[ How to Understand and Count in 6/8 Time Signature]:</strong> <a href="https://youtu.be/rXSW6LdIIuw" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>{ 12 Things Successful People Do Differently }:</strong>      <ol>        <li><strong>Link:</strong> <a href="http://www.marcandangel.com/2012/01/22/12-things-successful-people-do-differently/" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>Focus your attention on one thing at a time:</strong> [ Book ]-{ The One Thing }-{ Gary Keller }.</li>        <li><strong>They focus on making small, continuous improvements:</strong> Henry Ford once said, “Nothing is particularly hard if you divide it into small pieces.” The same concept configured as a question:  How do you eat an elephant?  Answer: One bite at a time.  This philosophy holds true for achieving your biggest goals.  Making small, positive changes – eating a little healthier, exercising a little, creating some small productive habits, for example – is an amazing way to get excited about life and slowly reach the level of success you aspire to.</li>        <li><strong>They avoid the trap of trying to make things perfect:</strong> --{ Remember, the real world doesn’t reward perfectionists.  It rewards people who get things done.  And the only way to get things done is to be imperfect 99% of the time.  Only by wading through years of practice and imperfection can we begin to achieve momentary glimpses of the perfection. }--, --{ The simple act of getting started and doing something will give you the momentum you need, and soon you’ll find yourself in a positive spiral of changes – one building on the other. }--.</li>        <li><strong>They keep things simple:</strong> --{ Several business and marketing studies have shown that the more product choices a consumer is faced with, the less products they typically buy.  After all, narrowing down the best product from a pool of three choices is certainly a lot easier than narrowing down the best product from a pool of three hundred choices.  If the purchasing decision is tough to make, most people will just give up.  Likewise, if you complicate your life by inundating yourself with too many choices, your subconscious mind will give up. }--, --{ If you’re trying to make a decision about something in your life, don’t waste all your time evaluating every last detail of every possible option.  Choose something that you think will work and give it a shot.  If it doesn’t work out, learn what you can from the experience, choose something else and keep pressing forward. }--.</li>        <li><strong>They measure and track their progress.</strong></li>        <li><strong>They spend time with the right people (and things that have value).</strong></li>        <li><strong>They maintain balance in their life:</strong> --{ Typically they’ll achieve one or two of them while completely neglecting the rest.  Let me give you two examples: ... I know an extremely savvy businesswoman who made almost a million dollars online last year ... }--.</li>      </ol>    </li>    <li><strong>(Music) { TWICE }-[ instrumental]:</strong>      <ol>        <li><strong>{ TWICE }-{ NO or NO (YES or YES Sad Ver.) }-[ cover ]:</strong> <a href="https://youtu.be/K5IOZTLsyg0" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ TWICE }-{ Dance The Night Away }-[ cover ]:</strong> <a href="https://youtu.be/P__tbXYJOIE" target="_blank" rel="noopener">Link</a>.</li>        <li><strong>{ TWICE }-{ OOH-AAH }-[ cover ]:</strong> <a href="https://youtu.be/kHFsszxRJWg" target="_blank" rel="noopener">Link</a>.</li>      </ol>    </li>    <li><strong>[ Javascript ]-[ break down Execution Contexts, Hoisting, Scopes, and Closures ]:</strong>      <ol>      <li><strong>About:</strong> <a href="https://youtu.be/Nt-qa_LlUH0" target="_blank" rel="noopener">Link</a>. Break down the steps it works behind the scene, (<code>Creation Phase</code> and <code>Execution Phase</code> of individual <code>Execution Context</code>), with <span style="text-decoration: underline;">Javascript visualizer</span>. // Original title - "The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript".</li>      <li><strong>Also see:</strong>        <ol>          <li><strong>WTF is THIS: Understanding the "this" keyword:</strong> <a href="https://youtu.be/zE9iro4r918" target="_blank" rel="noopener">Link</a>. Unread.</li>          <li><strong>The Evolution of Async: From Callbacks, to Promises, to Async/Await:</strong> <a href="https://youtu.be/gB-OmN1egV8" target="_blank" rel="noopener">Link</a>. Unread.</li>          <li><strong>Beginner's Guide to Prototype:</strong> <a href="https://youtu.be/XskMWBXNbp0" target="_blank" rel="noopener">Link</a>. Unread.</li>          <li><strong>Inheritance and the Prototype Chain:</strong> <a href="https://youtu.be/MiKdRJc4ooE" target="_blank" rel="noopener">Link</a>. Unread.</li>          <li><strong>Modules: From IIFEs to CommonJS to ES6 Modules:</strong> <a href="https://youtu.be/qJWALEoGge4" target="_blank" rel="noopener">Link</a>. Unread.</li>        </ol>      </li>      <li><strong>Hoisting:</strong> I suddenly have my mind clicked, <code>Hoisting</code> is noting to do with moving the line <code>var theVarName</code> up to before the line <code>theVarName = "a new value"</code>, but it is all about the allocate the memory space and assign default value for the variable <code>theVarName</code> first (<code>Creation Phase</code> of that <code>Execution Context</code>), then later (the next step) (<code>Execution Phase</code> of that <code>Execution Context</code>) is assign the value <code>"a new value"</code> to <code>theVarName</code>.</li>      <li><strong>17:47:</strong> <a href="https://youtu.be/Nt-qa_LlUH0?t=1067" target="_blank" rel="noopener">Link</a>. Visualizer shows when function,, <code>Execution Context</code> don't found the variable user want to use, it goes up to parent (in this case global context) to see the variable in same name, it it exists then use it instead. This is called <span style="text-decoration: underline;">scope chain lookup</span>. Interesting ... .</li>      <li><strong>20:24:</strong> <a href="https://youtu.be/Nt-qa_LlUH0?t=1224" target="_blank" rel="noopener">Link</a>. When function,, <span style="text-decoration: underline;">Execution Phase</span> ended and cleared, <span style="text-decoration: underline;">Closure Scope</span> was created. Interesting ... .</li>      </ol>    </li>    <li><strong>( Javascript ) { var } vs { let } vs { const }:</strong> <a href="https://youtu.be/6vBYfLCE9-Q?list=PLqrUy7kON1meLrM6e7WW02jJ8QongnT7Z&t=492" target="_blank" rel="noopener">{ let }</a>.</li>    <li><strong>( Javascript ) { ES6 }-{ Arrow Function }:</strong> <a href="https://youtu.be/dB1KA-yz65s" target="_blank" rel="noopener">Link</a>. // <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">{ MDN }</a>. // With <code>Arrow Function</code>, we stay in same context (scope?) and don't need to use <code>.bind(this)</code> anymore (near the end of video). // <a href="https://youtu.be/dB1KA-yz65s?t=695" target="_blank" rel="noopener">How do you do implicit return without using single line?</a>.</li>    <li><strong>( Video ) { AOE2 }-{ Quality Sudden Death on Budapest! }:</strong> <a href="https://youtu.be/ji9dAoNxGKw" target="_blank" rel="noopener">Link</a>.</li>  </ol></div><hr><div class="facetList">Cmm: u190318m150030 x88lost x88fs c88log log88tableCurrent: ti88crr88y19 ti88crr88y19dw4 ti88crr88y19m03 ti88crr88y19m03d28 ti88crr88y19m03dw4 ti88crr88y19q1 ti88crr88y19q1dw4 ti88crr88y19w13 ti88crr88y19w13dw4Time (d): ti88y19 ti88y19dw1 ti88y19m03 ti88y19m03d18 ti88y19m03dw1 ti88y19q1 ti88y19q1dw1 ti88y19w12 ti88y19w12dw1</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190318 Log table overview</title>
      <link href="/treegbBlog/19/03/18/190318m144719/"/>
      <url>/treegbBlog/19/03/18/190318m144719/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> This page shows overview of [ all ]-[ each month ] <strong><code>Log Table</code></strong>. I use <strong><code>Log</code></strong> to <strong>log down all my activities</strong>, more frequent, more trivial than normal blog <u>posts</u>. While you can monitoring <strong>my acutal life</strong> here, you might also find it is boring.</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>What are { Logs } different than normal { Posts }?:</strong> <strong><code>Log Table</code></strong> log down all events, activities, thoughts happens to me every day. This is not as same as normal <u>posts</u>, because content inside <code>Log Table</code> are more <strong>trivial</strong> and updated <strong>more frequently</strong> than normal <u>posts</u>, while normal <u>posts</u> tends to be more focus to specific ((small)) topic. // I organized <code>Logs</code> (events) by puting all <code>Logs</code> (events) happened in same month into same post (<code>Log table</code>). For example, the post <a href="/treegbBlog/19/03/18/190318m150030">190318 ( Log table ) 2019-03 # 190318m150030</a> will list all <code>Logs</code> (events) happened from <u>2019-03-01</u> to <u>2019-03-31</u> (and will not list <code>Logs</code> happened in February, or April).</li>    <li><strong>All { Log Table }:</strong>      <ol>        <li><strong>2019:</strong>          <ol>            <li><strong>2019-03:</strong> <a href="/treegbBlog/19/03/18/190318m150030">190318 ( Log table ) 2019-03 # 190318m150030</a>.</li>            <li><strong>2019-04:</strong> <a href="/treegbBlog/19/04/01/190401m013644">190401 ( Log table ) 2019-04 # 190401m013644</a>.</li>            <li><strong>2019-05:</strong> <a href="/treegbBlog/19/05/01/190501m130707">190501 ( Log table ) 2019-05 # 190501m130707</a>.</li>            <li><strong>2019-06:</strong> <a href="/treegbBlog/19/06/01/190601m112844">190601 ( Log table ) 2019-06 # 190601m112844</a>.</li>            <li><strong>2019-07:</strong> <a href="/treegbBlog/19/07/01/190701m074556">190701 ( Log table ) 2019-07 # 190701m074556</a>.</li>            <li><strong>2019-08:</strong> <a href="/treegbBlog/19/08/03/190803m101619">190803 ( Log table ) 2019-08 # 190803m101619</a>.</li>          </ol>        </li>      </ol>    </li>  </ol></div><hr><div class="facetList">Cmm: u190318m144719 x88lost x88fs c88log log88table c88current overviewCurrent: ti88crr88y19 ti88crr88y19dw6 ti88crr88y19m06 ti88crr88y19m06d01 ti88crr88y19m06dw6 ti88crr88y19q2 ti88crr88y19q2dw6 ti88crr88y19w22 ti88crr88y19w22dw6Time (d): ti88y19 ti88y19dw1 ti88y19m03 ti88y19m03d18 ti88y19m03dw1 ti88y19q1 ti88y19q1dw1 ti88y19w12 ti88y19w12dw1</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190317 [Finding Fukue]-[touching documentary]-[they were best friends, then pen pals, until one day, the letters stopped coming]</title>
      <link href="/treegbBlog/19/03/17/190317m212850/"/>
      <url>/treegbBlog/19/03/17/190317m212850/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> It show how beautiful and positive a human mind could be.</li></ul><a id="more"></a><hr><ol>  <li><strong>Long:</strong> Relationship of 2 people can be so mind-opened, trusting and touching like this. While bad people could be too evil beyond your imagination, nice people could be too noble beyond your imagination, too. 2 side of extreme is outside our imagination, if we haven't seen them before.</li>  <li><strong>Link:</strong> <a href="https://youtu.be/ZVlZMOB-Sq0" target="_blank" rel="noopener">Link</a>. [Youtube]-[CBC Docs].</li></ol><hr><div class="facetList">Cmm: u190317m212850 x88lost x88fs japan place88japan thought c88thought inspiration c88inspiration documentary finding find search searching people person miss missing jessica stuart fukue friend friends pen penww pal palww penPal mail letter touching touch feeling88touching warm feeling88warm intimate close best good old oldww cry crywwCurrent: ti88crr88y19 ti88crr88y19dw7 ti88crr88y19m03 ti88crr88y19m03d17 ti88crr88y19m03dw7 ti88crr88y19q1 ti88crr88y19q1dw7 ti88crr88y19w11 ti88crr88y19w11dw7Time (d): ti88y19 ti88y19dw7 ti88y19m03 ti88y19m03d17 ti88y19m03dw7 ti88y19q1 ti88y19q1dw7 ti88y19w11 ti88y19w11dw7</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190316 [Testing abstract concept map]-[we don&#39;t own our partner ever]</title>
      <link href="/treegbBlog/19/03/16/190316m162051/"/>
      <url>/treegbBlog/19/03/16/190316m162051/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> I drew this concept map, just for testing the real limit and potential of <code>concept map</code>. I want to see if concept map can [expressing]-[convey] very complex, highly abstract [concepts]-[knowledge system].</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>Example of real concept map:</strong> <a href="#190316-173221">Anchor</a>.</li>    <li><strong>About concept map:</strong> <a href="#190316m173224">Anchor</a>.</li>  </ol></div><div class="h2">  <h2>Example of real concept map<a id="190316-173221"></a></h2>  <p>I pick <a href="https://www.facebook.com/photo.php?fbid=2272654299675310&set=a.1445366252404123&type=3&theater" target="_blank" rel="noopener">this [image]-[story]</a> <strong>(not mine, but from other people)</strong>, just because is is highly abstract, to serve as a good testing real data. I don't specially in love with poems or literature, though I don't dislike them at the same time.</p>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/16/190316m162051/we-dont-own-our-partner-ever.jpg" alt="we-dont-own-our-partner-ever">    <img src="/treegbBlog/fs/m/19/03/16/190316m162051/we-dont-own-our-partner-ever.svg" alt="we-dont-own-our-partner-ever">  </div>  <p>So, if I can break a complex story down to many small pieces of concepts (<code>nodes</code>), and <code>connections</code>, and explicitly denote some <code>context scope number</code> (only at place really need this), I believe, any story can be describe with the form of <code>concept map</code>, and reader will do comprehension themselves. But for honest, text is still more condense to [express]-[convey] same amount of data.</p>  <p>For more example of concept map, you can see <a href="/treegbBlog/19/03/10/190310m200408/">190310 Brave New World study note # 190310m200408</a>.</p></div><div class="h2">  <h2>About concept map<a id="190316m173224"></a></h2>  <ol>    <li><strong>What is concept map:</strong> A [map]-[graphs] using <strong><code>nodes</code></strong> and <strong><code>connections</code></strong> to express a story, idea, complex context, knowledge ... anything you can think about. A simple example - <code>Apple --is--> Red --is--> Color</code>. See <a href="https://cmap.ihmc.us/docs/concept.php" target="_blank" rel="noopener">here</a> for detail information about concept map.</li>    <li><strong>Node (bule  circle):</strong> A concept. Text inside each <code>node</code> is just a <code>symbol</code> to represent the real concept. Beside text (as symbol), another common symbol type is picture. But since text is way easier to made than picture, we don't use picture in concept map.</li>    <li><strong>Connection (arrowed line, or non-arrowed line):</strong>      <ol>        <li><strong>About:</strong> A connection connect 2 concept together.</li>        <li><strong>Connection with arrow:</strong> Arrow means the direction of description for example <code>Apple --is--> Red</code>, it make sense to say "apple is red", but not "red is apple", because the direction matters when 2 <code>nodes</code> (concept) are connecting together, in this case.</li>        <li><strong>Connection without description:</strong> Not all connection need description. For example <code>Monkey --can--> Climb --=--> High</code>, the connection between concept (<code>node</code>) "climb" and "high", don't need description (but need arrow to explain direction), in this case, the character <strong><code>=</code></strong> is used, it means "there is no need to have description on this connection" (nothing to do with "they are equal").</li>        <li><strong>"context" scope:</strong>          <ol>            <li><strong>About:</strong> The number shown on connection denote the <strong>different scope of context</strong>. Usually, the scope of <code>context</code> depends on the whole story, it could big to across multiple <code>nodes</code>, or could small to just happens only between 2 adjacent <code>nodes</code>, anyway, I don't specify the scope explicit on every connection (for simplicity reason). When reader is reading, they will <strong>find the right context to fit the story themselves</strong>. // However, in some case, there are different <code>context</code> fighting with each other, or overlapping, in these cases, I have to make it clear, I will use number to [marking]-[grouping] differt <code>context</code>, so it won't be confused by user, since <strong>one node might belong to two context at the same time</strong>.</li>            <li><strong>Example "6: description":</strong> 2 <code>nodes</code> is under context#6.</li>            <li><strong>Example "7: description":</strong> 2 <code>nodes</code> is under context#7.</li>            <li><strong>Example "(6)7: description":</strong> 2 <code>nodes</code> is under context#7. And it is related to the whole context#6, not the previous <code>node</code> (where the arrow starts).</li>            <li><strong>Example "(6): description":</strong> 2 <code>nodes</code> don't have explicit context. And it is related to the whole context#6, not the previous <code>node</code> (where the arrow starts).</li>          </ol>        </li>      </ol>    </li>  </ol></div><hr><div class="facetList">Cmm: u190316m162051 c88lost c88fs concept map mapww conceptMap svg svgww fileType88svgCurrent: ti88crr88y19 ti88crr88y19dw6 ti88crr88y19m03 ti88crr88y19m03d16 ti88crr88y19m03dw6 ti88crr88y19q1 ti88crr88y19q1dw6 ti88crr88y19w11 ti88crr88y19w11dw6Time (d): ti88y19 ti88y19dw6 ti88y19m03 ti88y19m03d16 ti88y19m03dw6 ti88y19q1 ti88y19q1dw6 ti88y19w11 ti88y19w11dw6</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190314 Note of &quot;Minds&quot;, a social network platform.</title>
      <link href="/treegbBlog/19/03/14/190314m190402/"/>
      <url>/treegbBlog/19/03/14/190314m190402/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>About:</strong> I take these note just for experimenting <u>concept map</u>, when at the same time I was doing research on a social network platform I just found - <code>Minds</code>, to replace Facebook. <code>Reddit</code> is good, but it is not <u>self centered</u>, but <u>community centered</u>, the purpose and design is a bit different I think.</li>    <li><strong>Joe Rogan Experience #1248 - Bill Ottman:</strong> <a href="https://youtu.be/mJowz_-pj4U" target="_blank" rel="noopener">Link</a>. This is the full talk of <code>Joe Rogan</code> and <code>Bill Ottman</code> (CEO of <code>Minds</code>)</li>    <li><strong>Minds.com:</strong> <a href="https://www.minds.com" target="_blank" rel="noopener">Link</a>.</li>    <li><strong>Concept map:</strong> See below sections for Concept Maps of this video.</li>  </ol></div><div class="h2">  <h2>Overview</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/overview.svg" alt="Overview">  </div></div><div class="h2">  <h2>Timeline</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/timeline.svg" alt="Timeline">  </div></div><div class="h2">  <h2>{ Minds }</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/minds.svg" alt="{ Minds }">  </div></div><div class="h2">  <h2>Bill Ottman</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/bill-ottman.svg" alt="Bill Ottman">  </div></div><div class="h2">  <h2>{ Minds } 's policy</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/minds-s-policy.svg" alt="{ Minds } 's policy">  </div></div><div class="h2">  <h2>Social media</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/social-media.svg" alt="Social media">  </div></div><div class="h2">  <h2>Policy and moderation</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/policy-and-moderation.svg" alt="Policy and moderation">  </div></div><div class="h2">  <h2>Privacy</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/14/190314m190402/privacy.svg" alt="Privacy">  </div></div><hr><div class="facetList">Crr: u190314m190402 x88lost c88fs c88sofw sofw88saas minds saas88minds mind website c88website website88domain domain88wwwMindsCom social media socialMedia network networking socialNetwork platformCurrent: ti88crr88y19 ti88crr88y19dw4 ti88crr88y19m03 ti88crr88y19m03d14 ti88crr88y19m03dw4 ti88crr88y19q1 ti88crr88y19q1dw4 ti88crr88y19w11 ti88crr88y19w11dw4Time (d): ti88y19 ti88y19dw4 ti88y19m03 ti88y19m03d14 ti88y19m03dw4 ti88y19q1 ti88y19q1dw4 ti88y19w11 ti88y19w11dw4</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190310 Brave New World study note</title>
      <link href="/treegbBlog/19/03/10/190310m200408/"/>
      <url>/treegbBlog/19/03/10/190310m200408/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> Reading book, and taking some note just for experimenting <u>concept map</u>.</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>Book:</strong> <code>Brave New World</code> is a <strong>dystopian</strong> novel written in 1931 by English author Aldous Huxley, and published in 1932. The book get similar [status]-[reputation] by people, as another famous dystopian novel, <code>1984</code> by George Orwell, 1949.</li>    <li><strong>Study note:</strong> Please see below section for those Concept Maps. Serving mainly only for myself. I was experimenting <a href="https://cmap.ihmc.us/docs/concept.php" target="_blank" rel="noopener">Concept Map</a> recently, to see if I can use this method to orginized and remember what I'd learned. // I use Chinese simply because English version of book is still too hard for me, I can't fully understand the story, so I later borrowed Chinese version.</li>    <li><strong>Updating:</strong> Not finished reading yet, will keep updating.</li>  </ol></div><div class="h2">  <h2>Overview (概覽)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/overview.svg" alt="Overview (概覽)">  </div></div><div class="h2">  <h2>Chapters (所有章節)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapters.svg" alt="Chapters (所有章節)">  </div></div><div class="h2">  <h2>Chapter 1</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter1.svg" alt="Chapter 1">  </div></div><div class="h2">  <h2>Chapter 3</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter3.svg" alt="Chapter 3">  </div></div><div class="h2">  <h2>Chapter 4</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter4.svg" alt="Chapter 4">  </div></div><div class="h2">  <h2>Chapter 5</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter5.svg" alt="Chapter 5">  </div></div><div class="h2">  <h2>Chapter 6</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter6.svg" alt="Chapter 6">  </div></div><div class="h2">  <h2>Chapter 7</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter7.svg" alt="Chapter 7">  </div></div><div class="h2">  <h2>Chapter 8</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter8.svg" alt="Chapter 8">  </div></div><div class="h2">  <h2>Chapter 9</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter9.svg" alt="Chapter 9">  </div></div><div class="h2">  <h2>Chapter 10</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter10.svg" alt="Chapter 10">  </div></div><div class="h2">  <h2>Chapter 11</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter11.svg" alt="Chapter 11">  </div></div><div class="h2">  <h2>Chapter 12</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter12.svg" alt="Chapter 12">  </div></div><div class="h2">  <h2>Chapter 13</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/chapter13.svg" alt="Chapter 13">  </div></div><div class="h2">  <h2>Bernard Marx (伯納德.馬克斯)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/bernard-marx.svg" alt="Bernard Marx (伯納德.馬克斯)">  </div></div><div class="h2">  <h2>Class (階級)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/class.svg" alt="Class (階級)">  </div></div><div class="h2">  <h2>Conditioning (制約)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/conditioning.svg" alt="Conditioning (制約)">  </div></div><div class="h2">  <h2>John (約翰)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/john.svg" alt="John (約翰)">  </div></div><div class="h2">  <h2>Lenina Crowne (列寧娜.克勞恩)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/lenina-crowne.svg" alt="Lenina Crowne (列寧娜.克勞恩)">  </div></div><div class="h2">  <h2>世界邦文明 (World State)</h2>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/10/190310m200408/world-state.svg" alt="世界邦文明 (World State)">  </div></div><hr><div class="facetList">Cmm: u190310m200408 x88hd c88fs c88follow follow88year book c88book thought c88thought inspiration c88inspiration philosophy c88philosophy the theww purpose meaning of ofww life thePurpose purposeOf ofLife theMeaning meaningOf meaningful happiness happy sensation pain painful suffer suffering unpleasant pleasant pleasure brave new newww world braveNew newWorld mei3 li4 li4ww xin1 shi4 jie4 mei3Li4Xin1Shi4Jie4 freedom free 1984 number881984Current: ti88crr88y19 ti88crr88y19dw1 ti88crr88y19m03 ti88crr88y19m03d18 ti88crr88y19m03dw1 ti88crr88y19q1 ti88crr88y19q1dw1 ti88crr88y19w12 ti88crr88y19w12dw1Time (d): ti88y19 ti88y19dw7 ti88y19m03 ti88y19m03d10 ti88y19m03dw7 ti88y19q1 ti88y19q1dw7 ti88y19w10 ti88y19w10dw7</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190306 (Project) Building a static site for LYW foundation.</title>
      <link href="/treegbBlog/19/03/06/190306m014438/"/>
      <url>/treegbBlog/19/03/06/190306m014438/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> I spent few day do research on Hexo (static site genertor) and built a very basic website prototype.</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>Why I built this project?:</strong> A non-profit seems to need a website (but maybe they don't need it, donno), I tried to come up a site for them as fast as possible (my working was still very slow however). The best option is static website, and I come up to use Static Site Generator.</li>    <li><strong>Why I use Hexo for my static site genertor?:</strong> No big good reason, just because they use javascript, and many people useing it.</li>    <li><strong>Hexo have bad documentation:</strong> Their docs sucks, I spent so much time doing research, just for building very basic things. And the [router]-[routing] (site path) I don't even want to spend time on it, I don't know how to change the adress, I just follow the default as possible.</li>    <li><strong>What I learned:</strong>      <ol>        <li><strong>Review the old knowledge I'd learned a year ago:</strong> Too long no touching web development stuff, now I start to recall what I'd learned before.</li>        <li><strong>[Art]-[design]:</strong> Start to realize I have to be realistic about not spending too much time on doing what I'm not good at, I should see more good examples before I create my own. And I start to understand the key concept of any type of art - <a href="https://youtu.be/LadUft_ly50" target="_blank" rel="noopener">Balance between irregular (unpredictable) and regular (predictable)</a>.</li>        <li><strong>Svg:</strong> I always struggled about batch changing color for image. Now I learned about <a href="https://www.stockfeel.com.tw/ui%E8%A8%AD%E8%A8%88%E7%95%8C%E5%A4%A7%E5%8B%A2%E6%BD%AE%E6%B5%81%EF%BC%9A%E6%89%81%E5%B9%B3%E5%8C%96%E8%A8%AD%E8%A8%88/" target="_blank" rel="noopener">Flat Design</a>, and I think I should have ways to change image color. Fortunately after spending few days research about SVG, I know I can embed vector image in HTML and change color by CSS.</li>      </ol>    </li>    <li><strong>Some screenshots:</strong> <a href="#190306m021355">Anchor</a>.</li>  </ol></div><div class="h2">  <h2>Some screenshots:<a id="190306m021355"></a></h2>  <ol>    <li><strong>About:</strong> To demonstrate the <u>Responsive Design</u> effect.</li>    <li><strong>Screen recording:</strong> <a href="https://youtu.be/F7GCD6l6pk0" target="_blank" rel="noopener">Link</a>.</li>  </ol>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/1.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/2.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/3.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/4.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/5.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/6.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/7.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/8.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/9.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/10.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/11.jpg" alt="screenshot">    <img src="/treegbBlog/fs/m/19/03/06/190306m014438/12.jpg" alt="screenshot">  </div></div><hr><div class="facetList">u190306m014438 x88fs x88lost c88sofw programming webdev c88webdev responsive image responsiveImage web webww design responsiveWeb webDesign responsiveDesign volunteer c88volunteer c88lywFoundationCurrent: ti88crr88y19 ti88crr88y19dw3 ti88crr88y19m03 ti88crr88y19m03d06 ti88crr88y19m03dw3 ti88crr88y19q1 ti88crr88y19q1dw3 ti88crr88y19w10 ti88crr88y19w10dw3Time (d): ti88y19 ti88y19dw3 ti88y19m03 ti88y19m03d06 ti88y19m03dw3 ti88y19q1 ti88y19q1dw3 ti88y19w10 ti88y19w10dw3</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190225 How To remember everything you learn, when short term memory can&#39;t convert to long term memory</title>
      <link href="/treegbBlog/19/02/25/190225m150519/"/>
      <url>/treegbBlog/19/02/25/190225m150519/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><ol>  <li><strong>About:</strong> <a href="https://youtu.be/V-UvSKe8jW4" target="_blank" rel="noopener">Link</a>. This video <strong>shock</strong> me a lot, it give me so much inspiration and hint and I finally know why I learned nothing in the past few years, I never repetition, I never organize my concepts nodes, I never think of "why", I never questioning and seek for opposite argument for what I just learned, I always forgot.</li>  <li><strong>Why and when facts in short term memory can't convert to concept in long term memory:</strong> In short term memory you have facts, and if you want it to become concepts, you have to move it to long term memory. Without [attention]-[focus] (you eat up too many working memory chunks) and comprehension, this is not possible. And inevitable you will forget those facts.</li>  <li><strong>Key quotes (subtitle) in video:</strong> Quote: --&lt; ... Second, see or hear others summarize the information, does not mean that you can make a summary or explain the argument ... I can probably tell the thoughts I have read or the random events, but if you really want to test me, ask me the story, ask me about the relevance of other theories, and then give examples, I can't answer this question ... I so often <strong>feel strongly about a position, but if I’m pressed, I could hardly argue for it</strong> ... A lot of modern media will make us don’t have to understand anything by ourselves ... and carefully selected data. It all amounts to a nice little package for the viewer to make up their own mind with little difficulty, except the packaging is often done so effectively that the viewer, <strong>listener or reader doesn't make up their own mind at all</strong> ... one of the many reasons why people have trouble explaining videos or books or articles is because <strong>they simply don't remember what was said</strong> ... in recent years we've discovered that <strong>long-term memory</strong> is the seat of understanding it stores <strong>not just facts but complex concepts or schemas</strong> ... <strong>short-term memory (working memory)</strong> ... the problem is what we hold there can quickly <strong>vanish</strong> if we don't keep thinking about them or rehearse them in our heads. In other words, <strong>if we don't grapple with the ideas</strong> in our working memory for an extended period of time, they <strong>never get sent to the long-term memory</strong>, they just disappear ... <strong>this is in part why I feel like I know so much, but understand so little</strong>. Why I can scroll down my twitter feed and <strong>barely remember any of it. Info jumps into my working memory, only to be replaced by the next thing, and the next thing, very little of it, if any, makes it into my long-term memory</strong> ... As Nicholas Carr writes as we reach the limits of our working memory, it becomes harder to distinguish relevant information from irrelevant information, signal from noise, we become mindless consumers of data ... <strong>multi-tasking ... recall ... feynman technique ... spaced repetition</strong> ... &gt;--.</li></ol><hr><div class="facetList">Cmm: u190225m150519 x88lost x88fs c88follow follow88month c88learningHowToLearn learning how howww to toww learn learningHow howTo toLearn youtube who88youtube video presentation88video thought c88thought inspiration c88inspiration short term working long term memory shortTerm longTerm termMemory workingMemory reddit twitter social media socialMedia internet news information read feed feeds forget forgot remember multi tasking task multiTasking multiTask conceptCurrent: ti88crr88y19 ti88crr88y19dw6 ti88crr88y19m02 ti88crr88y19m02d16 ti88crr88y19m02dw6 ti88crr88y19q1 ti88crr88y19q1dw6 ti88crr88y19w07 ti88crr88y19w07dw6Time (d): ti88y19 ti88y19dw6 ti88y19m02 ti88y19m02d16 ti88y19m02dw6 ti88y19q1 ti88y19q1dw6 ti88y19w07 ti88y19w07dw6</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190225 Supernormal stimulus (超常刺激) - 欲望和自然生物性</title>
      <link href="/treegbBlog/19/02/25/190225m150116/"/>
      <url>/treegbBlog/19/02/25/190225m150116/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><ol><li><strong>啾啾鞋:</strong><a href="https://youtu.be/UI0mxEyqz0w" target="_blank" rel="noopener"> Link</a>.</li><li><strong>百度百科:</strong> <a href="https://baike.baidu.com/item/%E8%B6%85%E5%B8%B8%E5%88%BA%E6%BF%80" target="_blank" rel="noopener">Link</a>.</li></ol><hr><div class="facetList">Cmm: u190225m150116 x88lost x88fs c88follow follow88year c88share supernormal stimulus 超常刺激 chao1 chang2 ci4 ci4ww ji1 ji1ww chao1Chang2 chang2Ci4 ci4Ji1 thought c88thought inspiration c88inspiration video presentation88videoCurrent: ti88crr88y19 ti88crr88y19dw2 ti88crr88y19m02 ti88crr88y19m02d19 ti88crr88y19m02dw2 ti88crr88y19q1 ti88crr88y19q1dw2 ti88crr88y19w08 ti88crr88y19w08dw2Not really: 超級刺激 chao1 ji2 ji2ww ci4 ci4ww ji1 ji1ww chao1Ji2 ci4Ji1 chao1Ji2Ci4Ji1Time (d): ti88y18 ti88y18dw6 ti88y18m10 ti88y18m10d13 ti88y18m10dw6 ti88y18q4 ti88y18q4dw6 ti88y18w41 ti88y18w41dw6Who: 啾啾鞋 jiu1 jiu1ww jiu1 jiu1ww xie2 xie2ww jiu1Jiu1Xie2 who88jiu1Jiu1Xie2</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190225 (Log) Keep reading book &quot;The one thing&quot;,, 20/80 rules</title>
      <link href="/treegbBlog/19/02/25/190225m144302/"/>
      <url>/treegbBlog/19/02/25/190225m144302/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><ol>  <li><strong>About:</strong> Keep reading book "The one thing",, 20/80 rules. We can even get it to extreme, by "multiply it several times" (or you can called it keep filtering several times), we get only one thing, the most important thing to do, in priority, in potential impact.</li>  <div class="imgBlock">    <img src="/treegbBlog/fs/m/19/02/25/190225m144302/20-80-rules_1.jpg" alt="20-80 rules 1">    <img src="/treegbBlog/fs/m/19/02/25/190225m144302/20-80-rules_2.jpg" alt="20-80 rules 2">  </div></ol><hr><div class="facetList">Cmm: u190225m144302 c88lost c88fs book c88book the theww one oneww thing theOne oneThingCurrent: ti88crr88y19 ti88crr88y19dw1 ti88crr88y19m02 ti88crr88y19m02d25 ti88crr88y19m02dw1 ti88crr88y19q1 ti88crr88y19q1dw1 ti88crr88y19w09 ti88crr88y19w09dw1Time (d): ti88y19 ti88y19dw1 ti88y19m02 ti88y19m02d25 ti88y19m02dw1 ti88y19q1 ti88y19q1dw1 ti88y19w09 ti88y19w09dw1</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190225 I decide not using [Bootstrap]-[CSS framework], but vanilla css</title>
      <link href="/treegbBlog/19/02/25/190225m143113/"/>
      <url>/treegbBlog/19/02/25/190225m143113/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><ol><li><strong>About:</strong> While Bootstrap can shape a site pretty fast by using it's monopoly (in both looking and feature) template, it is way too limited to adapt the various and customized requirement (for any reason). The advantage it can offers can't cover the disadvantage it cost, and in this case I think using vanilla css is better than using css framwork like Bootstrap. But front-end and back-end frameword is totally different story than this I think, and I will try to learn it.</li></ol><hr><div class="facetList">Cmm: u190225m143113 c88lost x88fs c88sofw programming c88programming webde framework sofw88framework bootstrap framework88bootstrap lang88html lang88css html88cssCurrent: ti88crr88y19 ti88crr88y19dw1 ti88crr88y19m02 ti88crr88y19m02d25 ti88crr88y19m02dw1 ti88crr88y19q1 ti88crr88y19q1dw1 ti88crr88y19w09 ti88crr88y19w09dw1Time (d): ti88y19 ti88y19dw1 ti88y19m02 ti88y19m02d25 ti88y19m02dw1 ti88y19q1 ti88y19q1dw1 ti88y19w09 ti88y19w09dw1</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190225 (Psychology) Analysis paralysis</title>
      <link href="/treegbBlog/19/02/25/190225m142305/"/>
      <url>/treegbBlog/19/02/25/190225m142305/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><ol><li><strong>About:</strong> <a href="https://en.wikipedia.org/wiki/Analysis_paralysis" target="_blank" rel="noopener">Link</a>. I found from this article <a href="https://www.reddit.com/r/webdev/comments/4azrmv/is_webdev_really_this_complicated/" target="_blank" rel="noopener">Is webdev really this complicated?</a> I think this is one of the reason why I waste so much time, and barely have no new personal project created, after so many years.</li></ol><hr><div class="facetList">Cmm: u190225m142305 x88lost x88fs psychology c88psychology c88sofw programming c88programming webdev c88webdev cognitive load cognitiveLoad live feed feeds liveFeed liveFeeds overwhelmingCurrent: ti88crr88y19 ti88crr88y19dw1 ti88crr88y19m02 ti88crr88y19m02d25 ti88crr88y19m02dw1 ti88crr88y19q1 ti88crr88y19q1dw1 ti88crr88y19w09 ti88crr88y19w09dw1Time (d): ti88y19 ti88y19dw1 ti88y19m02 ti88y19m02d25 ti88y19m02dw1 ti88y19q1 ti88y19q1dw1 ti88y19w09 ti88y19w09dw1</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190222 [The School of Life]-[how to be a man]</title>
      <link href="/treegbBlog/19/02/22/190222m175116/"/>
      <url>/treegbBlog/19/02/22/190222m175116/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Link: <a href="https://youtu.be/lshzZhHAYIs" target="_blank" rel="noopener">Link</a></strong>.</li>  <li><strong>Short:</strong> This is why I love [youtube channel]-[The School of Life] so much, it always uncover the very <strong>inner self</strong> of we [human]-[people], uncover many things we not even notice ourself.</li></ul><a id="more"></a><hr><div class="facetList">Cmm: u190222m175116 c88lost x88fs youtube who88youtube theSchoolOfLife who88theSchoolOfLife psychology c88psychology philosophy c88philosophy cool feeling88cool warm feeling88warm self be beww a aww man manww men menww beA aMan aMenCurrent: ti88crr88y19 ti88crr88y19dw5 ti88crr88y19m02 ti88crr88y19m02d22 ti88crr88y19m02dw5 ti88crr88y19q1 ti88crr88y19q1dw5 ti88crr88y19w08 ti88crr88y19w08dw5Time (d): ti88y19 ti88y19dw5 ti88y19m02 ti88y19m02d22 ti88y19m02dw5 ti88y19q1 ti88y19q1dw5 ti88y19w08 ti88y19w08dw5</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190222 (Philosophy) Stoicism</title>
      <link href="/treegbBlog/19/02/22/190222m110455/"/>
      <url>/treegbBlog/19/02/22/190222m110455/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><hr><ol>  <li><strong>Also see:</strong>    <ol>      <li><strong>190222 [Movie]-[Way of the Peaceful Warrior] # 190222m105329:</strong> <a href="/treegbBlog/19/02/22/190222m105329/">Link</a>.</li>    </ol>  </li>  <li><strong>[Stoicism as a philosophy for an ordinary life]-[Massimo Pigliucci]-[TEDxAthens]:</strong>    <ol>      <li><strong>Link:</strong><a href="https://youtu.be/Yhn1Fe8cT0Q" target="_blank" rel="noopener"> Link</a>.</li>      <li><strong>Core 2 pillars of Stoicism:</strong> <strong>virtue</strong> (Ethics, courage, wisdom ...) and <strong>knowing what you can and you can't control</strong>.</li>      <li><strong>Famous [people-[model]:</strong> Marcus Aurelius.</li>    </ol>  </li>  <li><strong>(Unread):</strong> <a href="https://youtu.be/5897dMWJiSM" target="_blank" rel="noopener">Link</a>. This talk is more popular.</li>  <li><strong>(Book) "The Obstacle Is The Way" by Ryan Holiday:</strong> <a href="http://theobstacleistheway.com/" target="_blank" rel="noopener">Link</a>.</li>  <li><strong>Stoic optimism:</strong>    <ol>      <li><strong>Link:</strong> <a href="https://youtu.be/e2Zq2VWvmW4" target="_blank" rel="noopener">Link</a>.</li>      <li>In this TedTalk, Ryan Holiday give many [stories]**[examples] about famous people been through their trouble and failure, and what the mindset they had when facing these trouble and failure. Compare to those hero, the obstacles we normal people facing are in fact really nothing and not comparable to what they had faced.</li>      <li><strong>Notice</strong>, The <span style="text-decoration: underline;">Stoic Optimism</span> concept (by Ryan Holiday?) is not as same as <span style="text-decoration: underline;">Optimism</span> solely, <span style="text-decoration: underline;">Optimism</span> is the concept of having <strong>hope</strong> to <strong>future</strong>, and <strong>expect</strong> something good happens in future ; while <span style="text-decoration: underline;">Stoic Optimism</span> is the concept of you <strong>don't care</strong> if the <strong>result is good or bad</strong> in the future, even you know it is bad and it will never be changed, you still be optimistic toward the current [situation]-[difficulty]. Think example of James Stockdale (he was a prisoner of war, in Vietnamese POW camp, for over seven years).</li>      <li>See <a href="/treegbBlog/19/02/22/190222m105329/">190222 [Movie]-[Way of the Peaceful Warrior] # 190222m105329</a> (Live in "now", the "current moment", <strong>everything have it's purpose</strong>). So don't care if the result is bad or good.</li>    </ol>  </li>  <li><strong>James Stockdale:</strong>    <ol>      <li><strong>About:</strong> James Bond Stockdale (December 23, 1923 – July 5, 2005) was a United States Navy vice admiral and aviator awarded the Medal of Honor in the Vietnam War, during which he was a prisoner of war (in Vietnamese POW camp) for over seven years.  (See the documentary video. it is more informative, he resist to "surrender" even he is under torture, in Vietnam communism land, and lead those captive (from US too) to against those communist). He have so powerful will, that you can see in the documentary video, the wikipedia page didn't mention this a lot.</li>      <li><strong>Wikipedia:</strong> <a href="https://en.wikipedia.org/wiki/James_Stockdale#Vice-Presidential_candidacy" target="_blank" rel="noopener">Link</a>.</li>      <li><strong>Short documentary:</strong> <a href="https://youtu.be/Pc_6GDWl0s4" target="_blank" rel="noopener">Link</a>.</li>    </ol>  </li>  <li><strong>[Why stoicism matters]-[the school of life]:</strong> <a href="https://youtu.be/vOj5KLcymgA" target="_blank" rel="noopener">Link</a>.</li></ol><hr><div class="facetList">Cmm: u190222m110455 x88lost x88fs c88follow follow88week c88share thought c88thought inspiration c88inspiration philosophy c88philosophy stoicism stoic ethics c88ethics ethic ethical morality moral bad badww worst thing will willww happened happens 2 2ww pillar pillars 2Pillar number882 the theww purpose meaning of ofww life thePurpose purposeOf ofLife theMeaning meaningOf meaningful happiness happy sensation pain painful suffer suffering unpleasant pleasant pleasureCurrent: ti88crr88y19 ti88crr88y19dw5 ti88crr88y19m02 ti88crr88y19m02d22 ti88crr88y19m02dw5 ti88crr88y19q1 ti88crr88y19q1dw5 ti88crr88y19w08 ti88crr88y19w08dw5Place: roman place88roman greece place88greeceTime (d): ti88y19 ti88y19dw5 ti88y19m02 ti88y19m02d22 ti88y19m02dw5 ti88y19q1 ti88y19q1dw5 ti88y19w08 ti88y19w08dw5Who: seneca who88seneca</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190222 [Movie]-[Way of the Peaceful Warrior]</title>
      <link href="/treegbBlog/19/02/22/190222m105329/"/>
      <url>/treegbBlog/19/02/22/190222m105329/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> Super inspiring and "熱血沸騰" movie. The book and movie is part-autobiographical book based upon the early life of the author <span style="text-decoration: underline;">Dan Millman</span>. I learn all the secrets philosophy of haveing meaningful life, in this just one film.</li></ul><a id="more"></a><hr><ol>  <li><strong>Also see:</strong>    <ol>    <li><strong>190222 (Philosophy) Stoicism # 190222m110455:</strong> <a href="/treegbBlog/19/02/22/190222m110455/">Link</a>.</li>    </ol>  </li>  <li><strong>Book and movie:</strong> The <a href="https://zh.wikipedia.org/zh-tw/%E6%B7%B1%E5%A4%9C%E5%8A%A0%E6%B2%B9%E7%AB%99%E9%81%87%E8%A6%8B%E8%98%87%E6%A0%BC%E6%8B%89%E5%BA%95" target="_blank" rel="noopener">book</a> is called <span style="text-decoration: underline;">Way of the Peaceful Warrior</span>, while the <a href="https://zh.wikipedia.org/zh-tw/%E6%B7%B1%E5%A4%9C%E5%8A%A0%E6%B2%B9%E7%AB%99%E9%81%87%E8%A6%8B%E8%98%87%E6%A0%BC%E6%8B%89%E5%BA%95_(%E9%9B%BB%E5%BD%B1)" target="_blank" rel="noopener">movie</a> is called <span style="text-decoration: underline;">Peaceful Warrior</span> (中文 - 深夜加油站遇見蘇格拉底). <strong>I should read the book someday</strong>.</li>  <li><strong>Live in "now", the "current moment":</strong> Never live in past, in the future. The only <strong>experience and purpose</strong> of life come from "now", not other two. At every moment you are doing <strong>meditation</strong>.</li>  <li><strong>Everything have it's purpose:</strong> Enjoy and experience the "current moment", this is the purpose of life, you are just experiencing the purpose of life.</li>  <li><strong>Life is about the journey, not the result:</strong> Life, or every small things or story is about the <strong>journey and experience</strong>, not the result, don't care too much about the result, it is not so important.</li>  <li><strong>All choices come with it's own pleasure and price:</strong> Be responsible for that and enjoy your choice.</li>  <li><strong>Accept that you can't "control":</strong> Everything will not stay, they change, change a lot through time. Don't hold the beauty side of something because it will fail, the beauty can't stay forever, they will go away eventually at some time. Experience and enjoy the current moment.</li>  <li><strong>Focus on being persistence and resilience:</strong> Find your goal, and stick on it. The purpose of life also come from this.</li>  <li><strong>And finally you get peace, the "current moment":</strong> Honestly, this is out of what I expect. When I was watching this movie, I feel like I was <strong>highly focus</strong>, into the "<strong>flow</strong>" state, I also have very strong "<strong>peace</strong>" feeling, it's real. I don't expect this movie bring me this when I was watching.</li></ol><hr><div class="facetList">Cmm: u190222m105329 x88lost x88fs c88follow follow88month c88share movie c88movie video presentation88video book c88book way wayww method of ofww the theww peaceful peace warrior wayOf ofThe thePeaceful peacefulWarrior peaceWarrior inspiration c88inspiration thought c88thought philosophy c88philosophy psychology c88psychology the theww power of ofww now nowww thePower powerOf ofNow current currently this moment time future past meditation sport gymnastics gymnastic gym gymnast athletes athlete athletic coach gas station gasStation grocery store night dark fail failed failure injured injury break leg legww hospital the theww purpose meaning of ofww life thePurpose purposeOf ofLife theMeaning meaningOf meaningful happiness happy sensation pain painful suffer suffering unpleasant pleasant pleasureCurrent: ti88crr88y19 ti88crr88y19dw5 ti88crr88y19m02 ti88crr88y19m02d22 ti88crr88y19m02dw5 ti88crr88y19q1 ti88crr88y19q1dw5 ti88crr88y19w08 ti88crr88y19w08dw5Time (d): ti88y19 ti88y19dw5 ti88y19m02 ti88y19m02d22 ti88y19m02dw5 ti88y19q1 ti88y19q1dw5 ti88y19w08 ti88y19w08dw5Who: socrates who88socrates greece greek greeks philosopher dan danww millman</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190220 About</title>
      <link href="/treegbBlog/19/02/20/190220m203646/"/>
      <url>/treegbBlog/19/02/20/190220m203646/</url>
      
        <content type="html"><![CDATA[<ul>  <li><strong>Short:</strong> All about this (my) blog.</li></ul><a id="more"></a><hr><div class="h2">  <h2>List</h2>  <ol>    <li><strong>How to Contact me:</strong> <a href="#190222m144800">Link</a>.</li>    <li><strong>About the aim of this blog - what I use the blog for?:</strong> <a href="#190222m123417">Link</a>.</li>    <li><strong>How to navigate in this blog?:</strong> <a href="#190222m124809">Link</a>.</li>    <li><strong>About "My Log" (Log Table):</strong> If you go to <a href="/treegbBlog/19/03/18/190318m144719/">190318 Log table overview # 190318m144719</a>, you can see I use <strong><code>Log</code></strong> to <strong>log down all my activities</strong>, more frequent, more trivial than normal blog <u>posts</u>. While you can monitoring <strong>my acutal life</strong> here, you might also find it is boring.</li>    <li><strong>Why I use Enlglish when I am Taiwanese (using Chinese):</strong>      <ol>        <li><strong>(2 main reason):</strong></li>        <li><strong>.Standard for communication:</strong> English is worldwide language, it is simply a tool to [communicate]-[convey] concept with people from Africa, Europe, Russia, Japan, Brazil, India ... ;</li>        <li><strong>.Standard for information technology:</strong> Standarlized all text to English only, can hugely reduce down the [cost]-[effort] of maintaining content, designing software system, searching and indexing content. In another way it will causing too much trouble for me to consider and I currently don't have time to handle multi-language system.</li>      </ol>    </li>  </ol></div><div class="h2">  <h2>How to Contact me<a id="190222m144800"></a></h2>  <ol>    <li><strong>My nick name and ID:</strong> <code>treegb</code> (<strong>TREE</strong> is <strong>G</strong>rowing <strong>B</strong>igger).</li>    <li><strong>Email:</strong> <code>bambooindark@gmail.com</code>. You can use Google Hangout to instant messaging me (with this email) too.</li>    <li><strong>Reddit:</strong> I just start using Reddit recently (2019-02) (id <code>treegb</code>), intend to replace facebook. Need some time to make it a habbit.</li>    <li><strong>Facebook:</strong> <code>bambooindark@gmail.com</code>. But I seldom have activity on facebook, their services are indeed  the toppiest in the world (in feature) and have rich community, but I just don't like their core value. I just don't believe there is no second service that can replacing them. Now I use <a href="https://www.minds.com" target="_blank" rel="noopener">{ Minds }</a> instead.</li>  </ol></div><div class="h2">  <h2>About the aim of this blog - what I use the blog for?<a id="190222m123417"></a></h2>  <ol>    <li><strong>The aim:</strong>      <ol>        <li><strong>To understand the "true side of me":</strong> This blog is not mainly aim to offering useful content, by more of sharing any progress of me learning, doing, thinking, feelings, through those [feeds]-[posts]. I hope I have the courage to 100% expose myself under the sun to make public examine anything they want, including those awkward, weakest, evil part of me. I just hope I can be <strong>honest</strong> to closed-people or distance-people.</li>        <li><strong>Making "real-time" feeling:</strong> I want to give people (any the future me) idea about <a href="https://youtu.be/M9i2HAE-ZSw" target="_blank" rel="noopener">what I currently doing, thinking, experiencing</a>. So to follow this aim, I have to <strong>do the opposite</strong> thing than post blog trying to do - my post "feed" should be as frequent as possible, put amount first (publish post as frequent as possible), then quality second. This is a tough choice to make because this is 1. Opposite then my previous believe - <u>the idea of I think I should always produce valuable stuff, if can't, I don't do it at all</u> 2. Opposite with <a href="https://youtu.be/I0joqcqpiO4" target="_blank" rel="noopener">SEO good practice</a> (i.e. how to make google happy and rank your site better) 3. To create new content, <strong>even useless one</strong>, takes time. But I think in order to achieve this aim (making "real-time" feeling), I should go this direction. So my blog is less blog-like, but more feed-like?        </li><li><strong>Reduce "cognitive load" of readers:</strong> <strong>Ironically</strong>, when flooding content, live feeds, can tremendously increase our cognitive load in one way, <strong>in another way</strong> it seems to reduce it? I know in this information age, we always don't lack content (content just have <u>dust-like value</u> becuase it is not <u>rare resources</u>), we are lacking <u>good content</u>. But I recently read about <a href="/treegbBlog/19/02/25/190225m142305">190225 (Psychology) Analysis paralysis # 190225m142305</a>, if we have too much choice, <strong>we rather don't make any choice and do nothing at all</strong>. To solve this problem, giving real-time content is one option (but maybe not the best), so people don't need to choice, they just randomly pick whatever they get. And the most easy choice to make is, not go find any valuable (but old and need time to find) content, but read the new content, the real-time one. Yeah, this sound as <strong>bad</strong> as it seems, but I think it is a way to go. <strong>The aim of this blog is not always offering good infomation, but the "real-time" infomation</strong>. Tough decision to make, but if I know my aim is this, I will go totally different path.</li>        <li><strong>To give the future me the clue about what I was doing:</strong> If I log down my thought, events, experience, along the time, not only people can see these, I can prevent that future me don't have any clue about "what I was doing at that time?".</li>      </ol>    </li>    <li><strong>Twitter:</strong>      <ol>        <li><strong>280 character limitation:</strong> A while ago I do litte reserching about Twitter, I have really no clue why people want to be limited by that 280 character limitation, it is unbelievable terrible experience for any user (at least for me) that what to write something <strong>deep</strong>. But beside the character limitation of Twitter, it gave me the idea about what is the purpose of those "feeds", what is the meaning of keep producing those post (tweets) while they will definitely not last long and be <strong>buried</strong> under the feeds stream, what is the meaning of keep producing many low quality content instead of few high quality content (trash, will become useless very soon)?</li>        <li><strong>It's all about giving real time [experience]-[feeling]:</strong> I still don't fully understand why twitter design itself this way, but I think I came up with some answer about this - <strong>to make people know your [moment]-[current] activity</strong>, just as simple as that! The aim is totolly <strong>different than producing [quality]**[organized]**[structured] content</strong>, and I don't have this mind set until now. To achieve this <strong>real time feeling for the readers</strong>, you have to post as frequent as possible, quantity and timming first, then qualtiy second. I don't like this trends but sometimes I have to follow the trends.</li>      </ol>    </li>    <li><strong>Privacy is not about something to hide, privacy is about something to protect:</strong> This is the only reason (there is no other valid reason) I think privacy is needed. So I don't agree we should choice privacy as the first option if we have other options. If I want to against something I think that is not right, <strong>I would rather publicly against it, [until]-[unless] publicly against it don't work at all or take too much harm for myself</strong>. So my conclusion is, yes, <strong>we do need privacy in some case</strong> (especially related to government [censorship]-[surveillance] and freedom of speech), but we don't need them in most case and we should be as honest to public as we can, this is consider a virtue. I force myself putting myself under the sun as possible.</li>  </ol></div><div class="h2">  <h2>How to navigate in this blog?:<a id="190222m124809"></a></h2>  <ol>    <li><strong>Use timeline:</strong> All <u>posts</u> list in <a href="/treegbBlog/">home page</a> and <a href="/treegbBlog/archives">archives page</a> are all organized in time-based (date), from older to newer. But also see my <a href="/treegbBlog/19/03/18/190318m144719/">{ Log Table }</a> if you are interesting in my <strong>recent</strong> <code>Logs</code> (events) happens every day, this is the complete [ list ]-[ table ] of my events, activities, thoughts happens every day. This is not as same as normal <u>posts</u>, because content inside <code>Log Table</code> are more trivial and updated <strong>more frequently</strong> than normal <u>posts</u>, while normal <u>posts</u> tends to be more focus to specific ((small)) topic.</li>    <li><strong>Use searching feature (search box of this site):</strong>      <ol>        <li><strong>Use "keywords" to search:</strong> Like <code>orange</code>, <code>fruit</code>, <code>food</code> ...</li>        <li><strong>Use "facets" to search:</strong> <code>Facet</code> is similar to <code>keyword</code>, but more accurate to find the exact <strong>concept</strong> you want to find. It looks like this - <code>color88orange</code>, <code>c88food</code>, <code>food88fruit</code>, <code>food88orange</code>, <code>fruit88orange</code>.</li>        <li><strong>Why we need "facet" when we can use "keyword"?:</strong>          <ol>            <li><strong>More accurate to describe (and search) a concept:</strong> Some <code>keyword</code> have <strong>ambiguous</strong> problem, the keyword is not identical (sometimes not even related) to the <strong>concept</strong> what we are looking for. For example the keyword <code>book</code> might mean the concept "a number of pieces of paper, usually with words printed on them", but might also mean the concept "booking a hotel room or a ticket", which cause we found unrelated search result when searching. While <code>keywords</code> are <strong>ambiguous</strong>, <code>facets</code> are <strong>semantic correct</strong>. So instead of using keywords to search, you can use <strong>alternative</strong> method - use facets to search, so you can get more accurate result. For example using facet <code>c88book</code> to search, you will get posts truely related to book (number of pieces of paper), not unrelated result like booking (booking ticket). Another example, the keyword <code>orange</code> can be the concept <u>orange color</u>, or the concept <u>fruit orange</u>, to eliminate the ambiguous, you search with the facet <code>color88orange</code> or <code>food88orange</code>.</li>            <li><strong>Some concept can only be describe (and searched) by facet:</strong>              <ol>                <li><strong>Time:</strong> <u>Time facet</u> like <code>ti88y19m02d20</code> don't have corresponding keyword. If you want to <strong>search for all posts that published at 2019</strong>, you use facet <code>ti88y19</code> to search. If you want to <strong>search for all articles that published at 2019-02</strong>, you use facet <code>ti88y19m02</code> to search. If you want to <strong>search for all articles that published at 2019, q3 (quarter 3 of the year)</strong>, you use facet <code>ti88y19q3</code> to search.</li>                <li><strong>Feeling:</strong> Another example is <code>feeling88...</code> related facet, these facts are related to feeling, like <code>feeling88soft</code> (can be a post related to soft music), <code>feeling88cold</code>, <code>feeling88warm</code> (can be a post related to a touching stories). In these cases, using <code>keyword</code> to search might not give you useful result, for example <code>soft</code> might give you "software" related result.</li>              </ol>            </li>            <li><strong>Not all keywords have corresponding facets:</strong> Not all keywords have corresponding facets, and not all facets have corresponding keywords, so you sometimes need to use keywords and sometimes need to use facets to find things. For example, keyword <code>philosophy</code> have corresponding facet <code>c88philoshphy</code>, keyword <code>javascript</code> have corresponding facet <code>lang88javascript</code>. But time facet like <code>ti88y19m02d20</code> (it means the publish time is Year 2019, Month 02, Date 20), <code>problem88solved</code> (I have a personal habit, writting (log) down some problem I encountered. If it is still not solved I will use <code>problem88unsolved</code> instead), <code>x88fs</code> (post don't have file or attachment inside) don't have corresponding keyword.</li>          </ol>        </li>      </ol>    </li>  </ol></div><div class="imgBlock"><img src="/treegbBlog/fs/m/19/02/20/190220m203646/treegb-icon_small.png" alt="treegb icon"></div><hr><div class="facetList">Cmm: u190220m203646 x88lost x88fs aboutCurrent: ti88crr88y19 ti88crr88y19dw1 ti88crr88y19m03 ti88crr88y19m03d18 ti88crr88y19m03dw1 ti88crr88y19q1 ti88crr88y19q1dw1 ti88crr88y19w12 ti88crr88y19w12dw1Time (d): ti88y19 ti88y19dw3 ti88y19m02 ti88y19m02d20 ti88y19m02dw3 ti88y19q1 ti88y19q1dw3 ti88y19w08 ti88y19w08dw3</div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
